
BalancingRobot.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800100  000022e6  0000237a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000022e6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000059  00800106  00800106  00002380  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00002380  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000023dc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000200  00000000  00000000  0000241c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001dde  00000000  00000000  0000261c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001095  00000000  00000000  000043fa  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000010f5  00000000  00000000  0000548f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000564  00000000  00000000  00006584  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000820  00000000  00000000  00006ae8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001292  00000000  00000000  00007308  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000180  00000000  00000000  0000859a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 cc 00 	jmp	0x198	; 0x198 <__ctors_end>
       4:	0c 94 e9 00 	jmp	0x1d2	; 0x1d2 <__bad_interrupt>
       8:	0c 94 e9 00 	jmp	0x1d2	; 0x1d2 <__bad_interrupt>
       c:	0c 94 e9 00 	jmp	0x1d2	; 0x1d2 <__bad_interrupt>
      10:	0c 94 e9 00 	jmp	0x1d2	; 0x1d2 <__bad_interrupt>
      14:	0c 94 e9 00 	jmp	0x1d2	; 0x1d2 <__bad_interrupt>
      18:	0c 94 e9 00 	jmp	0x1d2	; 0x1d2 <__bad_interrupt>
      1c:	0c 94 e9 00 	jmp	0x1d2	; 0x1d2 <__bad_interrupt>
      20:	0c 94 e9 00 	jmp	0x1d2	; 0x1d2 <__bad_interrupt>
      24:	0c 94 e9 00 	jmp	0x1d2	; 0x1d2 <__bad_interrupt>
      28:	0c 94 e9 00 	jmp	0x1d2	; 0x1d2 <__bad_interrupt>
      2c:	0c 94 e9 00 	jmp	0x1d2	; 0x1d2 <__bad_interrupt>
      30:	0c 94 e9 00 	jmp	0x1d2	; 0x1d2 <__bad_interrupt>
      34:	0c 94 e7 06 	jmp	0xdce	; 0xdce <__vector_13>
      38:	0c 94 e9 00 	jmp	0x1d2	; 0x1d2 <__bad_interrupt>
      3c:	0c 94 e9 00 	jmp	0x1d2	; 0x1d2 <__bad_interrupt>
      40:	0c 94 e9 00 	jmp	0x1d2	; 0x1d2 <__bad_interrupt>
      44:	0c 94 e9 00 	jmp	0x1d2	; 0x1d2 <__bad_interrupt>
      48:	0c 94 e9 00 	jmp	0x1d2	; 0x1d2 <__bad_interrupt>
      4c:	0c 94 e9 00 	jmp	0x1d2	; 0x1d2 <__bad_interrupt>
      50:	0c 94 e9 00 	jmp	0x1d2	; 0x1d2 <__bad_interrupt>
      54:	0c 94 e9 00 	jmp	0x1d2	; 0x1d2 <__bad_interrupt>
      58:	0c 94 e9 00 	jmp	0x1d2	; 0x1d2 <__bad_interrupt>
      5c:	0c 94 e9 00 	jmp	0x1d2	; 0x1d2 <__bad_interrupt>
      60:	0c 94 e9 00 	jmp	0x1d2	; 0x1d2 <__bad_interrupt>
      64:	0c 94 e9 00 	jmp	0x1d2	; 0x1d2 <__bad_interrupt>
      68:	08 4a       	sbci	r16, 0xA8	; 168
      6a:	d7 3b       	cpi	r29, 0xB7	; 183
      6c:	3b ce       	rjmp	.-906    	; 0xfffffce4 <__eeprom_end+0xff7efce4>
      6e:	01 6e       	ori	r16, 0xE1	; 225
      70:	84 bc       	out	0x24, r8	; 36
      72:	bf fd       	.word	0xfdbf	; ????
      74:	c1 2f       	mov	r28, r17
      76:	3d 6c       	ori	r19, 0xCD	; 205
      78:	74 31       	cpi	r23, 0x14	; 20
      7a:	9a bd       	out	0x2a, r25	; 42
      7c:	56 83       	std	Z+6, r21	; 0x06
      7e:	3d da       	rcall	.-2950   	; 0xfffff4fa <__eeprom_end+0xff7ef4fa>
      80:	3d 00       	.word	0x003d	; ????
      82:	c7 7f       	andi	r28, 0xF7	; 247
      84:	11 be       	out	0x31, r1	; 49
      86:	d9 e4       	ldi	r29, 0x49	; 73
      88:	bb 4c       	sbci	r27, 0xCB	; 203
      8a:	3e 91       	ld	r19, -X
      8c:	6b aa       	std	Y+51, r6	; 0x33
      8e:	aa be       	out	0x3a, r10	; 58
      90:	00 00       	nop
      92:	00 80       	ld	r0, Z
      94:	3f 00       	.word	0x003f	; ????

00000096 <__trampolines_end>:
      96:	6e 61       	ori	r22, 0x1E	; 30
      98:	6e 00       	.word	0x006e	; ????

0000009a <__c.2332>:
      9a:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
      aa:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
      ba:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
      ca:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
      da:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
      ea:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
      fa:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     10a:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     11a:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     12a:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     13a:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     14a:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     15a:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     16a:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     17a:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     18a:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

00000198 <__ctors_end>:
     198:	11 24       	eor	r1, r1
     19a:	1f be       	out	0x3f, r1	; 63
     19c:	cf ef       	ldi	r28, 0xFF	; 255
     19e:	d8 e0       	ldi	r29, 0x08	; 8
     1a0:	de bf       	out	0x3e, r29	; 62
     1a2:	cd bf       	out	0x3d, r28	; 61

000001a4 <__do_copy_data>:
     1a4:	11 e0       	ldi	r17, 0x01	; 1
     1a6:	a0 e0       	ldi	r26, 0x00	; 0
     1a8:	b1 e0       	ldi	r27, 0x01	; 1
     1aa:	e6 ee       	ldi	r30, 0xE6	; 230
     1ac:	f2 e2       	ldi	r31, 0x22	; 34
     1ae:	02 c0       	rjmp	.+4      	; 0x1b4 <__do_copy_data+0x10>
     1b0:	05 90       	lpm	r0, Z+
     1b2:	0d 92       	st	X+, r0
     1b4:	a6 30       	cpi	r26, 0x06	; 6
     1b6:	b1 07       	cpc	r27, r17
     1b8:	d9 f7       	brne	.-10     	; 0x1b0 <__do_copy_data+0xc>

000001ba <__do_clear_bss>:
     1ba:	21 e0       	ldi	r18, 0x01	; 1
     1bc:	a6 e0       	ldi	r26, 0x06	; 6
     1be:	b1 e0       	ldi	r27, 0x01	; 1
     1c0:	01 c0       	rjmp	.+2      	; 0x1c4 <.do_clear_bss_start>

000001c2 <.do_clear_bss_loop>:
     1c2:	1d 92       	st	X+, r1

000001c4 <.do_clear_bss_start>:
     1c4:	af 35       	cpi	r26, 0x5F	; 95
     1c6:	b2 07       	cpc	r27, r18
     1c8:	e1 f7       	brne	.-8      	; 0x1c2 <.do_clear_bss_loop>
     1ca:	0e 94 ed 03 	call	0x7da	; 0x7da <main>
     1ce:	0c 94 71 11 	jmp	0x22e2	; 0x22e2 <_exit>

000001d2 <__bad_interrupt>:
     1d2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001d6 <MotorStop>:

//MotorStop Function
void MotorStop(void)
{
	//RightMotor Stop
	OCR0A = 0x00;
     1d6:	17 bc       	out	0x27, r1	; 39
	OCR0B = 0x00;
     1d8:	18 bc       	out	0x28, r1	; 40
	
	//LeftMotor Stop
	OCR2A = 0x00;
     1da:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__DATA_REGION_ORIGIN__+0x53>
	OCR2B = 0x00;		
     1de:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__DATA_REGION_ORIGIN__+0x54>
     1e2:	08 95       	ret

000001e4 <MotorDir_CW>:
}

void MotorDir_CW(volatile uint8_t* duty)
{
     1e4:	fc 01       	movw	r30, r24
	//LEFT Motor Ctrl
	OCR0A = (uint8_t)Duty_Min + *duty;
     1e6:	90 81       	ld	r25, Z
     1e8:	95 56       	subi	r25, 0x65	; 101
     1ea:	97 bd       	out	0x27, r25	; 39
	OCR0B = (uint8_t)Motor_Stop;
     1ec:	18 bc       	out	0x28, r1	; 40
		
	//RIGHT Motor Ctrl
	OCR2A = (uint8_t)Duty_Min + *duty;
     1ee:	80 81       	ld	r24, Z
     1f0:	85 56       	subi	r24, 0x65	; 101
     1f2:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__DATA_REGION_ORIGIN__+0x53>
	OCR2B = (uint8_t)Motor_Stop;	
     1f6:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__DATA_REGION_ORIGIN__+0x54>
     1fa:	08 95       	ret

000001fc <MotorDir_CCW>:
}

void MotorDir_CCW(volatile uint8_t* duty)
{
     1fc:	fc 01       	movw	r30, r24
	//LEFT Motor Ctrl
	OCR0B = (uint8_t)Duty_Min + *duty;
     1fe:	90 81       	ld	r25, Z
     200:	95 56       	subi	r25, 0x65	; 101
     202:	98 bd       	out	0x28, r25	; 40
	OCR0A = (uint8_t)Motor_Stop;
     204:	17 bc       	out	0x27, r1	; 39
	
	//RIGHT Motor Ctrl
	OCR2B = (uint8_t)Duty_Min + *duty;
     206:	80 81       	ld	r24, Z
     208:	85 56       	subi	r24, 0x65	; 101
     20a:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <__DATA_REGION_ORIGIN__+0x54>
	OCR2A = (uint8_t)Motor_Stop;	
     20e:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__DATA_REGION_ORIGIN__+0x53>
     212:	08 95       	ret

00000214 <RunMotor>:
}

void RunMotor(volatile uint8_t* duty, volatile uint8_t* dir)
{
	if(*dir == (uint8_t)CW) MotorDir_CW(duty);
     214:	fb 01       	movw	r30, r22
     216:	20 81       	ld	r18, Z
     218:	21 30       	cpi	r18, 0x01	; 1
     21a:	19 f4       	brne	.+6      	; 0x222 <RunMotor+0xe>
     21c:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <MotorDir_CW>
     220:	08 95       	ret
	else MotorDir_CCW(duty);
     222:	0e 94 fe 00 	call	0x1fc	; 0x1fc <MotorDir_CCW>
     226:	08 95       	ret

00000228 <MPU6050_ReadBytes>:

static Angle_3Dim Accel_Angle;
static Angle_3Dim Gyro_Angle;

uint8_t MPU6050_ReadBytes(uint8_t reg_addr, uint8_t len, uint8_t* pData)
{
     228:	af 92       	push	r10
     22a:	bf 92       	push	r11
     22c:	df 92       	push	r13
     22e:	ef 92       	push	r14
     230:	ff 92       	push	r15
     232:	0f 93       	push	r16
     234:	1f 93       	push	r17
     236:	cf 93       	push	r28
     238:	df 93       	push	r29
     23a:	c8 2f       	mov	r28, r24
     23c:	d6 2e       	mov	r13, r22
     23e:	b4 2e       	mov	r11, r20
     240:	d5 2f       	mov	r29, r21
	uint8_t cnt = 0;
	if(len > 0)
     242:	66 23       	and	r22, r22
     244:	49 f1       	breq	.+82     	; 0x298 <MPU6050_ReadBytes+0x70>
	{
		i2c_start((MPU6050_ADD0 << 1) | I2C_WRITE);
     246:	80 ed       	ldi	r24, 0xD0	; 208
     248:	0e 94 4d 07 	call	0xe9a	; 0xe9a <i2c_start>
		i2c_write(reg_addr);
     24c:	8c 2f       	mov	r24, r28
     24e:	0e 94 80 07 	call	0xf00	; 0xf00 <i2c_write>
		i2c_rep_start((MPU6050_ADD0 << 1) | I2C_READ);
     252:	81 ed       	ldi	r24, 0xD1	; 209
     254:	0e 94 74 07 	call	0xee8	; 0xee8 <i2c_rep_start>
		
		for(int i = 0; i < len; i++)
     258:	ed 2c       	mov	r14, r13
     25a:	f1 2c       	mov	r15, r1
     25c:	1e 14       	cp	r1, r14
     25e:	1f 04       	cpc	r1, r15
     260:	ec f4       	brge	.+58     	; 0x29c <MPU6050_ReadBytes+0x74>
     262:	0b 2d       	mov	r16, r11
     264:	1d 2f       	mov	r17, r29
     266:	c0 e0       	ldi	r28, 0x00	; 0
     268:	d0 e0       	ldi	r29, 0x00	; 0
		{
			cnt++;
			if(i == len-1) 
     26a:	57 01       	movw	r10, r14
     26c:	81 e0       	ldi	r24, 0x01	; 1
     26e:	a8 1a       	sub	r10, r24
     270:	b1 08       	sbc	r11, r1
     272:	ac 16       	cp	r10, r28
     274:	bd 06       	cpc	r11, r29
     276:	29 f4       	brne	.+10     	; 0x282 <MPU6050_ReadBytes+0x5a>
				pData[i] = i2c_readNak();
     278:	0e 94 9d 07 	call	0xf3a	; 0xf3a <i2c_readNak>
     27c:	f8 01       	movw	r30, r16
     27e:	80 83       	st	Z, r24
     280:	04 c0       	rjmp	.+8      	; 0x28a <MPU6050_ReadBytes+0x62>
			else 
				pData[i] = i2c_readAck();
     282:	0e 94 92 07 	call	0xf24	; 0xf24 <i2c_readAck>
     286:	f8 01       	movw	r30, r16
     288:	80 83       	st	Z, r24
	{
		i2c_start((MPU6050_ADD0 << 1) | I2C_WRITE);
		i2c_write(reg_addr);
		i2c_rep_start((MPU6050_ADD0 << 1) | I2C_READ);
		
		for(int i = 0; i < len; i++)
     28a:	21 96       	adiw	r28, 0x01	; 1
     28c:	0f 5f       	subi	r16, 0xFF	; 255
     28e:	1f 4f       	sbci	r17, 0xFF	; 255
     290:	ce 15       	cp	r28, r14
     292:	df 05       	cpc	r29, r15
     294:	71 f7       	brne	.-36     	; 0x272 <MPU6050_ReadBytes+0x4a>
     296:	03 c0       	rjmp	.+6      	; 0x29e <MPU6050_ReadBytes+0x76>
static Angle_3Dim Accel_Angle;
static Angle_3Dim Gyro_Angle;

uint8_t MPU6050_ReadBytes(uint8_t reg_addr, uint8_t len, uint8_t* pData)
{
	uint8_t cnt = 0;
     298:	d1 2c       	mov	r13, r1
     29a:	01 c0       	rjmp	.+2      	; 0x29e <MPU6050_ReadBytes+0x76>
     29c:	d1 2c       	mov	r13, r1
				pData[i] = i2c_readNak();
			else 
				pData[i] = i2c_readAck();
		}
	}	
	i2c_stop();
     29e:	0e 94 77 07 	call	0xeee	; 0xeee <i2c_stop>
	return cnt;
}
     2a2:	8d 2d       	mov	r24, r13
     2a4:	df 91       	pop	r29
     2a6:	cf 91       	pop	r28
     2a8:	1f 91       	pop	r17
     2aa:	0f 91       	pop	r16
     2ac:	ff 90       	pop	r15
     2ae:	ef 90       	pop	r14
     2b0:	df 90       	pop	r13
     2b2:	bf 90       	pop	r11
     2b4:	af 90       	pop	r10
     2b6:	08 95       	ret

000002b8 <MPU6050_ReadByte>:

uint8_t MPU6050_ReadByte(uint8_t reg_addr, uint8_t* pData)
{
     2b8:	ab 01       	movw	r20, r22
	return MPU6050_ReadBytes(reg_addr, 1, pData);
     2ba:	61 e0       	ldi	r22, 0x01	; 1
     2bc:	0e 94 14 01 	call	0x228	; 0x228 <MPU6050_ReadBytes>
}
     2c0:	08 95       	ret

000002c2 <MPU6050_WriteBytes>:

void MPU6050_WriteBytes(uint8_t reg_addr, uint8_t len, uint8_t* pData)
{
     2c2:	ff 92       	push	r15
     2c4:	0f 93       	push	r16
     2c6:	1f 93       	push	r17
     2c8:	cf 93       	push	r28
     2ca:	df 93       	push	r29
     2cc:	c8 2f       	mov	r28, r24
     2ce:	f6 2e       	mov	r15, r22
     2d0:	8a 01       	movw	r16, r20
	if(len > 0)
     2d2:	66 23       	and	r22, r22
     2d4:	89 f0       	breq	.+34     	; 0x2f8 <MPU6050_WriteBytes+0x36>
	{
		i2c_start((MPU6050_ADD0 << 1) | I2C_WRITE);
     2d6:	80 ed       	ldi	r24, 0xD0	; 208
     2d8:	0e 94 4d 07 	call	0xe9a	; 0xe9a <i2c_start>
		i2c_write(reg_addr);
     2dc:	8c 2f       	mov	r24, r28
     2de:	0e 94 80 07 	call	0xf00	; 0xf00 <i2c_write>
		for(int i = 0; i < len; i++)
     2e2:	ff 20       	and	r15, r15
     2e4:	49 f0       	breq	.+18     	; 0x2f8 <MPU6050_WriteBytes+0x36>
     2e6:	e8 01       	movw	r28, r16
     2e8:	0f 0d       	add	r16, r15
     2ea:	11 1d       	adc	r17, r1
		i2c_write((uint8_t)pData[i]);
     2ec:	89 91       	ld	r24, Y+
     2ee:	0e 94 80 07 	call	0xf00	; 0xf00 <i2c_write>
{
	if(len > 0)
	{
		i2c_start((MPU6050_ADD0 << 1) | I2C_WRITE);
		i2c_write(reg_addr);
		for(int i = 0; i < len; i++)
     2f2:	c0 17       	cp	r28, r16
     2f4:	d1 07       	cpc	r29, r17
     2f6:	d1 f7       	brne	.-12     	; 0x2ec <MPU6050_WriteBytes+0x2a>
		i2c_write((uint8_t)pData[i]);
	}
	
	i2c_stop();
     2f8:	0e 94 77 07 	call	0xeee	; 0xeee <i2c_stop>
}
     2fc:	df 91       	pop	r29
     2fe:	cf 91       	pop	r28
     300:	1f 91       	pop	r17
     302:	0f 91       	pop	r16
     304:	ff 90       	pop	r15
     306:	08 95       	ret

00000308 <MPU6050_WriteByte>:

void MPU6050_WriteByte(uint8_t reg_addr, uint8_t data)
{
     308:	cf 93       	push	r28
     30a:	df 93       	push	r29
     30c:	1f 92       	push	r1
     30e:	cd b7       	in	r28, 0x3d	; 61
     310:	de b7       	in	r29, 0x3e	; 62
     312:	69 83       	std	Y+1, r22	; 0x01
	MPU6050_WriteBytes(reg_addr, 1, &data);
     314:	ae 01       	movw	r20, r28
     316:	4f 5f       	subi	r20, 0xFF	; 255
     318:	5f 4f       	sbci	r21, 0xFF	; 255
     31a:	61 e0       	ldi	r22, 0x01	; 1
     31c:	0e 94 61 01 	call	0x2c2	; 0x2c2 <MPU6050_WriteBytes>
}
     320:	0f 90       	pop	r0
     322:	df 91       	pop	r29
     324:	cf 91       	pop	r28
     326:	08 95       	ret

00000328 <MPU6050_WriteBits>:

void MPU6050_WriteBits(uint8_t reg_addr, uint8_t bit, uint8_t len, uint8_t data)
{
     328:	ef 92       	push	r14
     32a:	ff 92       	push	r15
     32c:	0f 93       	push	r16
     32e:	1f 93       	push	r17
     330:	cf 93       	push	r28
     332:	df 93       	push	r29
     334:	1f 92       	push	r1
     336:	cd b7       	in	r28, 0x3d	; 61
     338:	de b7       	in	r29, 0x3e	; 62
	if(len > 0)
     33a:	44 23       	and	r20, r20
     33c:	91 f1       	breq	.+100    	; 0x3a2 <MPU6050_WriteBits+0x7a>
     33e:	f2 2e       	mov	r15, r18
     340:	04 2f       	mov	r16, r20
     342:	16 2f       	mov	r17, r22
     344:	e8 2e       	mov	r14, r24
	{
		uint8_t tmp = 0;
     346:	19 82       	std	Y+1, r1	; 0x01
		if(MPU6050_ReadByte(reg_addr, &tmp) != 0)
     348:	be 01       	movw	r22, r28
     34a:	6f 5f       	subi	r22, 0xFF	; 255
     34c:	7f 4f       	sbci	r23, 0xFF	; 255
     34e:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <MPU6050_ReadByte>
     352:	88 23       	and	r24, r24
     354:	11 f1       	breq	.+68     	; 0x39a <MPU6050_WriteBits+0x72>
		{
			uint8_t mask = ((1 << len) - 1) << (bit - len + 1);
     356:	61 2f       	mov	r22, r17
     358:	70 e0       	ldi	r23, 0x00	; 0
     35a:	60 1b       	sub	r22, r16
     35c:	71 09       	sbc	r23, r1
     35e:	6f 5f       	subi	r22, 0xFF	; 255
     360:	7f 4f       	sbci	r23, 0xFF	; 255
     362:	81 e0       	ldi	r24, 0x01	; 1
     364:	90 e0       	ldi	r25, 0x00	; 0
     366:	02 c0       	rjmp	.+4      	; 0x36c <MPU6050_WriteBits+0x44>
     368:	88 0f       	add	r24, r24
     36a:	99 1f       	adc	r25, r25
     36c:	0a 95       	dec	r16
     36e:	e2 f7       	brpl	.-8      	; 0x368 <MPU6050_WriteBits+0x40>
     370:	01 97       	sbiw	r24, 0x01	; 1
     372:	06 2e       	mov	r0, r22
     374:	02 c0       	rjmp	.+4      	; 0x37a <MPU6050_WriteBits+0x52>
     376:	88 0f       	add	r24, r24
     378:	99 1f       	adc	r25, r25
     37a:	0a 94       	dec	r0
     37c:	e2 f7       	brpl	.-8      	; 0x376 <MPU6050_WriteBits+0x4e>
			data <<= (bit - len + 1);
     37e:	2f 2d       	mov	r18, r15
     380:	30 e0       	ldi	r19, 0x00	; 0
     382:	02 c0       	rjmp	.+4      	; 0x388 <MPU6050_WriteBits+0x60>
     384:	22 0f       	add	r18, r18
     386:	33 1f       	adc	r19, r19
     388:	6a 95       	dec	r22
     38a:	e2 f7       	brpl	.-8      	; 0x384 <MPU6050_WriteBits+0x5c>
			data &= mask;
			tmp &= ~mask;
			tmp |= data;
     38c:	f8 2e       	mov	r15, r24
     38e:	f0 94       	com	r15
     390:	99 81       	ldd	r25, Y+1	; 0x01
     392:	f9 22       	and	r15, r25
     394:	82 23       	and	r24, r18
     396:	8f 29       	or	r24, r15
     398:	89 83       	std	Y+1, r24	; 0x01
		}
		MPU6050_WriteByte(reg_addr, tmp);
     39a:	69 81       	ldd	r22, Y+1	; 0x01
     39c:	8e 2d       	mov	r24, r14
     39e:	0e 94 84 01 	call	0x308	; 0x308 <MPU6050_WriteByte>
	}
}
     3a2:	0f 90       	pop	r0
     3a4:	df 91       	pop	r29
     3a6:	cf 91       	pop	r28
     3a8:	1f 91       	pop	r17
     3aa:	0f 91       	pop	r16
     3ac:	ff 90       	pop	r15
     3ae:	ef 90       	pop	r14
     3b0:	08 95       	ret

000003b2 <InitMPU6050>:

void InitMPU6050(void)
{	
	//Register : PWR management1, Set Bit : SLEEP MODE, Set SLEEP MODE Bit length : 1, Disable SLEEP MODE
	MPU6050_WriteBits(PWR_MGMT_1, SLEEP_MODE_BIT, SLEEP_MODE_LEN, DISABLE);
     3b2:	20 e0       	ldi	r18, 0x00	; 0
     3b4:	41 e0       	ldi	r20, 0x01	; 1
     3b6:	66 e0       	ldi	r22, 0x06	; 6
     3b8:	8b e6       	ldi	r24, 0x6B	; 107
     3ba:	0e 94 94 01 	call	0x328	; 0x328 <MPU6050_WriteBits>
	
	//Register : PWR management1, Set Bit : CLK Select, Set CLK Select length : 3, Set CLK source : PLL with X axis gyroscope reference
	MPU6050_WriteBits(PWR_MGMT_1, CLKSEL_BIT, CLKSEL_LEN, CLKSEL1);
     3be:	21 e0       	ldi	r18, 0x01	; 1
     3c0:	43 e0       	ldi	r20, 0x03	; 3
     3c2:	62 e0       	ldi	r22, 0x02	; 2
     3c4:	8b e6       	ldi	r24, 0x6B	; 107
     3c6:	0e 94 94 01 	call	0x328	; 0x328 <MPU6050_WriteBits>
	//MPU6050_WriteBits(INT_ENABLE, DATA_RDY_INT_EN, DATA_RDY_INT_EN_LEN, ENABLE);
	
	//Register : Configuration, Set Bit : Digital LowPassFilter Config, Set DLPF Bit length : 3, 
	//Set DLPF config3 : Accele = 44Hz(Bandwidth), 4.9ms(Delay), Fs = 1KHz / Gyro = 42Hz(Bandwidth), 4.8ms(Delay), Fs = 1KHz -> 2020.12.07
	//Set DLPF config0 : Accele = 260Hz(Bandwidth), 0ms(Delay), Fs = 1KHz / Gyro = 256Hz(Bandwidth), 0.98ms(Delay), Fs = 8KHz -> 2020.12.28
	MPU6050_WriteBits(CONFIG, DLPF_CFG_BIT, DLPF_CFG_LEN, DLPF_CFG0);
     3ca:	20 e0       	ldi	r18, 0x00	; 0
     3cc:	43 e0       	ldi	r20, 0x03	; 3
     3ce:	62 e0       	ldi	r22, 0x02	; 2
     3d0:	8a e1       	ldi	r24, 0x1A	; 26
     3d2:	0e 94 94 01 	call	0x328	; 0x328 <MPU6050_WriteBits>
	
	//Register : Sample Rate, Writes 0x04 : Sample Rate = Gyroscope Output Rate / (1 + SMPLRT_DIV(=4))
	//where Gyroscope Output Rate = 8kHz when the DLPF is disabled (DLPF_CFG = 0 or 7), and 1kHz
	//when the DLPF is enabled
	MPU6050_WriteByte(SMPLRT_DIV, 4);
     3d6:	64 e0       	ldi	r22, 0x04	; 4
     3d8:	89 e1       	ldi	r24, 0x19	; 25
     3da:	0e 94 84 01 	call	0x308	; 0x308 <MPU6050_WriteByte>
	
	//Register : Gyro Configuration, Set Bit : Gyro Full Scale, Set Bit length : 2, Set Gyro Full Scale : +,-2000 degree/s
	MPU6050_WriteBits(GYRO_CONFIG, GYRO_FS_SEL_BIT, GYRO_FS_SEL_LEN, GYRO_FS_SEL2000);
     3de:	23 e0       	ldi	r18, 0x03	; 3
     3e0:	42 e0       	ldi	r20, 0x02	; 2
     3e2:	64 e0       	ldi	r22, 0x04	; 4
     3e4:	8b e1       	ldi	r24, 0x1B	; 27
     3e6:	0e 94 94 01 	call	0x328	; 0x328 <MPU6050_WriteBits>
	
	//Register : Accelerometer Configuration, Set Bit : Accelerometer Full Scale, Set Bit length : 2, Set Accel Full Scale : +,-16g
	MPU6050_WriteBits(ACCEL_CONFIG, ACCEL_AFS_SEL_BIT, ACCEL_AFS_SEL_LEN, ACCEL_AFS_SEL16G);
     3ea:	23 e0       	ldi	r18, 0x03	; 3
     3ec:	42 e0       	ldi	r20, 0x02	; 2
     3ee:	64 e0       	ldi	r22, 0x04	; 4
     3f0:	8c e1       	ldi	r24, 0x1C	; 28
     3f2:	0e 94 94 01 	call	0x328	; 0x328 <MPU6050_WriteBits>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     3f6:	2f ef       	ldi	r18, 0xFF	; 255
     3f8:	86 e7       	ldi	r24, 0x76	; 118
     3fa:	91 e0       	ldi	r25, 0x01	; 1
     3fc:	21 50       	subi	r18, 0x01	; 1
     3fe:	80 40       	sbci	r24, 0x00	; 0
     400:	90 40       	sbci	r25, 0x00	; 0
     402:	e1 f7       	brne	.-8      	; 0x3fc <InitMPU6050+0x4a>
     404:	00 c0       	rjmp	.+0      	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
     406:	00 00       	nop
	
	_delay_ms(30);
	
	Gyro_Angle.Roll = 0;
     408:	e6 e0       	ldi	r30, 0x06	; 6
     40a:	f1 e0       	ldi	r31, 0x01	; 1
     40c:	10 82       	st	Z, r1
     40e:	11 82       	std	Z+1, r1	; 0x01
     410:	12 82       	std	Z+2, r1	; 0x02
     412:	13 82       	std	Z+3, r1	; 0x03
	Gyro_Angle.Pitch = 0;
     414:	14 82       	std	Z+4, r1	; 0x04
     416:	15 82       	std	Z+5, r1	; 0x05
     418:	16 82       	std	Z+6, r1	; 0x06
     41a:	17 82       	std	Z+7, r1	; 0x07
	Gyro_Angle.Yaw = 0;
     41c:	10 86       	std	Z+8, r1	; 0x08
     41e:	11 86       	std	Z+9, r1	; 0x09
     420:	12 86       	std	Z+10, r1	; 0x0a
     422:	13 86       	std	Z+11, r1	; 0x0b
	
	Accel_Angle.Roll = 0;
     424:	e2 e1       	ldi	r30, 0x12	; 18
     426:	f1 e0       	ldi	r31, 0x01	; 1
     428:	10 82       	st	Z, r1
     42a:	11 82       	std	Z+1, r1	; 0x01
     42c:	12 82       	std	Z+2, r1	; 0x02
     42e:	13 82       	std	Z+3, r1	; 0x03
	Accel_Angle.Pitch = 0;
     430:	14 82       	std	Z+4, r1	; 0x04
     432:	15 82       	std	Z+5, r1	; 0x05
     434:	16 82       	std	Z+6, r1	; 0x06
     436:	17 82       	std	Z+7, r1	; 0x07
	Accel_Angle.Yaw = 0;
     438:	10 86       	std	Z+8, r1	; 0x08
     43a:	11 86       	std	Z+9, r1	; 0x09
     43c:	12 86       	std	Z+10, r1	; 0x0a
     43e:	13 86       	std	Z+11, r1	; 0x0b
     440:	08 95       	ret

00000442 <get_MPU6050_RawData>:
}

//Get MPU6050 Accelerometer & Gyro RawData
void get_MPU6050_RawData(pAxis_Data Accel_Data, pAxis_Data Gyro_Data)
{	
     442:	ef 92       	push	r14
     444:	ff 92       	push	r15
     446:	0f 93       	push	r16
     448:	1f 93       	push	r17
     44a:	cf 93       	push	r28
     44c:	df 93       	push	r29
     44e:	cd b7       	in	r28, 0x3d	; 61
     450:	de b7       	in	r29, 0x3e	; 62
     452:	2e 97       	sbiw	r28, 0x0e	; 14
     454:	0f b6       	in	r0, 0x3f	; 63
     456:	f8 94       	cli
     458:	de bf       	out	0x3e, r29	; 62
     45a:	0f be       	out	0x3f, r0	; 63
     45c:	cd bf       	out	0x3d, r28	; 61
     45e:	7c 01       	movw	r14, r24
     460:	8b 01       	movw	r16, r22
	uint8_t buffer[14] = {0,};
     462:	ae 01       	movw	r20, r28
     464:	4f 5f       	subi	r20, 0xFF	; 255
     466:	5f 4f       	sbci	r21, 0xFF	; 255
     468:	8e e0       	ldi	r24, 0x0E	; 14
     46a:	fa 01       	movw	r30, r20
     46c:	11 92       	st	Z+, r1
     46e:	8a 95       	dec	r24
     470:	e9 f7       	brne	.-6      	; 0x46c <get_MPU6050_RawData+0x2a>
	MPU6050_ReadBytes(ACCEL_XOUT_H, 14, buffer);
     472:	6e e0       	ldi	r22, 0x0E	; 14
     474:	8b e3       	ldi	r24, 0x3B	; 59
     476:	0e 94 14 01 	call	0x228	; 0x228 <MPU6050_ReadBytes>
	
	Accel_Data->Xaxis = (uint16_t)buffer[0] << 8 | buffer[1];
     47a:	89 81       	ldd	r24, Y+1	; 0x01
     47c:	90 e0       	ldi	r25, 0x00	; 0
     47e:	98 2f       	mov	r25, r24
     480:	88 27       	eor	r24, r24
     482:	2a 81       	ldd	r18, Y+2	; 0x02
     484:	82 2b       	or	r24, r18
     486:	f7 01       	movw	r30, r14
     488:	91 83       	std	Z+1, r25	; 0x01
     48a:	80 83       	st	Z, r24
	Accel_Data->Yaxis = (uint16_t)buffer[2] << 8 | buffer[3];
     48c:	8b 81       	ldd	r24, Y+3	; 0x03
     48e:	90 e0       	ldi	r25, 0x00	; 0
     490:	98 2f       	mov	r25, r24
     492:	88 27       	eor	r24, r24
     494:	2c 81       	ldd	r18, Y+4	; 0x04
     496:	82 2b       	or	r24, r18
     498:	93 83       	std	Z+3, r25	; 0x03
     49a:	82 83       	std	Z+2, r24	; 0x02
	Accel_Data->Zaxis = (uint16_t)buffer[4] << 8 | buffer[5];
     49c:	8d 81       	ldd	r24, Y+5	; 0x05
     49e:	90 e0       	ldi	r25, 0x00	; 0
     4a0:	98 2f       	mov	r25, r24
     4a2:	88 27       	eor	r24, r24
     4a4:	2e 81       	ldd	r18, Y+6	; 0x06
     4a6:	82 2b       	or	r24, r18
     4a8:	95 83       	std	Z+5, r25	; 0x05
     4aa:	84 83       	std	Z+4, r24	; 0x04
	
	Gyro_Data->Xaxis = (uint16_t)buffer[8] << 8 | buffer[9];
     4ac:	89 85       	ldd	r24, Y+9	; 0x09
     4ae:	90 e0       	ldi	r25, 0x00	; 0
     4b0:	98 2f       	mov	r25, r24
     4b2:	88 27       	eor	r24, r24
     4b4:	2a 85       	ldd	r18, Y+10	; 0x0a
     4b6:	82 2b       	or	r24, r18
     4b8:	f8 01       	movw	r30, r16
     4ba:	91 83       	std	Z+1, r25	; 0x01
     4bc:	80 83       	st	Z, r24
	Gyro_Data->Yaxis = (uint16_t)buffer[10] << 8 | buffer[11];
     4be:	8b 85       	ldd	r24, Y+11	; 0x0b
     4c0:	90 e0       	ldi	r25, 0x00	; 0
     4c2:	98 2f       	mov	r25, r24
     4c4:	88 27       	eor	r24, r24
     4c6:	2c 85       	ldd	r18, Y+12	; 0x0c
     4c8:	82 2b       	or	r24, r18
     4ca:	93 83       	std	Z+3, r25	; 0x03
     4cc:	82 83       	std	Z+2, r24	; 0x02
	Gyro_Data->Zaxis = (uint16_t)buffer[12] << 8 | buffer[13];
     4ce:	8d 85       	ldd	r24, Y+13	; 0x0d
     4d0:	90 e0       	ldi	r25, 0x00	; 0
     4d2:	98 2f       	mov	r25, r24
     4d4:	88 27       	eor	r24, r24
     4d6:	2e 85       	ldd	r18, Y+14	; 0x0e
     4d8:	82 2b       	or	r24, r18
     4da:	95 83       	std	Z+5, r25	; 0x05
     4dc:	84 83       	std	Z+4, r24	; 0x04
}
     4de:	2e 96       	adiw	r28, 0x0e	; 14
     4e0:	0f b6       	in	r0, 0x3f	; 63
     4e2:	f8 94       	cli
     4e4:	de bf       	out	0x3e, r29	; 62
     4e6:	0f be       	out	0x3f, r0	; 63
     4e8:	cd bf       	out	0x3d, r28	; 61
     4ea:	df 91       	pop	r29
     4ec:	cf 91       	pop	r28
     4ee:	1f 91       	pop	r17
     4f0:	0f 91       	pop	r16
     4f2:	ff 90       	pop	r15
     4f4:	ef 90       	pop	r14
     4f6:	08 95       	ret

000004f8 <Calc_Accel_RollPitch>:

void Calc_Accel_RollPitch(pAxis_Data AccelData, pAngle_3Dim Accel_Angle)
{
     4f8:	8f 92       	push	r8
     4fa:	9f 92       	push	r9
     4fc:	af 92       	push	r10
     4fe:	bf 92       	push	r11
     500:	cf 92       	push	r12
     502:	df 92       	push	r13
     504:	ef 92       	push	r14
     506:	ff 92       	push	r15
     508:	0f 93       	push	r16
     50a:	1f 93       	push	r17
     50c:	cf 93       	push	r28
     50e:	df 93       	push	r29
     510:	ec 01       	movw	r28, r24
     512:	8b 01       	movw	r16, r22
	Angle_3Dim Angle_Tmp;
	
	Angle_Tmp.Roll = (double)AccelData -> Xaxis / (double)ACCEL_LSB_FS16G;
     514:	68 81       	ld	r22, Y
     516:	79 81       	ldd	r23, Y+1	; 0x01
     518:	07 2e       	mov	r0, r23
     51a:	00 0c       	add	r0, r0
     51c:	88 0b       	sbc	r24, r24
     51e:	99 0b       	sbc	r25, r25
     520:	0e 94 51 09 	call	0x12a2	; 0x12a2 <__floatsisf>
     524:	20 e0       	ldi	r18, 0x00	; 0
     526:	30 e0       	ldi	r19, 0x00	; 0
     528:	40 e0       	ldi	r20, 0x00	; 0
     52a:	5a e3       	ldi	r21, 0x3A	; 58
     52c:	0e 94 35 0a 	call	0x146a	; 0x146a <__mulsf3>
     530:	4b 01       	movw	r8, r22
     532:	5c 01       	movw	r10, r24
	Angle_Tmp.Pitch = (double)AccelData -> Yaxis / (double)ACCEL_LSB_FS16G;
	Angle_Tmp.Yaw = (double)AccelData -> Zaxis / (double)ACCEL_LSB_FS16G;
     534:	6c 81       	ldd	r22, Y+4	; 0x04
     536:	7d 81       	ldd	r23, Y+5	; 0x05
     538:	07 2e       	mov	r0, r23
     53a:	00 0c       	add	r0, r0
     53c:	88 0b       	sbc	r24, r24
     53e:	99 0b       	sbc	r25, r25
     540:	0e 94 51 09 	call	0x12a2	; 0x12a2 <__floatsisf>
     544:	20 e0       	ldi	r18, 0x00	; 0
     546:	30 e0       	ldi	r19, 0x00	; 0
     548:	40 e0       	ldi	r20, 0x00	; 0
     54a:	5a e3       	ldi	r21, 0x3A	; 58
     54c:	0e 94 35 0a 	call	0x146a	; 0x146a <__mulsf3>
     550:	6b 01       	movw	r12, r22
     552:	7c 01       	movw	r14, r24
	
	Accel_Angle->Roll = atan2(Angle_Tmp.Pitch, Angle_Tmp.Yaw) * 180.0F / (double)PI;
     554:	6a 81       	ldd	r22, Y+2	; 0x02
     556:	7b 81       	ldd	r23, Y+3	; 0x03
     558:	07 2e       	mov	r0, r23
     55a:	00 0c       	add	r0, r0
     55c:	88 0b       	sbc	r24, r24
     55e:	99 0b       	sbc	r25, r25
     560:	0e 94 51 09 	call	0x12a2	; 0x12a2 <__floatsisf>
     564:	20 e0       	ldi	r18, 0x00	; 0
     566:	30 e0       	ldi	r19, 0x00	; 0
     568:	40 e0       	ldi	r20, 0x00	; 0
     56a:	5a e3       	ldi	r21, 0x3A	; 58
     56c:	0e 94 35 0a 	call	0x146a	; 0x146a <__mulsf3>
     570:	a7 01       	movw	r20, r14
     572:	96 01       	movw	r18, r12
     574:	0e 94 4a 08 	call	0x1094	; 0x1094 <atan2>
     578:	20 e0       	ldi	r18, 0x00	; 0
     57a:	30 e0       	ldi	r19, 0x00	; 0
     57c:	44 e3       	ldi	r20, 0x34	; 52
     57e:	53 e4       	ldi	r21, 0x43	; 67
     580:	0e 94 35 0a 	call	0x146a	; 0x146a <__mulsf3>
     584:	2b ed       	ldi	r18, 0xDB	; 219
     586:	3f e0       	ldi	r19, 0x0F	; 15
     588:	49 e4       	ldi	r20, 0x49	; 73
     58a:	50 e4       	ldi	r21, 0x40	; 64
     58c:	0e 94 ae 08 	call	0x115c	; 0x115c <__divsf3>
     590:	f8 01       	movw	r30, r16
     592:	60 83       	st	Z, r22
     594:	71 83       	std	Z+1, r23	; 0x01
     596:	82 83       	std	Z+2, r24	; 0x02
     598:	93 83       	std	Z+3, r25	; 0x03
	Accel_Angle->Pitch = atan2(Angle_Tmp.Roll, Angle_Tmp.Yaw) * 180.0F / (double)PI;
     59a:	a7 01       	movw	r20, r14
     59c:	96 01       	movw	r18, r12
     59e:	c5 01       	movw	r24, r10
     5a0:	b4 01       	movw	r22, r8
     5a2:	0e 94 4a 08 	call	0x1094	; 0x1094 <atan2>
     5a6:	20 e0       	ldi	r18, 0x00	; 0
     5a8:	30 e0       	ldi	r19, 0x00	; 0
     5aa:	44 e3       	ldi	r20, 0x34	; 52
     5ac:	53 e4       	ldi	r21, 0x43	; 67
     5ae:	0e 94 35 0a 	call	0x146a	; 0x146a <__mulsf3>
     5b2:	2b ed       	ldi	r18, 0xDB	; 219
     5b4:	3f e0       	ldi	r19, 0x0F	; 15
     5b6:	49 e4       	ldi	r20, 0x49	; 73
     5b8:	50 e4       	ldi	r21, 0x40	; 64
     5ba:	0e 94 ae 08 	call	0x115c	; 0x115c <__divsf3>
     5be:	f8 01       	movw	r30, r16
     5c0:	64 83       	std	Z+4, r22	; 0x04
     5c2:	75 83       	std	Z+5, r23	; 0x05
     5c4:	86 83       	std	Z+6, r24	; 0x06
     5c6:	97 83       	std	Z+7, r25	; 0x07
	
	#ifdef ForTestMPU6050
	printf("Roll = %.2f\tPitch = %.2f\n", Accel_Angle->Roll, Accel_Angle->Pitch);
	#endif
}
     5c8:	df 91       	pop	r29
     5ca:	cf 91       	pop	r28
     5cc:	1f 91       	pop	r17
     5ce:	0f 91       	pop	r16
     5d0:	ff 90       	pop	r15
     5d2:	ef 90       	pop	r14
     5d4:	df 90       	pop	r13
     5d6:	cf 90       	pop	r12
     5d8:	bf 90       	pop	r11
     5da:	af 90       	pop	r10
     5dc:	9f 90       	pop	r9
     5de:	8f 90       	pop	r8
     5e0:	08 95       	ret

000005e2 <Calc_GyroData>:

void Calc_GyroData(pAxis_Data GyroData, pAngle_3Dim Gyro_Angle)
{
     5e2:	0f 93       	push	r16
     5e4:	1f 93       	push	r17
     5e6:	cf 93       	push	r28
     5e8:	df 93       	push	r29
     5ea:	8c 01       	movw	r16, r24
     5ec:	eb 01       	movw	r28, r22
	Gyro_Angle->Roll = (double)GyroData->Xaxis / (double)GYRO_LSB_FS2000;
     5ee:	fc 01       	movw	r30, r24
     5f0:	60 81       	ld	r22, Z
     5f2:	71 81       	ldd	r23, Z+1	; 0x01
     5f4:	07 2e       	mov	r0, r23
     5f6:	00 0c       	add	r0, r0
     5f8:	88 0b       	sbc	r24, r24
     5fa:	99 0b       	sbc	r25, r25
     5fc:	0e 94 51 09 	call	0x12a2	; 0x12a2 <__floatsisf>
     600:	23 e3       	ldi	r18, 0x33	; 51
     602:	33 e3       	ldi	r19, 0x33	; 51
     604:	43 e8       	ldi	r20, 0x83	; 131
     606:	51 e4       	ldi	r21, 0x41	; 65
     608:	0e 94 ae 08 	call	0x115c	; 0x115c <__divsf3>
     60c:	68 83       	st	Y, r22
     60e:	79 83       	std	Y+1, r23	; 0x01
     610:	8a 83       	std	Y+2, r24	; 0x02
     612:	9b 83       	std	Y+3, r25	; 0x03
	Gyro_Angle->Pitch = (double)GyroData->Yaxis / (double)GYRO_LSB_FS2000;
     614:	f8 01       	movw	r30, r16
     616:	62 81       	ldd	r22, Z+2	; 0x02
     618:	73 81       	ldd	r23, Z+3	; 0x03
     61a:	07 2e       	mov	r0, r23
     61c:	00 0c       	add	r0, r0
     61e:	88 0b       	sbc	r24, r24
     620:	99 0b       	sbc	r25, r25
     622:	0e 94 51 09 	call	0x12a2	; 0x12a2 <__floatsisf>
     626:	23 e3       	ldi	r18, 0x33	; 51
     628:	33 e3       	ldi	r19, 0x33	; 51
     62a:	43 e8       	ldi	r20, 0x83	; 131
     62c:	51 e4       	ldi	r21, 0x41	; 65
     62e:	0e 94 ae 08 	call	0x115c	; 0x115c <__divsf3>
     632:	6c 83       	std	Y+4, r22	; 0x04
     634:	7d 83       	std	Y+5, r23	; 0x05
     636:	8e 83       	std	Y+6, r24	; 0x06
     638:	9f 83       	std	Y+7, r25	; 0x07
	Gyro_Angle->Yaw = (double)GyroData->Zaxis / (double)GYRO_LSB_FS2000;	
     63a:	f8 01       	movw	r30, r16
     63c:	64 81       	ldd	r22, Z+4	; 0x04
     63e:	75 81       	ldd	r23, Z+5	; 0x05
     640:	07 2e       	mov	r0, r23
     642:	00 0c       	add	r0, r0
     644:	88 0b       	sbc	r24, r24
     646:	99 0b       	sbc	r25, r25
     648:	0e 94 51 09 	call	0x12a2	; 0x12a2 <__floatsisf>
     64c:	23 e3       	ldi	r18, 0x33	; 51
     64e:	33 e3       	ldi	r19, 0x33	; 51
     650:	43 e8       	ldi	r20, 0x83	; 131
     652:	51 e4       	ldi	r21, 0x41	; 65
     654:	0e 94 ae 08 	call	0x115c	; 0x115c <__divsf3>
     658:	68 87       	std	Y+8, r22	; 0x08
     65a:	79 87       	std	Y+9, r23	; 0x09
     65c:	8a 87       	std	Y+10, r24	; 0x0a
     65e:	9b 87       	std	Y+11, r25	; 0x0b
}
     660:	df 91       	pop	r29
     662:	cf 91       	pop	r28
     664:	1f 91       	pop	r17
     666:	0f 91       	pop	r16
     668:	08 95       	ret

0000066a <Integral_GyroData>:

void Integral_GyroData(pAxis_Data GyroData, pAngle_3Dim Gyro_Angle)
{
     66a:	8f 92       	push	r8
     66c:	9f 92       	push	r9
     66e:	af 92       	push	r10
     670:	bf 92       	push	r11
     672:	cf 92       	push	r12
     674:	df 92       	push	r13
     676:	ef 92       	push	r14
     678:	ff 92       	push	r15
     67a:	0f 93       	push	r16
     67c:	1f 93       	push	r17
     67e:	cf 93       	push	r28
     680:	df 93       	push	r29
     682:	8c 01       	movw	r16, r24
     684:	eb 01       	movw	r28, r22
	Angle_Tmp.Roll = 0;
	Angle_Tmp.Pitch = 0;
	Angle_Tmp.Yaw = 0;
		
	Angle_Tmp.Roll = (double)GyroData->Xaxis / (double)GYRO_LSB_FS2000;
	Angle_Tmp.Pitch = (double)GyroData->Yaxis / (double)GYRO_LSB_FS2000;
     686:	fc 01       	movw	r30, r24
     688:	62 81       	ldd	r22, Z+2	; 0x02
     68a:	73 81       	ldd	r23, Z+3	; 0x03
     68c:	07 2e       	mov	r0, r23
     68e:	00 0c       	add	r0, r0
     690:	88 0b       	sbc	r24, r24
     692:	99 0b       	sbc	r25, r25
     694:	0e 94 51 09 	call	0x12a2	; 0x12a2 <__floatsisf>
     698:	23 e3       	ldi	r18, 0x33	; 51
     69a:	33 e3       	ldi	r19, 0x33	; 51
     69c:	43 e8       	ldi	r20, 0x83	; 131
     69e:	51 e4       	ldi	r21, 0x41	; 65
     6a0:	0e 94 ae 08 	call	0x115c	; 0x115c <__divsf3>
     6a4:	4b 01       	movw	r8, r22
     6a6:	5c 01       	movw	r10, r24
	Angle_Tmp.Yaw = (double)GyroData->Zaxis / (double)GYRO_LSB_FS2000;
     6a8:	f8 01       	movw	r30, r16
     6aa:	64 81       	ldd	r22, Z+4	; 0x04
     6ac:	75 81       	ldd	r23, Z+5	; 0x05
     6ae:	07 2e       	mov	r0, r23
     6b0:	00 0c       	add	r0, r0
     6b2:	88 0b       	sbc	r24, r24
     6b4:	99 0b       	sbc	r25, r25
     6b6:	0e 94 51 09 	call	0x12a2	; 0x12a2 <__floatsisf>
     6ba:	23 e3       	ldi	r18, 0x33	; 51
     6bc:	33 e3       	ldi	r19, 0x33	; 51
     6be:	43 e8       	ldi	r20, 0x83	; 131
     6c0:	51 e4       	ldi	r21, 0x41	; 65
     6c2:	0e 94 ae 08 	call	0x115c	; 0x115c <__divsf3>
     6c6:	6b 01       	movw	r12, r22
     6c8:	7c 01       	movw	r14, r24
	
	Gyro_Angle->Roll = Angle_Tmp.Roll*(double)dt + Gyro_Angle->Roll;
     6ca:	f8 01       	movw	r30, r16
     6cc:	60 81       	ld	r22, Z
     6ce:	71 81       	ldd	r23, Z+1	; 0x01
     6d0:	07 2e       	mov	r0, r23
     6d2:	00 0c       	add	r0, r0
     6d4:	88 0b       	sbc	r24, r24
     6d6:	99 0b       	sbc	r25, r25
     6d8:	0e 94 51 09 	call	0x12a2	; 0x12a2 <__floatsisf>
     6dc:	23 e3       	ldi	r18, 0x33	; 51
     6de:	33 e3       	ldi	r19, 0x33	; 51
     6e0:	43 e8       	ldi	r20, 0x83	; 131
     6e2:	51 e4       	ldi	r21, 0x41	; 65
     6e4:	0e 94 ae 08 	call	0x115c	; 0x115c <__divsf3>
     6e8:	2f e6       	ldi	r18, 0x6F	; 111
     6ea:	32 e1       	ldi	r19, 0x12	; 18
     6ec:	43 e8       	ldi	r20, 0x83	; 131
     6ee:	5a e3       	ldi	r21, 0x3A	; 58
     6f0:	0e 94 35 0a 	call	0x146a	; 0x146a <__mulsf3>
     6f4:	9b 01       	movw	r18, r22
     6f6:	ac 01       	movw	r20, r24
     6f8:	68 81       	ld	r22, Y
     6fa:	79 81       	ldd	r23, Y+1	; 0x01
     6fc:	8a 81       	ldd	r24, Y+2	; 0x02
     6fe:	9b 81       	ldd	r25, Y+3	; 0x03
     700:	0e 94 cb 07 	call	0xf96	; 0xf96 <__addsf3>
     704:	68 83       	st	Y, r22
     706:	79 83       	std	Y+1, r23	; 0x01
     708:	8a 83       	std	Y+2, r24	; 0x02
     70a:	9b 83       	std	Y+3, r25	; 0x03
	Gyro_Angle->Pitch = Angle_Tmp.Pitch*(double)dt + Gyro_Angle->Pitch;
     70c:	2f e6       	ldi	r18, 0x6F	; 111
     70e:	32 e1       	ldi	r19, 0x12	; 18
     710:	43 e8       	ldi	r20, 0x83	; 131
     712:	5a e3       	ldi	r21, 0x3A	; 58
     714:	c5 01       	movw	r24, r10
     716:	b4 01       	movw	r22, r8
     718:	0e 94 35 0a 	call	0x146a	; 0x146a <__mulsf3>
     71c:	9b 01       	movw	r18, r22
     71e:	ac 01       	movw	r20, r24
     720:	6c 81       	ldd	r22, Y+4	; 0x04
     722:	7d 81       	ldd	r23, Y+5	; 0x05
     724:	8e 81       	ldd	r24, Y+6	; 0x06
     726:	9f 81       	ldd	r25, Y+7	; 0x07
     728:	0e 94 cb 07 	call	0xf96	; 0xf96 <__addsf3>
     72c:	6c 83       	std	Y+4, r22	; 0x04
     72e:	7d 83       	std	Y+5, r23	; 0x05
     730:	8e 83       	std	Y+6, r24	; 0x06
     732:	9f 83       	std	Y+7, r25	; 0x07
	Gyro_Angle->Yaw = Angle_Tmp.Yaw*(double)dt + Gyro_Angle->Yaw;
     734:	2f e6       	ldi	r18, 0x6F	; 111
     736:	32 e1       	ldi	r19, 0x12	; 18
     738:	43 e8       	ldi	r20, 0x83	; 131
     73a:	5a e3       	ldi	r21, 0x3A	; 58
     73c:	c7 01       	movw	r24, r14
     73e:	b6 01       	movw	r22, r12
     740:	0e 94 35 0a 	call	0x146a	; 0x146a <__mulsf3>
     744:	9b 01       	movw	r18, r22
     746:	ac 01       	movw	r20, r24
     748:	68 85       	ldd	r22, Y+8	; 0x08
     74a:	79 85       	ldd	r23, Y+9	; 0x09
     74c:	8a 85       	ldd	r24, Y+10	; 0x0a
     74e:	9b 85       	ldd	r25, Y+11	; 0x0b
     750:	0e 94 cb 07 	call	0xf96	; 0xf96 <__addsf3>
     754:	68 87       	std	Y+8, r22	; 0x08
     756:	79 87       	std	Y+9, r23	; 0x09
     758:	8a 87       	std	Y+10, r24	; 0x0a
     75a:	9b 87       	std	Y+11, r25	; 0x0b
	
	#ifdef ForTestMPU6050
	printf("Gyro Roll = %.2f\tGyro Pitch = %.2f\tGyro Yaw = %.2f\n", Gyro_Angle->Roll,Gyro_Angle->Pitch,Gyro_Angle->Yaw);
	#endif
}
     75c:	df 91       	pop	r29
     75e:	cf 91       	pop	r28
     760:	1f 91       	pop	r17
     762:	0f 91       	pop	r16
     764:	ff 90       	pop	r15
     766:	ef 90       	pop	r14
     768:	df 90       	pop	r13
     76a:	cf 90       	pop	r12
     76c:	bf 90       	pop	r11
     76e:	af 90       	pop	r10
     770:	9f 90       	pop	r9
     772:	8f 90       	pop	r8
     774:	08 95       	ret

00000776 <RunMPU6050>:

void RunMPU6050(void)
{
     776:	cf 93       	push	r28
     778:	df 93       	push	r29
     77a:	cd b7       	in	r28, 0x3d	; 61
     77c:	de b7       	in	r29, 0x3e	; 62
     77e:	2c 97       	sbiw	r28, 0x0c	; 12
     780:	0f b6       	in	r0, 0x3f	; 63
     782:	f8 94       	cli
     784:	de bf       	out	0x3e, r29	; 62
     786:	0f be       	out	0x3f, r0	; 63
     788:	cd bf       	out	0x3d, r28	; 61
	Axis_Data_Struct Accel_Data;	
	Axis_Data_Struct Gyro_Data;
	
	get_MPU6050_RawData(&Accel_Data, &Gyro_Data);
     78a:	be 01       	movw	r22, r28
     78c:	69 5f       	subi	r22, 0xF9	; 249
     78e:	7f 4f       	sbci	r23, 0xFF	; 255
     790:	ce 01       	movw	r24, r28
     792:	01 96       	adiw	r24, 0x01	; 1
     794:	0e 94 21 02 	call	0x442	; 0x442 <get_MPU6050_RawData>
	
	Calc_Accel_RollPitch(&Accel_Data, &Accel_Angle);
     798:	62 e1       	ldi	r22, 0x12	; 18
     79a:	71 e0       	ldi	r23, 0x01	; 1
     79c:	ce 01       	movw	r24, r28
     79e:	01 96       	adiw	r24, 0x01	; 1
     7a0:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <Calc_Accel_RollPitch>
	Integral_GyroData(&Gyro_Data, &Gyro_Angle);
     7a4:	66 e0       	ldi	r22, 0x06	; 6
     7a6:	71 e0       	ldi	r23, 0x01	; 1
     7a8:	ce 01       	movw	r24, r28
     7aa:	07 96       	adiw	r24, 0x07	; 7
     7ac:	0e 94 35 03 	call	0x66a	; 0x66a <Integral_GyroData>
	
	#ifdef Filter_EN
	Calc_GyroData(&Gyro_Data, &Gyro_Angle);
     7b0:	66 e0       	ldi	r22, 0x06	; 6
     7b2:	71 e0       	ldi	r23, 0x01	; 1
     7b4:	ce 01       	movw	r24, r28
     7b6:	07 96       	adiw	r24, 0x07	; 7
     7b8:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <Calc_GyroData>
	#else
	Integral_GyroData(&Gyro_Data, &Gyro_Angle);
	#endif
}
     7bc:	2c 96       	adiw	r28, 0x0c	; 12
     7be:	0f b6       	in	r0, 0x3f	; 63
     7c0:	f8 94       	cli
     7c2:	de bf       	out	0x3e, r29	; 62
     7c4:	0f be       	out	0x3f, r0	; 63
     7c6:	cd bf       	out	0x3d, r28	; 61
     7c8:	df 91       	pop	r29
     7ca:	cf 91       	pop	r28
     7cc:	08 95       	ret

000007ce <getAcceleroData>:

pAngle_3Dim getAcceleroData(void)
{
	pAngle_3Dim pTmp = &Accel_Angle;
	return pTmp;
}
     7ce:	82 e1       	ldi	r24, 0x12	; 18
     7d0:	91 e0       	ldi	r25, 0x01	; 1
     7d2:	08 95       	ret

000007d4 <getGyroData>:

pAngle_3Dim getGyroData(void)
{
	pAngle_3Dim pTmp = &Gyro_Angle;
	return pTmp;
     7d4:	86 e0       	ldi	r24, 0x06	; 6
     7d6:	91 e0       	ldi	r25, 0x01	; 1
     7d8:	08 95       	ret

000007da <main>:
#include "TimerCounter.h"
#include "MotorCtrl.h"

int main(void)
{
	cbi(SREG, 7);
     7da:	8f b7       	in	r24, 0x3f	; 63
     7dc:	8f 77       	andi	r24, 0x7F	; 127
     7de:	8f bf       	out	0x3f, r24	; 63
    /* Replace with your application code */
	FILE *fstdio = fdevopen(usartTxChar, NULL);
     7e0:	60 e0       	ldi	r22, 0x00	; 0
     7e2:	70 e0       	ldi	r23, 0x00	; 0
     7e4:	80 ec       	ldi	r24, 0xC0	; 192
     7e6:	97 e0       	ldi	r25, 0x07	; 7
     7e8:	0e 94 48 0f 	call	0x1e90	; 0x1e90 <fdevopen>
	InitPortSetting();
     7ec:	0e 94 5f 06 	call	0xcbe	; 0xcbe <InitPortSetting>
	InitTimerCounter0();
     7f0:	0e 94 66 06 	call	0xccc	; 0xccc <InitTimerCounter0>
	InitTimerCounter1();
     7f4:	0e 94 89 06 	call	0xd12	; 0xd12 <InitTimerCounter1>
	InitTimerCounter2();
     7f8:	0e 94 bc 06 	call	0xd78	; 0xd78 <InitTimerCounter2>
	UART_INIT();
     7fc:	0e 94 a8 07 	call	0xf50	; 0xf50 <UART_INIT>
	i2c_init();	
     800:	0e 94 47 07 	call	0xe8e	; 0xe8e <i2c_init>
	InitMPU6050();
     804:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <InitMPU6050>
	Init_Filter();
     808:	0e 94 7d 05 	call	0xafa	; 0xafa <Init_Filter>
     80c:	2f ef       	ldi	r18, 0xFF	; 255
     80e:	80 e7       	ldi	r24, 0x70	; 112
     810:	92 e0       	ldi	r25, 0x02	; 2
     812:	21 50       	subi	r18, 0x01	; 1
     814:	80 40       	sbci	r24, 0x00	; 0
     816:	90 40       	sbci	r25, 0x00	; 0
     818:	e1 f7       	brne	.-8      	; 0x812 <main+0x38>
     81a:	00 c0       	rjmp	.+0      	; 0x81c <main+0x42>
     81c:	00 00       	nop
	_delay_ms(50);
	sbi(SREG, 7);
     81e:	8f b7       	in	r24, 0x3f	; 63
     820:	80 68       	ori	r24, 0x80	; 128
     822:	8f bf       	out	0x3f, r24	; 63
	
	MotorStop();
     824:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <MotorStop>
     828:	ff cf       	rjmp	.-2      	; 0x828 <main+0x4e>

0000082a <RunPID_MotorCtrl>:
	
	return Pterm+(Ki*Iterm);//+Kd*Dterm;
}

void RunPID_MotorCtrl(Angle_3Dim* AngleData)
{
     82a:	8f 92       	push	r8
     82c:	9f 92       	push	r9
     82e:	af 92       	push	r10
     830:	bf 92       	push	r11
     832:	cf 92       	push	r12
     834:	df 92       	push	r13
     836:	ef 92       	push	r14
     838:	ff 92       	push	r15
	//2021.02.04 if( >= 0) => if( >= 10)
	if(AngleData->Pitch >= (double)ref)
     83a:	fc 01       	movw	r30, r24
     83c:	c4 80       	ldd	r12, Z+4	; 0x04
     83e:	d5 80       	ldd	r13, Z+5	; 0x05
     840:	e6 80       	ldd	r14, Z+6	; 0x06
     842:	f7 80       	ldd	r15, Z+7	; 0x07
     844:	20 e0       	ldi	r18, 0x00	; 0
     846:	30 e0       	ldi	r19, 0x00	; 0
     848:	40 ea       	ldi	r20, 0xA0	; 160
     84a:	50 e4       	ldi	r21, 0x40	; 64
     84c:	c7 01       	movw	r24, r14
     84e:	b6 01       	movw	r22, r12
     850:	0e 94 28 0a 	call	0x1450	; 0x1450 <__gesf2>
     854:	88 23       	and	r24, r24
     856:	b4 f0       	brlt	.+44     	; 0x884 <RunPID_MotorCtrl+0x5a>
	{
		cur_err = -1*((double)ref - AngleData->Pitch);
     858:	a7 01       	movw	r20, r14
     85a:	96 01       	movw	r18, r12
     85c:	60 e0       	ldi	r22, 0x00	; 0
     85e:	70 e0       	ldi	r23, 0x00	; 0
     860:	80 ea       	ldi	r24, 0xA0	; 160
     862:	90 e4       	ldi	r25, 0x40	; 64
     864:	0e 94 ca 07 	call	0xf94	; 0xf94 <__subsf3>
     868:	dc 01       	movw	r26, r24
     86a:	cb 01       	movw	r24, r22
     86c:	b0 58       	subi	r27, 0x80	; 128
     86e:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <cur_err>
     872:	90 93 29 01 	sts	0x0129, r25	; 0x800129 <cur_err+0x1>
     876:	a0 93 2a 01 	sts	0x012A, r26	; 0x80012a <cur_err+0x2>
     87a:	b0 93 2b 01 	sts	0x012B, r27	; 0x80012b <cur_err+0x3>
		dir = (uint8_t)CCW;
     87e:	10 92 1e 01 	sts	0x011E, r1	; 0x80011e <dir>
     882:	4b c0       	rjmp	.+150    	; 0x91a <__stack+0x1b>
	}
	else
	{
		if(AngleData->Pitch >= 0) cur_err = (double)ref - AngleData->Pitch;
     884:	20 e0       	ldi	r18, 0x00	; 0
     886:	30 e0       	ldi	r19, 0x00	; 0
     888:	a9 01       	movw	r20, r18
     88a:	c7 01       	movw	r24, r14
     88c:	b6 01       	movw	r22, r12
     88e:	0e 94 28 0a 	call	0x1450	; 0x1450 <__gesf2>
     892:	88 23       	and	r24, r24
     894:	8c f0       	brlt	.+34     	; 0x8b8 <RunPID_MotorCtrl+0x8e>
     896:	a7 01       	movw	r20, r14
     898:	96 01       	movw	r18, r12
     89a:	60 e0       	ldi	r22, 0x00	; 0
     89c:	70 e0       	ldi	r23, 0x00	; 0
     89e:	80 ea       	ldi	r24, 0xA0	; 160
     8a0:	90 e4       	ldi	r25, 0x40	; 64
     8a2:	0e 94 ca 07 	call	0xf94	; 0xf94 <__subsf3>
     8a6:	60 93 28 01 	sts	0x0128, r22	; 0x800128 <cur_err>
     8aa:	70 93 29 01 	sts	0x0129, r23	; 0x800129 <cur_err+0x1>
     8ae:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <cur_err+0x2>
     8b2:	90 93 2b 01 	sts	0x012B, r25	; 0x80012b <cur_err+0x3>
     8b6:	2e c0       	rjmp	.+92     	; 0x914 <__stack+0x15>
		else 
		{
			if((-1*AngleData->Pitch) > ref) cur_err = -1*((double)ref - (-1*AngleData->Pitch));
     8b8:	20 e0       	ldi	r18, 0x00	; 0
     8ba:	30 e0       	ldi	r19, 0x00	; 0
     8bc:	40 ea       	ldi	r20, 0xA0	; 160
     8be:	50 ec       	ldi	r21, 0xC0	; 192
     8c0:	c7 01       	movw	r24, r14
     8c2:	b6 01       	movw	r22, r12
     8c4:	0e 94 a9 08 	call	0x1152	; 0x1152 <__cmpsf2>
     8c8:	88 23       	and	r24, r24
     8ca:	a4 f4       	brge	.+40     	; 0x8f4 <RunPID_MotorCtrl+0xca>
     8cc:	20 e0       	ldi	r18, 0x00	; 0
     8ce:	30 e0       	ldi	r19, 0x00	; 0
     8d0:	40 ea       	ldi	r20, 0xA0	; 160
     8d2:	50 e4       	ldi	r21, 0x40	; 64
     8d4:	c7 01       	movw	r24, r14
     8d6:	b6 01       	movw	r22, r12
     8d8:	0e 94 cb 07 	call	0xf96	; 0xf96 <__addsf3>
     8dc:	dc 01       	movw	r26, r24
     8de:	cb 01       	movw	r24, r22
     8e0:	b0 58       	subi	r27, 0x80	; 128
     8e2:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <cur_err>
     8e6:	90 93 29 01 	sts	0x0129, r25	; 0x800129 <cur_err+0x1>
     8ea:	a0 93 2a 01 	sts	0x012A, r26	; 0x80012a <cur_err+0x2>
     8ee:	b0 93 2b 01 	sts	0x012B, r27	; 0x80012b <cur_err+0x3>
     8f2:	10 c0       	rjmp	.+32     	; 0x914 <__stack+0x15>
			else cur_err = ((double)ref - (-1*AngleData->Pitch));
     8f4:	20 e0       	ldi	r18, 0x00	; 0
     8f6:	30 e0       	ldi	r19, 0x00	; 0
     8f8:	40 ea       	ldi	r20, 0xA0	; 160
     8fa:	50 e4       	ldi	r21, 0x40	; 64
     8fc:	c7 01       	movw	r24, r14
     8fe:	b6 01       	movw	r22, r12
     900:	0e 94 cb 07 	call	0xf96	; 0xf96 <__addsf3>
     904:	60 93 28 01 	sts	0x0128, r22	; 0x800128 <cur_err>
     908:	70 93 29 01 	sts	0x0129, r23	; 0x800129 <cur_err+0x1>
     90c:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <cur_err+0x2>
     910:	90 93 2b 01 	sts	0x012B, r25	; 0x80012b <cur_err+0x3>
		}
		
		dir = (uint8_t)CW;
     914:	81 e0       	ldi	r24, 0x01	; 1
     916:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <dir>
	}
	
	//2021.02.04 피치각도 오차범위 설정 +-5%
	if(cur_err == 0 )
     91a:	60 91 28 01 	lds	r22, 0x0128	; 0x800128 <cur_err>
     91e:	70 91 29 01 	lds	r23, 0x0129	; 0x800129 <cur_err+0x1>
     922:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <cur_err+0x2>
     926:	90 91 2b 01 	lds	r25, 0x012B	; 0x80012b <cur_err+0x3>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	a9 01       	movw	r20, r18
     930:	0e 94 a9 08 	call	0x1152	; 0x1152 <__cmpsf2>
     934:	81 11       	cpse	r24, r1
     936:	09 c0       	rjmp	.+18     	; 0x94a <__stack+0x4b>
	{
		u = 0;
     938:	10 92 20 01 	sts	0x0120, r1	; 0x800120 <u>
     93c:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <u+0x1>
     940:	10 92 22 01 	sts	0x0122, r1	; 0x800122 <u+0x2>
     944:	10 92 23 01 	sts	0x0123, r1	; 0x800123 <u+0x3>
     948:	4c c0       	rjmp	.+152    	; 0x9e2 <__stack+0xe3>
{
	double Pterm;
	double Iterm;
	double Dterm;
	
	Pterm = Kp * *cur_err;
     94a:	c0 90 28 01 	lds	r12, 0x0128	; 0x800128 <cur_err>
     94e:	d0 90 29 01 	lds	r13, 0x0129	; 0x800129 <cur_err+0x1>
     952:	e0 90 2a 01 	lds	r14, 0x012A	; 0x80012a <cur_err+0x2>
     956:	f0 90 2b 01 	lds	r15, 0x012B	; 0x80012b <cur_err+0x3>
	Iterm = (*pre_err + *cur_err)*dt;
     95a:	60 91 24 01 	lds	r22, 0x0124	; 0x800124 <pre_err>
     95e:	70 91 25 01 	lds	r23, 0x0125	; 0x800125 <pre_err+0x1>
     962:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <pre_err+0x2>
     966:	90 91 27 01 	lds	r25, 0x0127	; 0x800127 <pre_err+0x3>
     96a:	20 91 28 01 	lds	r18, 0x0128	; 0x800128 <cur_err>
     96e:	30 91 29 01 	lds	r19, 0x0129	; 0x800129 <cur_err+0x1>
     972:	40 91 2a 01 	lds	r20, 0x012A	; 0x80012a <cur_err+0x2>
     976:	50 91 2b 01 	lds	r21, 0x012B	; 0x80012b <cur_err+0x3>
	Dterm = (*pre_err - *cur_err)/dt;
     97a:	80 90 24 01 	lds	r8, 0x0124	; 0x800124 <pre_err>
     97e:	90 90 25 01 	lds	r9, 0x0125	; 0x800125 <pre_err+0x1>
     982:	a0 90 26 01 	lds	r10, 0x0126	; 0x800126 <pre_err+0x2>
     986:	b0 90 27 01 	lds	r11, 0x0127	; 0x800127 <pre_err+0x3>
     98a:	80 90 28 01 	lds	r8, 0x0128	; 0x800128 <cur_err>
     98e:	90 90 29 01 	lds	r9, 0x0129	; 0x800129 <cur_err+0x1>
     992:	a0 90 2a 01 	lds	r10, 0x012A	; 0x80012a <cur_err+0x2>
     996:	b0 90 2b 01 	lds	r11, 0x012B	; 0x80012b <cur_err+0x3>
	
	return Pterm+(Ki*Iterm);//+Kd*Dterm;
     99a:	0e 94 cb 07 	call	0xf96	; 0xf96 <__addsf3>
     99e:	2f e6       	ldi	r18, 0x6F	; 111
     9a0:	32 e1       	ldi	r19, 0x12	; 18
     9a2:	43 e8       	ldi	r20, 0x83	; 131
     9a4:	5a e3       	ldi	r21, 0x3A	; 58
     9a6:	0e 94 35 0a 	call	0x146a	; 0x146a <__mulsf3>
     9aa:	2f e6       	ldi	r18, 0x6F	; 111
     9ac:	32 e1       	ldi	r19, 0x12	; 18
     9ae:	43 e0       	ldi	r20, 0x03	; 3
     9b0:	5b e3       	ldi	r21, 0x3B	; 59
     9b2:	0e 94 35 0a 	call	0x146a	; 0x146a <__mulsf3>
     9b6:	4b 01       	movw	r8, r22
     9b8:	5c 01       	movw	r10, r24
     9ba:	a7 01       	movw	r20, r14
     9bc:	96 01       	movw	r18, r12
     9be:	c7 01       	movw	r24, r14
     9c0:	b6 01       	movw	r22, r12
     9c2:	0e 94 cb 07 	call	0xf96	; 0xf96 <__addsf3>
     9c6:	9b 01       	movw	r18, r22
     9c8:	ac 01       	movw	r20, r24
     9ca:	c5 01       	movw	r24, r10
     9cc:	b4 01       	movw	r22, r8
     9ce:	0e 94 cb 07 	call	0xf96	; 0xf96 <__addsf3>
	{
		u = 0;
	}
	else
	{
		u = Cal_PID(&cur_err, &pre_err);
     9d2:	60 93 20 01 	sts	0x0120, r22	; 0x800120 <u>
     9d6:	70 93 21 01 	sts	0x0121, r23	; 0x800121 <u+0x1>
     9da:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <u+0x2>
     9de:	90 93 23 01 	sts	0x0123, r25	; 0x800123 <u+0x3>
	}
	
	//PWM resolution 100
	//u = u/100;
	
	if(u > 255) u = 255;
     9e2:	60 91 20 01 	lds	r22, 0x0120	; 0x800120 <u>
     9e6:	70 91 21 01 	lds	r23, 0x0121	; 0x800121 <u+0x1>
     9ea:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <u+0x2>
     9ee:	90 91 23 01 	lds	r25, 0x0123	; 0x800123 <u+0x3>
     9f2:	20 e0       	ldi	r18, 0x00	; 0
     9f4:	30 e0       	ldi	r19, 0x00	; 0
     9f6:	4f e7       	ldi	r20, 0x7F	; 127
     9f8:	53 e4       	ldi	r21, 0x43	; 67
     9fa:	0e 94 28 0a 	call	0x1450	; 0x1450 <__gesf2>
     9fe:	18 16       	cp	r1, r24
     a00:	6c f4       	brge	.+26     	; 0xa1c <__stack+0x11d>
     a02:	80 e0       	ldi	r24, 0x00	; 0
     a04:	90 e0       	ldi	r25, 0x00	; 0
     a06:	af e7       	ldi	r26, 0x7F	; 127
     a08:	b3 e4       	ldi	r27, 0x43	; 67
     a0a:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <u>
     a0e:	90 93 21 01 	sts	0x0121, r25	; 0x800121 <u+0x1>
     a12:	a0 93 22 01 	sts	0x0122, r26	; 0x800122 <u+0x2>
     a16:	b0 93 23 01 	sts	0x0123, r27	; 0x800123 <u+0x3>
     a1a:	10 c0       	rjmp	.+32     	; 0xa3c <__stack+0x13d>
	else u = u;
     a1c:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <u>
     a20:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <u+0x1>
     a24:	a0 91 22 01 	lds	r26, 0x0122	; 0x800122 <u+0x2>
     a28:	b0 91 23 01 	lds	r27, 0x0123	; 0x800123 <u+0x3>
     a2c:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <u>
     a30:	90 93 21 01 	sts	0x0121, r25	; 0x800121 <u+0x1>
     a34:	a0 93 22 01 	sts	0x0122, r26	; 0x800122 <u+0x2>
     a38:	b0 93 23 01 	sts	0x0123, r27	; 0x800123 <u+0x3>
	
	if(u < 0) u = 0;
     a3c:	60 91 20 01 	lds	r22, 0x0120	; 0x800120 <u>
     a40:	70 91 21 01 	lds	r23, 0x0121	; 0x800121 <u+0x1>
     a44:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <u+0x2>
     a48:	90 91 23 01 	lds	r25, 0x0123	; 0x800123 <u+0x3>
     a4c:	20 e0       	ldi	r18, 0x00	; 0
     a4e:	30 e0       	ldi	r19, 0x00	; 0
     a50:	a9 01       	movw	r20, r18
     a52:	0e 94 a9 08 	call	0x1152	; 0x1152 <__cmpsf2>
     a56:	88 23       	and	r24, r24
     a58:	4c f4       	brge	.+18     	; 0xa6c <__stack+0x16d>
     a5a:	10 92 20 01 	sts	0x0120, r1	; 0x800120 <u>
     a5e:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <u+0x1>
     a62:	10 92 22 01 	sts	0x0122, r1	; 0x800122 <u+0x2>
     a66:	10 92 23 01 	sts	0x0123, r1	; 0x800123 <u+0x3>
     a6a:	10 c0       	rjmp	.+32     	; 0xa8c <__stack+0x18d>
	else u = u;
     a6c:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <u>
     a70:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <u+0x1>
     a74:	a0 91 22 01 	lds	r26, 0x0122	; 0x800122 <u+0x2>
     a78:	b0 91 23 01 	lds	r27, 0x0123	; 0x800123 <u+0x3>
     a7c:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <u>
     a80:	90 93 21 01 	sts	0x0121, r25	; 0x800121 <u+0x1>
     a84:	a0 93 22 01 	sts	0x0122, r26	; 0x800122 <u+0x2>
     a88:	b0 93 23 01 	sts	0x0123, r27	; 0x800123 <u+0x3>
	
	
	duty = (uint8_t)((u/255)*100);
     a8c:	60 91 20 01 	lds	r22, 0x0120	; 0x800120 <u>
     a90:	70 91 21 01 	lds	r23, 0x0121	; 0x800121 <u+0x1>
     a94:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <u+0x2>
     a98:	90 91 23 01 	lds	r25, 0x0123	; 0x800123 <u+0x3>
     a9c:	20 e0       	ldi	r18, 0x00	; 0
     a9e:	30 e0       	ldi	r19, 0x00	; 0
     aa0:	4f e7       	ldi	r20, 0x7F	; 127
     aa2:	53 e4       	ldi	r21, 0x43	; 67
     aa4:	0e 94 ae 08 	call	0x115c	; 0x115c <__divsf3>
     aa8:	20 e0       	ldi	r18, 0x00	; 0
     aaa:	30 e0       	ldi	r19, 0x00	; 0
     aac:	48 ec       	ldi	r20, 0xC8	; 200
     aae:	52 e4       	ldi	r21, 0x42	; 66
     ab0:	0e 94 35 0a 	call	0x146a	; 0x146a <__mulsf3>
     ab4:	0e 94 20 09 	call	0x1240	; 0x1240 <__fixunssfsi>
     ab8:	60 93 1f 01 	sts	0x011F, r22	; 0x80011f <duty>
	
	#ifdef ForPIDTest
	printf("AngleData = %.2f\tRef = %.2f\tErr = %.2f\tCtrlVal = %.2f\tDuty = %d\n", AngleData->Pitch, (double)ref, cur_err, u, duty);
	#endif

	RunMotor(&duty, &dir);
     abc:	6e e1       	ldi	r22, 0x1E	; 30
     abe:	71 e0       	ldi	r23, 0x01	; 1
     ac0:	8f e1       	ldi	r24, 0x1F	; 31
     ac2:	91 e0       	ldi	r25, 0x01	; 1
     ac4:	0e 94 0a 01 	call	0x214	; 0x214 <RunMotor>
	
	pre_err = cur_err;
     ac8:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <cur_err>
     acc:	90 91 29 01 	lds	r25, 0x0129	; 0x800129 <cur_err+0x1>
     ad0:	a0 91 2a 01 	lds	r26, 0x012A	; 0x80012a <cur_err+0x2>
     ad4:	b0 91 2b 01 	lds	r27, 0x012B	; 0x80012b <cur_err+0x3>
     ad8:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <pre_err>
     adc:	90 93 25 01 	sts	0x0125, r25	; 0x800125 <pre_err+0x1>
     ae0:	a0 93 26 01 	sts	0x0126, r26	; 0x800126 <pre_err+0x2>
     ae4:	b0 93 27 01 	sts	0x0127, r27	; 0x800127 <pre_err+0x3>
     ae8:	ff 90       	pop	r15
     aea:	ef 90       	pop	r14
     aec:	df 90       	pop	r13
     aee:	cf 90       	pop	r12
     af0:	bf 90       	pop	r11
     af2:	af 90       	pop	r10
     af4:	9f 90       	pop	r9
     af6:	8f 90       	pop	r8
     af8:	08 95       	ret

00000afa <Init_Filter>:
static Angle_3Dim Filter_Angle;
static Angle_3Dim preFilter_Angle;

void Init_Filter(void)
{
	Filter_Angle.Roll = 0.0F;
     afa:	e8 e3       	ldi	r30, 0x38	; 56
     afc:	f1 e0       	ldi	r31, 0x01	; 1
     afe:	10 82       	st	Z, r1
     b00:	11 82       	std	Z+1, r1	; 0x01
     b02:	12 82       	std	Z+2, r1	; 0x02
     b04:	13 82       	std	Z+3, r1	; 0x03
	Filter_Angle.Pitch = 0.0F;
     b06:	14 82       	std	Z+4, r1	; 0x04
     b08:	15 82       	std	Z+5, r1	; 0x05
     b0a:	16 82       	std	Z+6, r1	; 0x06
     b0c:	17 82       	std	Z+7, r1	; 0x07
	Filter_Angle.Yaw = 0.0F;
     b0e:	10 86       	std	Z+8, r1	; 0x08
     b10:	11 86       	std	Z+9, r1	; 0x09
     b12:	12 86       	std	Z+10, r1	; 0x0a
     b14:	13 86       	std	Z+11, r1	; 0x0b
	
	preFilter_Angle.Roll = 0.0F;
     b16:	ec e2       	ldi	r30, 0x2C	; 44
     b18:	f1 e0       	ldi	r31, 0x01	; 1
     b1a:	10 82       	st	Z, r1
     b1c:	11 82       	std	Z+1, r1	; 0x01
     b1e:	12 82       	std	Z+2, r1	; 0x02
     b20:	13 82       	std	Z+3, r1	; 0x03
	preFilter_Angle.Pitch = 0.0F;
     b22:	14 82       	std	Z+4, r1	; 0x04
     b24:	15 82       	std	Z+5, r1	; 0x05
     b26:	16 82       	std	Z+6, r1	; 0x06
     b28:	17 82       	std	Z+7, r1	; 0x07
	preFilter_Angle.Yaw = 0.0F;
     b2a:	10 86       	std	Z+8, r1	; 0x08
     b2c:	11 86       	std	Z+9, r1	; 0x09
     b2e:	12 86       	std	Z+10, r1	; 0x0a
     b30:	13 86       	std	Z+11, r1	; 0x0b
     b32:	08 95       	ret

00000b34 <CompleFilter>:
//Filter Cut-off Frequency 100Hz
//Sampling Period 8ms
//2021.01.21
//Sampling Period 1ms
Angle_3Dim CompleFilter(pAngle_3Dim AccelAngle, pAngle_3Dim GyroAngle)
{	
     b34:	4f 92       	push	r4
     b36:	5f 92       	push	r5
     b38:	6f 92       	push	r6
     b3a:	7f 92       	push	r7
     b3c:	af 92       	push	r10
     b3e:	bf 92       	push	r11
     b40:	cf 92       	push	r12
     b42:	df 92       	push	r13
     b44:	ef 92       	push	r14
     b46:	ff 92       	push	r15
     b48:	0f 93       	push	r16
     b4a:	1f 93       	push	r17
     b4c:	cf 93       	push	r28
     b4e:	df 93       	push	r29
     b50:	5c 01       	movw	r10, r24
     b52:	8b 01       	movw	r16, r22
     b54:	6a 01       	movw	r12, r20
	Filter_Angle.Roll = (1.0F-(double)alpha)*AccelAngle->Roll + (double)alpha*(preFilter_Angle.Roll + (double)dt * GyroAngle->Roll);
     b56:	c8 e3       	ldi	r28, 0x38	; 56
     b58:	d1 e0       	ldi	r29, 0x01	; 1
     b5a:	2f e6       	ldi	r18, 0x6F	; 111
     b5c:	32 e1       	ldi	r19, 0x12	; 18
     b5e:	43 e8       	ldi	r20, 0x83	; 131
     b60:	5a e3       	ldi	r21, 0x3A	; 58
     b62:	f6 01       	movw	r30, r12
     b64:	60 81       	ld	r22, Z
     b66:	71 81       	ldd	r23, Z+1	; 0x01
     b68:	82 81       	ldd	r24, Z+2	; 0x02
     b6a:	93 81       	ldd	r25, Z+3	; 0x03
     b6c:	0e 94 35 0a 	call	0x146a	; 0x146a <__mulsf3>
     b70:	0f 2e       	mov	r0, r31
     b72:	fc e2       	ldi	r31, 0x2C	; 44
     b74:	ef 2e       	mov	r14, r31
     b76:	f1 e0       	ldi	r31, 0x01	; 1
     b78:	ff 2e       	mov	r15, r31
     b7a:	f0 2d       	mov	r31, r0
     b7c:	f7 01       	movw	r30, r14
     b7e:	20 81       	ld	r18, Z
     b80:	31 81       	ldd	r19, Z+1	; 0x01
     b82:	42 81       	ldd	r20, Z+2	; 0x02
     b84:	53 81       	ldd	r21, Z+3	; 0x03
     b86:	0e 94 cb 07 	call	0xf96	; 0xf96 <__addsf3>
     b8a:	26 ea       	ldi	r18, 0xA6	; 166
     b8c:	37 e3       	ldi	r19, 0x37	; 55
     b8e:	4d e1       	ldi	r20, 0x1D	; 29
     b90:	5f e3       	ldi	r21, 0x3F	; 63
     b92:	0e 94 35 0a 	call	0x146a	; 0x146a <__mulsf3>
     b96:	2b 01       	movw	r4, r22
     b98:	3c 01       	movw	r6, r24
     b9a:	24 eb       	ldi	r18, 0xB4	; 180
     b9c:	30 e9       	ldi	r19, 0x90	; 144
     b9e:	45 ec       	ldi	r20, 0xC5	; 197
     ba0:	5e e3       	ldi	r21, 0x3E	; 62
     ba2:	f8 01       	movw	r30, r16
     ba4:	60 81       	ld	r22, Z
     ba6:	71 81       	ldd	r23, Z+1	; 0x01
     ba8:	82 81       	ldd	r24, Z+2	; 0x02
     baa:	93 81       	ldd	r25, Z+3	; 0x03
     bac:	0e 94 35 0a 	call	0x146a	; 0x146a <__mulsf3>
     bb0:	9b 01       	movw	r18, r22
     bb2:	ac 01       	movw	r20, r24
     bb4:	c3 01       	movw	r24, r6
     bb6:	b2 01       	movw	r22, r4
     bb8:	0e 94 cb 07 	call	0xf96	; 0xf96 <__addsf3>
     bbc:	68 83       	st	Y, r22
     bbe:	79 83       	std	Y+1, r23	; 0x01
     bc0:	8a 83       	std	Y+2, r24	; 0x02
     bc2:	9b 83       	std	Y+3, r25	; 0x03
	Filter_Angle.Pitch = (1.0F-(double)alpha)*AccelAngle->Pitch + (double)alpha*(preFilter_Angle.Pitch + (double)dt * GyroAngle->Pitch);
     bc4:	2f e6       	ldi	r18, 0x6F	; 111
     bc6:	32 e1       	ldi	r19, 0x12	; 18
     bc8:	43 e8       	ldi	r20, 0x83	; 131
     bca:	5a e3       	ldi	r21, 0x3A	; 58
     bcc:	f6 01       	movw	r30, r12
     bce:	64 81       	ldd	r22, Z+4	; 0x04
     bd0:	75 81       	ldd	r23, Z+5	; 0x05
     bd2:	86 81       	ldd	r24, Z+6	; 0x06
     bd4:	97 81       	ldd	r25, Z+7	; 0x07
     bd6:	0e 94 35 0a 	call	0x146a	; 0x146a <__mulsf3>
     bda:	f7 01       	movw	r30, r14
     bdc:	24 81       	ldd	r18, Z+4	; 0x04
     bde:	35 81       	ldd	r19, Z+5	; 0x05
     be0:	46 81       	ldd	r20, Z+6	; 0x06
     be2:	57 81       	ldd	r21, Z+7	; 0x07
     be4:	0e 94 cb 07 	call	0xf96	; 0xf96 <__addsf3>
     be8:	26 ea       	ldi	r18, 0xA6	; 166
     bea:	37 e3       	ldi	r19, 0x37	; 55
     bec:	4d e1       	ldi	r20, 0x1D	; 29
     bee:	5f e3       	ldi	r21, 0x3F	; 63
     bf0:	0e 94 35 0a 	call	0x146a	; 0x146a <__mulsf3>
     bf4:	2b 01       	movw	r4, r22
     bf6:	3c 01       	movw	r6, r24
     bf8:	24 eb       	ldi	r18, 0xB4	; 180
     bfa:	30 e9       	ldi	r19, 0x90	; 144
     bfc:	45 ec       	ldi	r20, 0xC5	; 197
     bfe:	5e e3       	ldi	r21, 0x3E	; 62
     c00:	f8 01       	movw	r30, r16
     c02:	64 81       	ldd	r22, Z+4	; 0x04
     c04:	75 81       	ldd	r23, Z+5	; 0x05
     c06:	86 81       	ldd	r24, Z+6	; 0x06
     c08:	97 81       	ldd	r25, Z+7	; 0x07
     c0a:	0e 94 35 0a 	call	0x146a	; 0x146a <__mulsf3>
     c0e:	9b 01       	movw	r18, r22
     c10:	ac 01       	movw	r20, r24
     c12:	c3 01       	movw	r24, r6
     c14:	b2 01       	movw	r22, r4
     c16:	0e 94 cb 07 	call	0xf96	; 0xf96 <__addsf3>
     c1a:	6c 83       	std	Y+4, r22	; 0x04
     c1c:	7d 83       	std	Y+5, r23	; 0x05
     c1e:	8e 83       	std	Y+6, r24	; 0x06
     c20:	9f 83       	std	Y+7, r25	; 0x07
	Filter_Angle.Yaw = (1.0F-(double)alpha)*AccelAngle->Yaw + (double)alpha*(preFilter_Angle.Yaw + (double)dt * GyroAngle->Yaw);
     c22:	2f e6       	ldi	r18, 0x6F	; 111
     c24:	32 e1       	ldi	r19, 0x12	; 18
     c26:	43 e8       	ldi	r20, 0x83	; 131
     c28:	5a e3       	ldi	r21, 0x3A	; 58
     c2a:	f6 01       	movw	r30, r12
     c2c:	60 85       	ldd	r22, Z+8	; 0x08
     c2e:	71 85       	ldd	r23, Z+9	; 0x09
     c30:	82 85       	ldd	r24, Z+10	; 0x0a
     c32:	93 85       	ldd	r25, Z+11	; 0x0b
     c34:	0e 94 35 0a 	call	0x146a	; 0x146a <__mulsf3>
     c38:	f7 01       	movw	r30, r14
     c3a:	20 85       	ldd	r18, Z+8	; 0x08
     c3c:	31 85       	ldd	r19, Z+9	; 0x09
     c3e:	42 85       	ldd	r20, Z+10	; 0x0a
     c40:	53 85       	ldd	r21, Z+11	; 0x0b
     c42:	0e 94 cb 07 	call	0xf96	; 0xf96 <__addsf3>
     c46:	26 ea       	ldi	r18, 0xA6	; 166
     c48:	37 e3       	ldi	r19, 0x37	; 55
     c4a:	4d e1       	ldi	r20, 0x1D	; 29
     c4c:	5f e3       	ldi	r21, 0x3F	; 63
     c4e:	0e 94 35 0a 	call	0x146a	; 0x146a <__mulsf3>
     c52:	6b 01       	movw	r12, r22
     c54:	7c 01       	movw	r14, r24
     c56:	24 eb       	ldi	r18, 0xB4	; 180
     c58:	30 e9       	ldi	r19, 0x90	; 144
     c5a:	45 ec       	ldi	r20, 0xC5	; 197
     c5c:	5e e3       	ldi	r21, 0x3E	; 62
     c5e:	f8 01       	movw	r30, r16
     c60:	60 85       	ldd	r22, Z+8	; 0x08
     c62:	71 85       	ldd	r23, Z+9	; 0x09
     c64:	82 85       	ldd	r24, Z+10	; 0x0a
     c66:	93 85       	ldd	r25, Z+11	; 0x0b
     c68:	0e 94 35 0a 	call	0x146a	; 0x146a <__mulsf3>
     c6c:	9b 01       	movw	r18, r22
     c6e:	ac 01       	movw	r20, r24
     c70:	c7 01       	movw	r24, r14
     c72:	b6 01       	movw	r22, r12
     c74:	0e 94 cb 07 	call	0xf96	; 0xf96 <__addsf3>
     c78:	68 87       	std	Y+8, r22	; 0x08
     c7a:	79 87       	std	Y+9, r23	; 0x09
     c7c:	8a 87       	std	Y+10, r24	; 0x0a
     c7e:	9b 87       	std	Y+11, r25	; 0x0b
	
	preFilter_Angle = Filter_Angle;
     c80:	8c e0       	ldi	r24, 0x0C	; 12
     c82:	fe 01       	movw	r30, r28
     c84:	ac e2       	ldi	r26, 0x2C	; 44
     c86:	b1 e0       	ldi	r27, 0x01	; 1
     c88:	01 90       	ld	r0, Z+
     c8a:	0d 92       	st	X+, r0
     c8c:	8a 95       	dec	r24
     c8e:	e1 f7       	brne	.-8      	; 0xc88 <CompleFilter+0x154>
	
	return Filter_Angle;
     c90:	8c e0       	ldi	r24, 0x0C	; 12
     c92:	fe 01       	movw	r30, r28
     c94:	d5 01       	movw	r26, r10
     c96:	01 90       	ld	r0, Z+
     c98:	0d 92       	st	X+, r0
     c9a:	8a 95       	dec	r24
     c9c:	e1 f7       	brne	.-8      	; 0xc96 <CompleFilter+0x162>
     c9e:	c5 01       	movw	r24, r10
     ca0:	df 91       	pop	r29
     ca2:	cf 91       	pop	r28
     ca4:	1f 91       	pop	r17
     ca6:	0f 91       	pop	r16
     ca8:	ff 90       	pop	r15
     caa:	ef 90       	pop	r14
     cac:	df 90       	pop	r13
     cae:	cf 90       	pop	r12
     cb0:	bf 90       	pop	r11
     cb2:	af 90       	pop	r10
     cb4:	7f 90       	pop	r7
     cb6:	6f 90       	pop	r6
     cb8:	5f 90       	pop	r5
     cba:	4f 90       	pop	r4
     cbc:	08 95       	ret

00000cbe <InitPortSetting>:
Angle_3Dim AngleData;

void InitPortSetting(void)
{
	//OC0A, OC0B Pin PWM Enable
	sbi(DDRD, PIND6);
     cbe:	56 9a       	sbi	0x0a, 6	; 10
	sbi(DDRD, PIND5);
     cc0:	55 9a       	sbi	0x0a, 5	; 10
	
	//OC2A, OC2B Pin PWM Enable
	sbi(DDRB, PINB3);
     cc2:	23 9a       	sbi	0x04, 3	; 4
	sbi(DDRD, PIND3);
     cc4:	53 9a       	sbi	0x0a, 3	; 10
	
	//Init PORTB & PORTD
	PORTB = 0x00;
     cc6:	15 b8       	out	0x05, r1	; 5
	PORTD = 0x00;
     cc8:	1b b8       	out	0x0b, r1	; 11
     cca:	08 95       	ret

00000ccc <InitTimerCounter0>:

//Enable TimerCounter0 for Control Period
void InitTimerCounter0(void)
{
	//TimerCounter0 Interrupt Disable
	cbi(TIMSK0, TOIE0);
     ccc:	ee e6       	ldi	r30, 0x6E	; 110
     cce:	f0 e0       	ldi	r31, 0x00	; 0
     cd0:	80 81       	ld	r24, Z
     cd2:	8e 7f       	andi	r24, 0xFE	; 254
     cd4:	80 83       	st	Z, r24
	cbi(TIFR0, TOV0);
     cd6:	a8 98       	cbi	0x15, 0	; 21
	
	//Set TimerCounter0 OCpin Normal Operation
	//2021.01.20 Set Timer/Counter0 OCxPin Fast PWM MODE Non-Inverting Mode
	cbi(TCCR0A, COM0A0);
     cd8:	84 b5       	in	r24, 0x24	; 36
     cda:	8f 7b       	andi	r24, 0xBF	; 191
     cdc:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, COM0A1);
     cde:	84 b5       	in	r24, 0x24	; 36
     ce0:	80 68       	ori	r24, 0x80	; 128
     ce2:	84 bd       	out	0x24, r24	; 36
	
	//Set TimerCounter0 OCpin Normal Operation
	//2021.01.20 Set Timer/Counter0 OCxPin Fast PWM MODE Non-Inverting Mode	
	cbi(TCCR0A, COM0B0);
     ce4:	84 b5       	in	r24, 0x24	; 36
     ce6:	8f 7e       	andi	r24, 0xEF	; 239
     ce8:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, COM0B1);
     cea:	84 b5       	in	r24, 0x24	; 36
     cec:	80 62       	ori	r24, 0x20	; 32
     cee:	84 bd       	out	0x24, r24	; 36
	
	//Set TimerCounter Normal Operation
	//2021.01.20 
	//Set Timer/Counter0 Fast PWM Mode 
	sbi(TCCR0A, WGM00);
     cf0:	84 b5       	in	r24, 0x24	; 36
     cf2:	81 60       	ori	r24, 0x01	; 1
     cf4:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM01);
     cf6:	84 b5       	in	r24, 0x24	; 36
     cf8:	82 60       	ori	r24, 0x02	; 2
     cfa:	84 bd       	out	0x24, r24	; 36
	cbi(TCCR0A, WGM02);
     cfc:	84 b5       	in	r24, 0x24	; 36
     cfe:	87 7f       	andi	r24, 0xF7	; 247
     d00:	84 bd       	out	0x24, r24	; 36
	
	//Set Prescaler 1024, TimerCounter CLK Source -> 16MHz/1024 = 15.625KHz
	//2021.01.20
	//Set Prescaler 8. TimerCounter CLK Source -> 16MHz/8 = 2MHz
	sbi(TCCR0B, CS01);
     d02:	85 b5       	in	r24, 0x25	; 37
     d04:	82 60       	ori	r24, 0x02	; 2
     d06:	85 bd       	out	0x25, r24	; 37
	//256-(TCNT+1) = 125 so, TCNT = 130
	//2021.01.20
	//Set Motor Drive Frequency 20KHz
	//2MHz = 0.5us, 0.5us * 100 = 50us
	//TCNT+1 = 256-100 so, TCNT = 155
	TCNT0 = 155;
     d08:	8b e9       	ldi	r24, 0x9B	; 155
     d0a:	86 bd       	out	0x26, r24	; 38
	
	//2021.01.20
	//Non-Inverting Mode, OCn Pin is 'LOW' @ OCRxA < Counter Value
	//Non-Inverting Mode, OCn Pin is 'LOW' @ OCRxB > Counter Value
	OCR0A = 0x00;
     d0c:	17 bc       	out	0x27, r1	; 39
	OCR0B = 0x00;
     d0e:	18 bc       	out	0x28, r1	; 40
     d10:	08 95       	ret

00000d12 <InitTimerCounter1>:

//Enable TimerCounter1 for Motor Drive
void InitTimerCounter1(void)
{
	//Enable Timer/Counter1 Overflow Interrupt
	cbi(TIMSK1, TOIE1);
     d12:	af e6       	ldi	r26, 0x6F	; 111
     d14:	b0 e0       	ldi	r27, 0x00	; 0
     d16:	8c 91       	ld	r24, X
     d18:	8e 7f       	andi	r24, 0xFE	; 254
     d1a:	8c 93       	st	X, r24
	cbi(TIFR1, TOV1);
     d1c:	b0 98       	cbi	0x16, 0	; 22
	
	//Set Normal Port Mode
	cbi(TCCR1A, COM1A0);
     d1e:	e0 e8       	ldi	r30, 0x80	; 128
     d20:	f0 e0       	ldi	r31, 0x00	; 0
     d22:	80 81       	ld	r24, Z
     d24:	8f 7b       	andi	r24, 0xBF	; 191
     d26:	80 83       	st	Z, r24
	cbi(TCCR1A, COM1A1);
     d28:	80 81       	ld	r24, Z
     d2a:	8f 77       	andi	r24, 0x7F	; 127
     d2c:	80 83       	st	Z, r24
	cbi(TCCR1A, COM1B0);
     d2e:	80 81       	ld	r24, Z
     d30:	8f 7e       	andi	r24, 0xEF	; 239
     d32:	80 83       	st	Z, r24
	cbi(TCCR1A, COM1B1);
     d34:	80 81       	ld	r24, Z
     d36:	8f 7d       	andi	r24, 0xDF	; 223
     d38:	80 83       	st	Z, r24
	
	//Fast PWM, TOV on TOP, Updata OCR1x pin on Bottom, Counter Top Value = ICR1
	//2020.01.20 
	//Normal Mode
	cbi(TCCR1A, WGM10);
     d3a:	80 81       	ld	r24, Z
     d3c:	8e 7f       	andi	r24, 0xFE	; 254
     d3e:	80 83       	st	Z, r24
	cbi(TCCR1A, WGM11);
     d40:	80 81       	ld	r24, Z
     d42:	8d 7f       	andi	r24, 0xFD	; 253
     d44:	80 83       	st	Z, r24
	cbi(TCCR1B, WGM12);
     d46:	e1 e8       	ldi	r30, 0x81	; 129
     d48:	f0 e0       	ldi	r31, 0x00	; 0
     d4a:	80 81       	ld	r24, Z
     d4c:	87 7f       	andi	r24, 0xF7	; 247
     d4e:	80 83       	st	Z, r24
	cbi(TCCR1B, WGM13);
     d50:	80 81       	ld	r24, Z
     d52:	8f 7e       	andi	r24, 0xEF	; 239
     d54:	80 83       	st	Z, r24
	
	//Clock Source = System Clock/8 = 16000000/8 = 2MHz
	//2020.01.20 
	//System Clock / 64 = 16000000/64 = 25025KHz = 4us
	sbi(TCCR1B, CS10);
     d56:	80 81       	ld	r24, Z
     d58:	81 60       	ori	r24, 0x01	; 1
     d5a:	80 83       	st	Z, r24
	sbi(TCCR1B, CS11);
     d5c:	80 81       	ld	r24, Z
     d5e:	82 60       	ori	r24, 0x02	; 2
     d60:	80 83       	st	Z, r24
	//sbi(TCCR1B, CS12);
	
	//Timer/Counter Period = 4us
	//TCNT1 = 65410, Timer Interrupt Period = 4us*65410 = 500us
	//TCNT1 = 0xFF82;
	TCNT1H = 0xFF;
     d62:	8f ef       	ldi	r24, 0xFF	; 255
     d64:	80 93 85 00 	sts	0x0085, r24	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
	TCNT1L = 0x82;
     d68:	82 e8       	ldi	r24, 0x82	; 130
     d6a:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
	
	//2021.01.20
	//TimerCounter1 OVF Interrupt Enable
	sbi(TIMSK1, TOIE1);
     d6e:	8c 91       	ld	r24, X
     d70:	81 60       	ori	r24, 0x01	; 1
     d72:	8c 93       	st	X, r24
	sbi(TIFR1, TOV1);	
     d74:	b0 9a       	sbi	0x16, 0	; 22
     d76:	08 95       	ret

00000d78 <InitTimerCounter2>:

//Enable TimerCounter2 for Motor Drive
void InitTimerCounter2(void)
{
	//Disable Timer/Counter2 Overflow Interrupt
	cbi(TIMSK2, TOIE2);
     d78:	e0 e7       	ldi	r30, 0x70	; 112
     d7a:	f0 e0       	ldi	r31, 0x00	; 0
     d7c:	80 81       	ld	r24, Z
     d7e:	8e 7f       	andi	r24, 0xFE	; 254
     d80:	80 83       	st	Z, r24
	cbi(TIFR2, TOV2);
     d82:	b8 98       	cbi	0x17, 0	; 23
	
	//Set Fast PWM Mode, Non-Inverting Mode
	cbi(TCCR2A, COM2A0);
     d84:	e0 eb       	ldi	r30, 0xB0	; 176
     d86:	f0 e0       	ldi	r31, 0x00	; 0
     d88:	80 81       	ld	r24, Z
     d8a:	8f 7b       	andi	r24, 0xBF	; 191
     d8c:	80 83       	st	Z, r24
	sbi(TCCR2A, COM2A1);
     d8e:	80 81       	ld	r24, Z
     d90:	80 68       	ori	r24, 0x80	; 128
     d92:	80 83       	st	Z, r24
	
	//Set Fast PWM Mode, Non-Inverting Mode
	cbi(TCCR2A, COM2B0);
     d94:	80 81       	ld	r24, Z
     d96:	8f 7e       	andi	r24, 0xEF	; 239
     d98:	80 83       	st	Z, r24
	sbi(TCCR2A, COM2B1);
     d9a:	80 81       	ld	r24, Z
     d9c:	80 62       	ori	r24, 0x20	; 32
     d9e:	80 83       	st	Z, r24
	
	//Fast PWM, TOV on MAX, Updata OCR1x pin on Bottom, Counter Top Value = 0xFF
	sbi(TCCR2A, WGM20);
     da0:	80 81       	ld	r24, Z
     da2:	81 60       	ori	r24, 0x01	; 1
     da4:	80 83       	st	Z, r24
	sbi(TCCR2A, WGM21);
     da6:	80 81       	ld	r24, Z
     da8:	82 60       	ori	r24, 0x02	; 2
     daa:	80 83       	st	Z, r24
	cbi(TCCR2B, WGM22);
     dac:	e1 eb       	ldi	r30, 0xB1	; 177
     dae:	f0 e0       	ldi	r31, 0x00	; 0
     db0:	80 81       	ld	r24, Z
     db2:	87 7f       	andi	r24, 0xF7	; 247
     db4:	80 83       	st	Z, r24
	
	//Clock Source = System Clock/8 = 16000000/8 = 2MHz
	sbi(TCCR2B, CS21);
     db6:	80 81       	ld	r24, Z
     db8:	82 60       	ori	r24, 0x02	; 2
     dba:	80 83       	st	Z, r24
	
	//Set Motor Drive Frequency 20KHz
	//2MHz = 0.5us, 0.5us * 100 = 50us
	//TCNT+1 = 256-100 so, TCNT = 155
	TCNT2 = 155;
     dbc:	8b e9       	ldi	r24, 0x9B	; 155
     dbe:	80 93 b2 00 	sts	0x00B2, r24	; 0x8000b2 <__DATA_REGION_ORIGIN__+0x52>
	
	//OC2x Pin Duty 0% => Motor Stop
	OCR2A = 0x00;
     dc2:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__DATA_REGION_ORIGIN__+0x53>
	OCR2B = 0xFF;
     dc6:	8f ef       	ldi	r24, 0xFF	; 255
     dc8:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <__DATA_REGION_ORIGIN__+0x54>
     dcc:	08 95       	ret

00000dce <__vector_13>:
}

//Timer/Counter1 OverFlow Interrupt Period = 500us
SIGNAL(TIMER1_OVF_vect)
{
     dce:	1f 92       	push	r1
     dd0:	0f 92       	push	r0
     dd2:	0f b6       	in	r0, 0x3f	; 63
     dd4:	0f 92       	push	r0
     dd6:	11 24       	eor	r1, r1
     dd8:	2f 93       	push	r18
     dda:	3f 93       	push	r19
     ddc:	4f 93       	push	r20
     dde:	5f 93       	push	r21
     de0:	6f 93       	push	r22
     de2:	7f 93       	push	r23
     de4:	8f 93       	push	r24
     de6:	9f 93       	push	r25
     de8:	af 93       	push	r26
     dea:	bf 93       	push	r27
     dec:	ef 93       	push	r30
     dee:	ff 93       	push	r31
     df0:	cf 93       	push	r28
     df2:	df 93       	push	r29
     df4:	cd b7       	in	r28, 0x3d	; 61
     df6:	de b7       	in	r29, 0x3e	; 62
     df8:	2c 97       	sbiw	r28, 0x0c	; 12
     dfa:	de bf       	out	0x3e, r29	; 62
     dfc:	cd bf       	out	0x3d, r28	; 61
	CNT1_1ms++;
     dfe:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <CNT1_1ms>
     e02:	8f 5f       	subi	r24, 0xFF	; 255
     e04:	80 93 44 01 	sts	0x0144, r24	; 0x800144 <CNT1_1ms>
	
	if(CNT1_1ms == 2)
     e08:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <CNT1_1ms>
     e0c:	82 30       	cpi	r24, 0x02	; 2
     e0e:	31 f5       	brne	.+76     	; 0xe5c <__vector_13+0x8e>
	{
		CNT1_1ms = 0;
     e10:	10 92 44 01 	sts	0x0144, r1	; 0x800144 <CNT1_1ms>
		RunMPU6050();
     e14:	0e 94 bb 03 	call	0x776	; 0x776 <RunMPU6050>
		
		Accelero_Angle = getAcceleroData(); //get Angle Value
     e18:	0e 94 e7 03 	call	0x7ce	; 0x7ce <getAcceleroData>
     e1c:	90 93 54 01 	sts	0x0154, r25	; 0x800154 <Accelero_Angle+0x1>
     e20:	80 93 53 01 	sts	0x0153, r24	; 0x800153 <Accelero_Angle>
		Gyro_Angle = getGyroData(); //get Angular Velocity
     e24:	0e 94 ea 03 	call	0x7d4	; 0x7d4 <getGyroData>
     e28:	90 93 46 01 	sts	0x0146, r25	; 0x800146 <Gyro_Angle+0x1>
     e2c:	80 93 45 01 	sts	0x0145, r24	; 0x800145 <Gyro_Angle>
		
		AngleData = CompleFilter(Accelero_Angle, Gyro_Angle);
     e30:	60 91 53 01 	lds	r22, 0x0153	; 0x800153 <Accelero_Angle>
     e34:	70 91 54 01 	lds	r23, 0x0154	; 0x800154 <Accelero_Angle+0x1>
     e38:	ac 01       	movw	r20, r24
     e3a:	ce 01       	movw	r24, r28
     e3c:	01 96       	adiw	r24, 0x01	; 1
     e3e:	0e 94 9a 05 	call	0xb34	; 0xb34 <CompleFilter>
     e42:	8c e0       	ldi	r24, 0x0C	; 12
     e44:	fe 01       	movw	r30, r28
     e46:	31 96       	adiw	r30, 0x01	; 1
     e48:	a7 e4       	ldi	r26, 0x47	; 71
     e4a:	b1 e0       	ldi	r27, 0x01	; 1
     e4c:	01 90       	ld	r0, Z+
     e4e:	0d 92       	st	X+, r0
     e50:	8a 95       	dec	r24
     e52:	e1 f7       	brne	.-8      	; 0xe4c <__vector_13+0x7e>
		RunPID_MotorCtrl(&AngleData);
     e54:	87 e4       	ldi	r24, 0x47	; 71
     e56:	91 e0       	ldi	r25, 0x01	; 1
     e58:	0e 94 15 04 	call	0x82a	; 0x82a <RunPID_MotorCtrl>
				
		#ifdef ForTest
		printf("Accel Pitch = %.2f\tGyro Pitch = %.2f\tFiltered Pitch = %.2f\n", Accelero_Angle->Pitch, Gyro_Angle->Pitch, AngleData.Pitch);
		#endif
	}
     e5c:	2c 96       	adiw	r28, 0x0c	; 12
     e5e:	0f b6       	in	r0, 0x3f	; 63
     e60:	f8 94       	cli
     e62:	de bf       	out	0x3e, r29	; 62
     e64:	0f be       	out	0x3f, r0	; 63
     e66:	cd bf       	out	0x3d, r28	; 61
     e68:	df 91       	pop	r29
     e6a:	cf 91       	pop	r28
     e6c:	ff 91       	pop	r31
     e6e:	ef 91       	pop	r30
     e70:	bf 91       	pop	r27
     e72:	af 91       	pop	r26
     e74:	9f 91       	pop	r25
     e76:	8f 91       	pop	r24
     e78:	7f 91       	pop	r23
     e7a:	6f 91       	pop	r22
     e7c:	5f 91       	pop	r21
     e7e:	4f 91       	pop	r20
     e80:	3f 91       	pop	r19
     e82:	2f 91       	pop	r18
     e84:	0f 90       	pop	r0
     e86:	0f be       	out	0x3f, r0	; 63
     e88:	0f 90       	pop	r0
     e8a:	1f 90       	pop	r1
     e8c:	18 95       	reti

00000e8e <i2c_init>:
#define TWI_MR_DATA_ACK      0x50
#define TWI_MR_DATA_NACK   0x58

void i2c_init(void)
{
	TWSR = 0x00;
     e8e:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
	TWBR = 12;
     e92:	8c e0       	ldi	r24, 0x0C	; 12
     e94:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__DATA_REGION_ORIGIN__+0x58>
     e98:	08 95       	ret

00000e9a <i2c_start>:

unsigned char i2c_start(unsigned char address)
{
	uint8_t twst;
	
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
     e9a:	94 ea       	ldi	r25, 0xA4	; 164
     e9c:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
	
	while(!(TWCR & (1<<TWINT)));
     ea0:	ec eb       	ldi	r30, 0xBC	; 188
     ea2:	f0 e0       	ldi	r31, 0x00	; 0
     ea4:	90 81       	ld	r25, Z
     ea6:	99 23       	and	r25, r25
     ea8:	ec f7       	brge	.-6      	; 0xea4 <i2c_start+0xa>
	
	twst = TWSR & 0xF8;
     eaa:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
     eae:	98 7f       	andi	r25, 0xF8	; 248
	
	if((twst != TWI_START) && (twst != TWI_RESTART)) return 1;
     eb0:	98 30       	cpi	r25, 0x08	; 8
     eb2:	11 f0       	breq	.+4      	; 0xeb8 <i2c_start+0x1e>
     eb4:	90 31       	cpi	r25, 0x10	; 16
     eb6:	a1 f4       	brne	.+40     	; 0xee0 <i2c_start+0x46>
	
	TWDR = address;
     eb8:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
	TWCR = (1<<TWINT) | (1<<TWEN);
     ebc:	84 e8       	ldi	r24, 0x84	; 132
     ebe:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
	
	while(!(TWCR & (1<<TWINT)));
     ec2:	ec eb       	ldi	r30, 0xBC	; 188
     ec4:	f0 e0       	ldi	r31, 0x00	; 0
     ec6:	80 81       	ld	r24, Z
     ec8:	88 23       	and	r24, r24
     eca:	ec f7       	brge	.-6      	; 0xec6 <i2c_start+0x2c>
	
	twst = TWSR & 0xF8;
     ecc:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
     ed0:	98 7f       	andi	r25, 0xF8	; 248
	if((twst != TWI_MT_SLA_ACK) && (twst != TWI_MR_SLA_NACK)) return 1;
     ed2:	98 31       	cpi	r25, 0x18	; 24
     ed4:	39 f0       	breq	.+14     	; 0xee4 <i2c_start+0x4a>
	
	while(!(TWCR & (1<<TWINT)));
	
	twst = TWSR & 0xF8;
	
	if((twst != TWI_START) && (twst != TWI_RESTART)) return 1;
     ed6:	81 e0       	ldi	r24, 0x01	; 1
     ed8:	98 34       	cpi	r25, 0x48	; 72
     eda:	29 f4       	brne	.+10     	; 0xee6 <i2c_start+0x4c>
     edc:	80 e0       	ldi	r24, 0x00	; 0
     ede:	08 95       	ret
     ee0:	81 e0       	ldi	r24, 0x01	; 1
     ee2:	08 95       	ret
	while(!(TWCR & (1<<TWINT)));
	
	twst = TWSR & 0xF8;
	if((twst != TWI_MT_SLA_ACK) && (twst != TWI_MR_SLA_NACK)) return 1;
	
	return 0;
     ee4:	80 e0       	ldi	r24, 0x00	; 0
}//i2c_start
     ee6:	08 95       	ret

00000ee8 <i2c_rep_start>:

unsigned char i2c_rep_start(unsigned char address)
{
	return  i2c_start(address);
     ee8:	0e 94 4d 07 	call	0xe9a	; 0xe9a <i2c_start>
}//i2c_rep_start
     eec:	08 95       	ret

00000eee <i2c_stop>:

void i2c_stop(void)
{
	TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);
     eee:	84 e9       	ldi	r24, 0x94	; 148
     ef0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
	
	while(TWCR & (1<<TWSTO));
     ef4:	ec eb       	ldi	r30, 0xBC	; 188
     ef6:	f0 e0       	ldi	r31, 0x00	; 0
     ef8:	80 81       	ld	r24, Z
     efa:	84 fd       	sbrc	r24, 4
     efc:	fd cf       	rjmp	.-6      	; 0xef8 <i2c_stop+0xa>
}//i2c_stopm-
     efe:	08 95       	ret

00000f00 <i2c_write>:

unsigned char i2c_write(unsigned char data)
{
	uint8_t twst;
	
	TWDR = data;
     f00:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
	TWCR = (1<<TWINT) | (1<<TWEN);
     f04:	84 e8       	ldi	r24, 0x84	; 132
     f06:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
	
	while(!(TWCR & (1<<TWINT)));
     f0a:	ec eb       	ldi	r30, 0xBC	; 188
     f0c:	f0 e0       	ldi	r31, 0x00	; 0
     f0e:	80 81       	ld	r24, Z
     f10:	88 23       	and	r24, r24
     f12:	ec f7       	brge	.-6      	; 0xf0e <i2c_write+0xe>
	
	twst = TWSR & 0xF8;
     f14:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
     f18:	98 7f       	andi	r25, 0xF8	; 248
     f1a:	81 e0       	ldi	r24, 0x01	; 1
     f1c:	98 32       	cpi	r25, 0x28	; 40
     f1e:	09 f4       	brne	.+2      	; 0xf22 <i2c_write+0x22>
     f20:	80 e0       	ldi	r24, 0x00	; 0
	if(twst != TWI_MT_DATA_ACK) return 1;
	
	return 0;
}//i2c_write
     f22:	08 95       	ret

00000f24 <i2c_readAck>:

unsigned char i2c_readAck(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
     f24:	84 ec       	ldi	r24, 0xC4	; 196
     f26:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
	while(!(TWCR & (1<<TWINT)));
     f2a:	ec eb       	ldi	r30, 0xBC	; 188
     f2c:	f0 e0       	ldi	r31, 0x00	; 0
     f2e:	80 81       	ld	r24, Z
     f30:	88 23       	and	r24, r24
     f32:	ec f7       	brge	.-6      	; 0xf2e <i2c_readAck+0xa>
	
	return TWDR;
     f34:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
}//i2c_readAck
     f38:	08 95       	ret

00000f3a <i2c_readNak>:

unsigned char i2c_readNak(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN);
     f3a:	84 e8       	ldi	r24, 0x84	; 132
     f3c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
	while(!(TWCR & (1<<TWINT)));
     f40:	ec eb       	ldi	r30, 0xBC	; 188
     f42:	f0 e0       	ldi	r31, 0x00	; 0
     f44:	80 81       	ld	r24, Z
     f46:	88 23       	and	r24, r24
     f48:	ec f7       	brge	.-6      	; 0xf44 <i2c_readNak+0xa>
	
	return TWDR;
     f4a:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
}//i2c_readNak
     f4e:	08 95       	ret

00000f50 <UART_INIT>:
	UART_string_transmit(" = ");

	ltoa((val), debug_buffer, UART_BUFLEN);
	UART_string_transmit(debug_buffer);
	UART_string_transmit("\n");
}
     f50:	e0 ec       	ldi	r30, 0xC0	; 192
     f52:	f0 e0       	ldi	r31, 0x00	; 0
     f54:	80 81       	ld	r24, Z
     f56:	82 60       	ori	r24, 0x02	; 2
     f58:	80 83       	st	Z, r24
     f5a:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
     f5e:	8f ec       	ldi	r24, 0xCF	; 207
     f60:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
     f64:	e2 ec       	ldi	r30, 0xC2	; 194
     f66:	f0 e0       	ldi	r31, 0x00	; 0
     f68:	80 81       	ld	r24, Z
     f6a:	86 60       	ori	r24, 0x06	; 6
     f6c:	80 83       	st	Z, r24
     f6e:	e1 ec       	ldi	r30, 0xC1	; 193
     f70:	f0 e0       	ldi	r31, 0x00	; 0
     f72:	80 81       	ld	r24, Z
     f74:	80 61       	ori	r24, 0x10	; 16
     f76:	80 83       	st	Z, r24
     f78:	80 81       	ld	r24, Z
     f7a:	88 60       	ori	r24, 0x08	; 8
     f7c:	80 83       	st	Z, r24
     f7e:	08 95       	ret

00000f80 <usartTxChar>:

int usartTxChar(char ch, FILE *fp) {  // for printf
	while (!(UCSR0A & (1 << UDRE0)));
     f80:	e0 ec       	ldi	r30, 0xC0	; 192
     f82:	f0 e0       	ldi	r31, 0x00	; 0
     f84:	90 81       	ld	r25, Z
     f86:	95 ff       	sbrs	r25, 5
     f88:	fd cf       	rjmp	.-6      	; 0xf84 <usartTxChar+0x4>

	UDR0 = ch;
     f8a:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>

	return 0;
     f8e:	80 e0       	ldi	r24, 0x00	; 0
     f90:	90 e0       	ldi	r25, 0x00	; 0
     f92:	08 95       	ret

00000f94 <__subsf3>:
     f94:	50 58       	subi	r21, 0x80	; 128

00000f96 <__addsf3>:
     f96:	bb 27       	eor	r27, r27
     f98:	aa 27       	eor	r26, r26
     f9a:	0e 94 e2 07 	call	0xfc4	; 0xfc4 <__addsf3x>
     f9e:	0c 94 ee 09 	jmp	0x13dc	; 0x13dc <__fp_round>
     fa2:	0e 94 e0 09 	call	0x13c0	; 0x13c0 <__fp_pscA>
     fa6:	38 f0       	brcs	.+14     	; 0xfb6 <__addsf3+0x20>
     fa8:	0e 94 e7 09 	call	0x13ce	; 0x13ce <__fp_pscB>
     fac:	20 f0       	brcs	.+8      	; 0xfb6 <__addsf3+0x20>
     fae:	39 f4       	brne	.+14     	; 0xfbe <__addsf3+0x28>
     fb0:	9f 3f       	cpi	r25, 0xFF	; 255
     fb2:	19 f4       	brne	.+6      	; 0xfba <__addsf3+0x24>
     fb4:	26 f4       	brtc	.+8      	; 0xfbe <__addsf3+0x28>
     fb6:	0c 94 b6 09 	jmp	0x136c	; 0x136c <__fp_nan>
     fba:	0e f4       	brtc	.+2      	; 0xfbe <__addsf3+0x28>
     fbc:	e0 95       	com	r30
     fbe:	e7 fb       	bst	r30, 7
     fc0:	0c 94 b0 09 	jmp	0x1360	; 0x1360 <__fp_inf>

00000fc4 <__addsf3x>:
     fc4:	e9 2f       	mov	r30, r25
     fc6:	0e 94 ff 09 	call	0x13fe	; 0x13fe <__fp_split3>
     fca:	58 f3       	brcs	.-42     	; 0xfa2 <__addsf3+0xc>
     fcc:	ba 17       	cp	r27, r26
     fce:	62 07       	cpc	r22, r18
     fd0:	73 07       	cpc	r23, r19
     fd2:	84 07       	cpc	r24, r20
     fd4:	95 07       	cpc	r25, r21
     fd6:	20 f0       	brcs	.+8      	; 0xfe0 <__addsf3x+0x1c>
     fd8:	79 f4       	brne	.+30     	; 0xff8 <__addsf3x+0x34>
     fda:	a6 f5       	brtc	.+104    	; 0x1044 <__addsf3x+0x80>
     fdc:	0c 94 21 0a 	jmp	0x1442	; 0x1442 <__fp_zero>
     fe0:	0e f4       	brtc	.+2      	; 0xfe4 <__addsf3x+0x20>
     fe2:	e0 95       	com	r30
     fe4:	0b 2e       	mov	r0, r27
     fe6:	ba 2f       	mov	r27, r26
     fe8:	a0 2d       	mov	r26, r0
     fea:	0b 01       	movw	r0, r22
     fec:	b9 01       	movw	r22, r18
     fee:	90 01       	movw	r18, r0
     ff0:	0c 01       	movw	r0, r24
     ff2:	ca 01       	movw	r24, r20
     ff4:	a0 01       	movw	r20, r0
     ff6:	11 24       	eor	r1, r1
     ff8:	ff 27       	eor	r31, r31
     ffa:	59 1b       	sub	r21, r25
     ffc:	99 f0       	breq	.+38     	; 0x1024 <__addsf3x+0x60>
     ffe:	59 3f       	cpi	r21, 0xF9	; 249
    1000:	50 f4       	brcc	.+20     	; 0x1016 <__addsf3x+0x52>
    1002:	50 3e       	cpi	r21, 0xE0	; 224
    1004:	68 f1       	brcs	.+90     	; 0x1060 <__addsf3x+0x9c>
    1006:	1a 16       	cp	r1, r26
    1008:	f0 40       	sbci	r31, 0x00	; 0
    100a:	a2 2f       	mov	r26, r18
    100c:	23 2f       	mov	r18, r19
    100e:	34 2f       	mov	r19, r20
    1010:	44 27       	eor	r20, r20
    1012:	58 5f       	subi	r21, 0xF8	; 248
    1014:	f3 cf       	rjmp	.-26     	; 0xffc <__addsf3x+0x38>
    1016:	46 95       	lsr	r20
    1018:	37 95       	ror	r19
    101a:	27 95       	ror	r18
    101c:	a7 95       	ror	r26
    101e:	f0 40       	sbci	r31, 0x00	; 0
    1020:	53 95       	inc	r21
    1022:	c9 f7       	brne	.-14     	; 0x1016 <__addsf3x+0x52>
    1024:	7e f4       	brtc	.+30     	; 0x1044 <__addsf3x+0x80>
    1026:	1f 16       	cp	r1, r31
    1028:	ba 0b       	sbc	r27, r26
    102a:	62 0b       	sbc	r22, r18
    102c:	73 0b       	sbc	r23, r19
    102e:	84 0b       	sbc	r24, r20
    1030:	ba f0       	brmi	.+46     	; 0x1060 <__addsf3x+0x9c>
    1032:	91 50       	subi	r25, 0x01	; 1
    1034:	a1 f0       	breq	.+40     	; 0x105e <__addsf3x+0x9a>
    1036:	ff 0f       	add	r31, r31
    1038:	bb 1f       	adc	r27, r27
    103a:	66 1f       	adc	r22, r22
    103c:	77 1f       	adc	r23, r23
    103e:	88 1f       	adc	r24, r24
    1040:	c2 f7       	brpl	.-16     	; 0x1032 <__addsf3x+0x6e>
    1042:	0e c0       	rjmp	.+28     	; 0x1060 <__addsf3x+0x9c>
    1044:	ba 0f       	add	r27, r26
    1046:	62 1f       	adc	r22, r18
    1048:	73 1f       	adc	r23, r19
    104a:	84 1f       	adc	r24, r20
    104c:	48 f4       	brcc	.+18     	; 0x1060 <__addsf3x+0x9c>
    104e:	87 95       	ror	r24
    1050:	77 95       	ror	r23
    1052:	67 95       	ror	r22
    1054:	b7 95       	ror	r27
    1056:	f7 95       	ror	r31
    1058:	9e 3f       	cpi	r25, 0xFE	; 254
    105a:	08 f0       	brcs	.+2      	; 0x105e <__addsf3x+0x9a>
    105c:	b0 cf       	rjmp	.-160    	; 0xfbe <__addsf3+0x28>
    105e:	93 95       	inc	r25
    1060:	88 0f       	add	r24, r24
    1062:	08 f0       	brcs	.+2      	; 0x1066 <__addsf3x+0xa2>
    1064:	99 27       	eor	r25, r25
    1066:	ee 0f       	add	r30, r30
    1068:	97 95       	ror	r25
    106a:	87 95       	ror	r24
    106c:	08 95       	ret
    106e:	0e 94 e0 09 	call	0x13c0	; 0x13c0 <__fp_pscA>
    1072:	60 f0       	brcs	.+24     	; 0x108c <__addsf3x+0xc8>
    1074:	80 e8       	ldi	r24, 0x80	; 128
    1076:	91 e0       	ldi	r25, 0x01	; 1
    1078:	09 f4       	brne	.+2      	; 0x107c <__addsf3x+0xb8>
    107a:	9e ef       	ldi	r25, 0xFE	; 254
    107c:	0e 94 e7 09 	call	0x13ce	; 0x13ce <__fp_pscB>
    1080:	28 f0       	brcs	.+10     	; 0x108c <__addsf3x+0xc8>
    1082:	40 e8       	ldi	r20, 0x80	; 128
    1084:	51 e0       	ldi	r21, 0x01	; 1
    1086:	71 f4       	brne	.+28     	; 0x10a4 <atan2+0x10>
    1088:	5e ef       	ldi	r21, 0xFE	; 254
    108a:	0c c0       	rjmp	.+24     	; 0x10a4 <atan2+0x10>
    108c:	0c 94 b6 09 	jmp	0x136c	; 0x136c <__fp_nan>
    1090:	0c 94 21 0a 	jmp	0x1442	; 0x1442 <__fp_zero>

00001094 <atan2>:
    1094:	e9 2f       	mov	r30, r25
    1096:	e0 78       	andi	r30, 0x80	; 128
    1098:	0e 94 ff 09 	call	0x13fe	; 0x13fe <__fp_split3>
    109c:	40 f3       	brcs	.-48     	; 0x106e <__addsf3x+0xaa>
    109e:	09 2e       	mov	r0, r25
    10a0:	05 2a       	or	r0, r21
    10a2:	b1 f3       	breq	.-20     	; 0x1090 <__addsf3x+0xcc>
    10a4:	26 17       	cp	r18, r22
    10a6:	37 07       	cpc	r19, r23
    10a8:	48 07       	cpc	r20, r24
    10aa:	59 07       	cpc	r21, r25
    10ac:	38 f0       	brcs	.+14     	; 0x10bc <atan2+0x28>
    10ae:	0e 2e       	mov	r0, r30
    10b0:	07 f8       	bld	r0, 7
    10b2:	e0 25       	eor	r30, r0
    10b4:	69 f0       	breq	.+26     	; 0x10d0 <atan2+0x3c>
    10b6:	e0 25       	eor	r30, r0
    10b8:	e0 64       	ori	r30, 0x40	; 64
    10ba:	0a c0       	rjmp	.+20     	; 0x10d0 <atan2+0x3c>
    10bc:	ef 63       	ori	r30, 0x3F	; 63
    10be:	07 f8       	bld	r0, 7
    10c0:	00 94       	com	r0
    10c2:	07 fa       	bst	r0, 7
    10c4:	db 01       	movw	r26, r22
    10c6:	b9 01       	movw	r22, r18
    10c8:	9d 01       	movw	r18, r26
    10ca:	dc 01       	movw	r26, r24
    10cc:	ca 01       	movw	r24, r20
    10ce:	ad 01       	movw	r20, r26
    10d0:	ef 93       	push	r30
    10d2:	0e 94 c5 08 	call	0x118a	; 0x118a <__divsf3_pse>
    10d6:	0e 94 ee 09 	call	0x13dc	; 0x13dc <__fp_round>
    10da:	0e 94 7a 08 	call	0x10f4	; 0x10f4 <atan>
    10de:	5f 91       	pop	r21
    10e0:	55 23       	and	r21, r21
    10e2:	39 f0       	breq	.+14     	; 0x10f2 <atan2+0x5e>
    10e4:	2b ed       	ldi	r18, 0xDB	; 219
    10e6:	3f e0       	ldi	r19, 0x0F	; 15
    10e8:	49 e4       	ldi	r20, 0x49	; 73
    10ea:	50 fd       	sbrc	r21, 0
    10ec:	49 ec       	ldi	r20, 0xC9	; 201
    10ee:	0c 94 cb 07 	jmp	0xf96	; 0xf96 <__addsf3>
    10f2:	08 95       	ret

000010f4 <atan>:
    10f4:	df 93       	push	r29
    10f6:	dd 27       	eor	r29, r29
    10f8:	b9 2f       	mov	r27, r25
    10fa:	bf 77       	andi	r27, 0x7F	; 127
    10fc:	40 e8       	ldi	r20, 0x80	; 128
    10fe:	5f e3       	ldi	r21, 0x3F	; 63
    1100:	16 16       	cp	r1, r22
    1102:	17 06       	cpc	r1, r23
    1104:	48 07       	cpc	r20, r24
    1106:	5b 07       	cpc	r21, r27
    1108:	18 f4       	brcc	.+6      	; 0x1110 <atan+0x1c>
    110a:	d9 2f       	mov	r29, r25
    110c:	0e 94 2d 0a 	call	0x145a	; 0x145a <inverse>
    1110:	9f 93       	push	r25
    1112:	8f 93       	push	r24
    1114:	7f 93       	push	r23
    1116:	6f 93       	push	r22
    1118:	0e 94 a2 0a 	call	0x1544	; 0x1544 <square>
    111c:	e8 e6       	ldi	r30, 0x68	; 104
    111e:	f0 e0       	ldi	r31, 0x00	; 0
    1120:	0e 94 b9 09 	call	0x1372	; 0x1372 <__fp_powser>
    1124:	0e 94 ee 09 	call	0x13dc	; 0x13dc <__fp_round>
    1128:	2f 91       	pop	r18
    112a:	3f 91       	pop	r19
    112c:	4f 91       	pop	r20
    112e:	5f 91       	pop	r21
    1130:	0e 94 48 0a 	call	0x1490	; 0x1490 <__mulsf3x>
    1134:	dd 23       	and	r29, r29
    1136:	51 f0       	breq	.+20     	; 0x114c <atan+0x58>
    1138:	90 58       	subi	r25, 0x80	; 128
    113a:	a2 ea       	ldi	r26, 0xA2	; 162
    113c:	2a ed       	ldi	r18, 0xDA	; 218
    113e:	3f e0       	ldi	r19, 0x0F	; 15
    1140:	49 ec       	ldi	r20, 0xC9	; 201
    1142:	5f e3       	ldi	r21, 0x3F	; 63
    1144:	d0 78       	andi	r29, 0x80	; 128
    1146:	5d 27       	eor	r21, r29
    1148:	0e 94 e2 07 	call	0xfc4	; 0xfc4 <__addsf3x>
    114c:	df 91       	pop	r29
    114e:	0c 94 ee 09 	jmp	0x13dc	; 0x13dc <__fp_round>

00001152 <__cmpsf2>:
    1152:	0e 94 8c 09 	call	0x1318	; 0x1318 <__fp_cmp>
    1156:	08 f4       	brcc	.+2      	; 0x115a <__cmpsf2+0x8>
    1158:	81 e0       	ldi	r24, 0x01	; 1
    115a:	08 95       	ret

0000115c <__divsf3>:
    115c:	0e 94 c2 08 	call	0x1184	; 0x1184 <__divsf3x>
    1160:	0c 94 ee 09 	jmp	0x13dc	; 0x13dc <__fp_round>
    1164:	0e 94 e7 09 	call	0x13ce	; 0x13ce <__fp_pscB>
    1168:	58 f0       	brcs	.+22     	; 0x1180 <__divsf3+0x24>
    116a:	0e 94 e0 09 	call	0x13c0	; 0x13c0 <__fp_pscA>
    116e:	40 f0       	brcs	.+16     	; 0x1180 <__divsf3+0x24>
    1170:	29 f4       	brne	.+10     	; 0x117c <__divsf3+0x20>
    1172:	5f 3f       	cpi	r21, 0xFF	; 255
    1174:	29 f0       	breq	.+10     	; 0x1180 <__divsf3+0x24>
    1176:	0c 94 b0 09 	jmp	0x1360	; 0x1360 <__fp_inf>
    117a:	51 11       	cpse	r21, r1
    117c:	0c 94 22 0a 	jmp	0x1444	; 0x1444 <__fp_szero>
    1180:	0c 94 b6 09 	jmp	0x136c	; 0x136c <__fp_nan>

00001184 <__divsf3x>:
    1184:	0e 94 ff 09 	call	0x13fe	; 0x13fe <__fp_split3>
    1188:	68 f3       	brcs	.-38     	; 0x1164 <__divsf3+0x8>

0000118a <__divsf3_pse>:
    118a:	99 23       	and	r25, r25
    118c:	b1 f3       	breq	.-20     	; 0x117a <__divsf3+0x1e>
    118e:	55 23       	and	r21, r21
    1190:	91 f3       	breq	.-28     	; 0x1176 <__divsf3+0x1a>
    1192:	95 1b       	sub	r25, r21
    1194:	55 0b       	sbc	r21, r21
    1196:	bb 27       	eor	r27, r27
    1198:	aa 27       	eor	r26, r26
    119a:	62 17       	cp	r22, r18
    119c:	73 07       	cpc	r23, r19
    119e:	84 07       	cpc	r24, r20
    11a0:	38 f0       	brcs	.+14     	; 0x11b0 <__divsf3_pse+0x26>
    11a2:	9f 5f       	subi	r25, 0xFF	; 255
    11a4:	5f 4f       	sbci	r21, 0xFF	; 255
    11a6:	22 0f       	add	r18, r18
    11a8:	33 1f       	adc	r19, r19
    11aa:	44 1f       	adc	r20, r20
    11ac:	aa 1f       	adc	r26, r26
    11ae:	a9 f3       	breq	.-22     	; 0x119a <__divsf3_pse+0x10>
    11b0:	35 d0       	rcall	.+106    	; 0x121c <__divsf3_pse+0x92>
    11b2:	0e 2e       	mov	r0, r30
    11b4:	3a f0       	brmi	.+14     	; 0x11c4 <__divsf3_pse+0x3a>
    11b6:	e0 e8       	ldi	r30, 0x80	; 128
    11b8:	32 d0       	rcall	.+100    	; 0x121e <__divsf3_pse+0x94>
    11ba:	91 50       	subi	r25, 0x01	; 1
    11bc:	50 40       	sbci	r21, 0x00	; 0
    11be:	e6 95       	lsr	r30
    11c0:	00 1c       	adc	r0, r0
    11c2:	ca f7       	brpl	.-14     	; 0x11b6 <__divsf3_pse+0x2c>
    11c4:	2b d0       	rcall	.+86     	; 0x121c <__divsf3_pse+0x92>
    11c6:	fe 2f       	mov	r31, r30
    11c8:	29 d0       	rcall	.+82     	; 0x121c <__divsf3_pse+0x92>
    11ca:	66 0f       	add	r22, r22
    11cc:	77 1f       	adc	r23, r23
    11ce:	88 1f       	adc	r24, r24
    11d0:	bb 1f       	adc	r27, r27
    11d2:	26 17       	cp	r18, r22
    11d4:	37 07       	cpc	r19, r23
    11d6:	48 07       	cpc	r20, r24
    11d8:	ab 07       	cpc	r26, r27
    11da:	b0 e8       	ldi	r27, 0x80	; 128
    11dc:	09 f0       	breq	.+2      	; 0x11e0 <__divsf3_pse+0x56>
    11de:	bb 0b       	sbc	r27, r27
    11e0:	80 2d       	mov	r24, r0
    11e2:	bf 01       	movw	r22, r30
    11e4:	ff 27       	eor	r31, r31
    11e6:	93 58       	subi	r25, 0x83	; 131
    11e8:	5f 4f       	sbci	r21, 0xFF	; 255
    11ea:	3a f0       	brmi	.+14     	; 0x11fa <__divsf3_pse+0x70>
    11ec:	9e 3f       	cpi	r25, 0xFE	; 254
    11ee:	51 05       	cpc	r21, r1
    11f0:	78 f0       	brcs	.+30     	; 0x1210 <__divsf3_pse+0x86>
    11f2:	0c 94 b0 09 	jmp	0x1360	; 0x1360 <__fp_inf>
    11f6:	0c 94 22 0a 	jmp	0x1444	; 0x1444 <__fp_szero>
    11fa:	5f 3f       	cpi	r21, 0xFF	; 255
    11fc:	e4 f3       	brlt	.-8      	; 0x11f6 <__divsf3_pse+0x6c>
    11fe:	98 3e       	cpi	r25, 0xE8	; 232
    1200:	d4 f3       	brlt	.-12     	; 0x11f6 <__divsf3_pse+0x6c>
    1202:	86 95       	lsr	r24
    1204:	77 95       	ror	r23
    1206:	67 95       	ror	r22
    1208:	b7 95       	ror	r27
    120a:	f7 95       	ror	r31
    120c:	9f 5f       	subi	r25, 0xFF	; 255
    120e:	c9 f7       	brne	.-14     	; 0x1202 <__divsf3_pse+0x78>
    1210:	88 0f       	add	r24, r24
    1212:	91 1d       	adc	r25, r1
    1214:	96 95       	lsr	r25
    1216:	87 95       	ror	r24
    1218:	97 f9       	bld	r25, 7
    121a:	08 95       	ret
    121c:	e1 e0       	ldi	r30, 0x01	; 1
    121e:	66 0f       	add	r22, r22
    1220:	77 1f       	adc	r23, r23
    1222:	88 1f       	adc	r24, r24
    1224:	bb 1f       	adc	r27, r27
    1226:	62 17       	cp	r22, r18
    1228:	73 07       	cpc	r23, r19
    122a:	84 07       	cpc	r24, r20
    122c:	ba 07       	cpc	r27, r26
    122e:	20 f0       	brcs	.+8      	; 0x1238 <__divsf3_pse+0xae>
    1230:	62 1b       	sub	r22, r18
    1232:	73 0b       	sbc	r23, r19
    1234:	84 0b       	sbc	r24, r20
    1236:	ba 0b       	sbc	r27, r26
    1238:	ee 1f       	adc	r30, r30
    123a:	88 f7       	brcc	.-30     	; 0x121e <__divsf3_pse+0x94>
    123c:	e0 95       	com	r30
    123e:	08 95       	ret

00001240 <__fixunssfsi>:
    1240:	0e 94 07 0a 	call	0x140e	; 0x140e <__fp_splitA>
    1244:	88 f0       	brcs	.+34     	; 0x1268 <__fixunssfsi+0x28>
    1246:	9f 57       	subi	r25, 0x7F	; 127
    1248:	98 f0       	brcs	.+38     	; 0x1270 <__fixunssfsi+0x30>
    124a:	b9 2f       	mov	r27, r25
    124c:	99 27       	eor	r25, r25
    124e:	b7 51       	subi	r27, 0x17	; 23
    1250:	b0 f0       	brcs	.+44     	; 0x127e <__fixunssfsi+0x3e>
    1252:	e1 f0       	breq	.+56     	; 0x128c <__fixunssfsi+0x4c>
    1254:	66 0f       	add	r22, r22
    1256:	77 1f       	adc	r23, r23
    1258:	88 1f       	adc	r24, r24
    125a:	99 1f       	adc	r25, r25
    125c:	1a f0       	brmi	.+6      	; 0x1264 <__fixunssfsi+0x24>
    125e:	ba 95       	dec	r27
    1260:	c9 f7       	brne	.-14     	; 0x1254 <__fixunssfsi+0x14>
    1262:	14 c0       	rjmp	.+40     	; 0x128c <__fixunssfsi+0x4c>
    1264:	b1 30       	cpi	r27, 0x01	; 1
    1266:	91 f0       	breq	.+36     	; 0x128c <__fixunssfsi+0x4c>
    1268:	0e 94 21 0a 	call	0x1442	; 0x1442 <__fp_zero>
    126c:	b1 e0       	ldi	r27, 0x01	; 1
    126e:	08 95       	ret
    1270:	0c 94 21 0a 	jmp	0x1442	; 0x1442 <__fp_zero>
    1274:	67 2f       	mov	r22, r23
    1276:	78 2f       	mov	r23, r24
    1278:	88 27       	eor	r24, r24
    127a:	b8 5f       	subi	r27, 0xF8	; 248
    127c:	39 f0       	breq	.+14     	; 0x128c <__fixunssfsi+0x4c>
    127e:	b9 3f       	cpi	r27, 0xF9	; 249
    1280:	cc f3       	brlt	.-14     	; 0x1274 <__fixunssfsi+0x34>
    1282:	86 95       	lsr	r24
    1284:	77 95       	ror	r23
    1286:	67 95       	ror	r22
    1288:	b3 95       	inc	r27
    128a:	d9 f7       	brne	.-10     	; 0x1282 <__fixunssfsi+0x42>
    128c:	3e f4       	brtc	.+14     	; 0x129c <__fixunssfsi+0x5c>
    128e:	90 95       	com	r25
    1290:	80 95       	com	r24
    1292:	70 95       	com	r23
    1294:	61 95       	neg	r22
    1296:	7f 4f       	sbci	r23, 0xFF	; 255
    1298:	8f 4f       	sbci	r24, 0xFF	; 255
    129a:	9f 4f       	sbci	r25, 0xFF	; 255
    129c:	08 95       	ret

0000129e <__floatunsisf>:
    129e:	e8 94       	clt
    12a0:	09 c0       	rjmp	.+18     	; 0x12b4 <__floatsisf+0x12>

000012a2 <__floatsisf>:
    12a2:	97 fb       	bst	r25, 7
    12a4:	3e f4       	brtc	.+14     	; 0x12b4 <__floatsisf+0x12>
    12a6:	90 95       	com	r25
    12a8:	80 95       	com	r24
    12aa:	70 95       	com	r23
    12ac:	61 95       	neg	r22
    12ae:	7f 4f       	sbci	r23, 0xFF	; 255
    12b0:	8f 4f       	sbci	r24, 0xFF	; 255
    12b2:	9f 4f       	sbci	r25, 0xFF	; 255
    12b4:	99 23       	and	r25, r25
    12b6:	a9 f0       	breq	.+42     	; 0x12e2 <__floatsisf+0x40>
    12b8:	f9 2f       	mov	r31, r25
    12ba:	96 e9       	ldi	r25, 0x96	; 150
    12bc:	bb 27       	eor	r27, r27
    12be:	93 95       	inc	r25
    12c0:	f6 95       	lsr	r31
    12c2:	87 95       	ror	r24
    12c4:	77 95       	ror	r23
    12c6:	67 95       	ror	r22
    12c8:	b7 95       	ror	r27
    12ca:	f1 11       	cpse	r31, r1
    12cc:	f8 cf       	rjmp	.-16     	; 0x12be <__floatsisf+0x1c>
    12ce:	fa f4       	brpl	.+62     	; 0x130e <__floatsisf+0x6c>
    12d0:	bb 0f       	add	r27, r27
    12d2:	11 f4       	brne	.+4      	; 0x12d8 <__floatsisf+0x36>
    12d4:	60 ff       	sbrs	r22, 0
    12d6:	1b c0       	rjmp	.+54     	; 0x130e <__floatsisf+0x6c>
    12d8:	6f 5f       	subi	r22, 0xFF	; 255
    12da:	7f 4f       	sbci	r23, 0xFF	; 255
    12dc:	8f 4f       	sbci	r24, 0xFF	; 255
    12de:	9f 4f       	sbci	r25, 0xFF	; 255
    12e0:	16 c0       	rjmp	.+44     	; 0x130e <__floatsisf+0x6c>
    12e2:	88 23       	and	r24, r24
    12e4:	11 f0       	breq	.+4      	; 0x12ea <__floatsisf+0x48>
    12e6:	96 e9       	ldi	r25, 0x96	; 150
    12e8:	11 c0       	rjmp	.+34     	; 0x130c <__floatsisf+0x6a>
    12ea:	77 23       	and	r23, r23
    12ec:	21 f0       	breq	.+8      	; 0x12f6 <__floatsisf+0x54>
    12ee:	9e e8       	ldi	r25, 0x8E	; 142
    12f0:	87 2f       	mov	r24, r23
    12f2:	76 2f       	mov	r23, r22
    12f4:	05 c0       	rjmp	.+10     	; 0x1300 <__floatsisf+0x5e>
    12f6:	66 23       	and	r22, r22
    12f8:	71 f0       	breq	.+28     	; 0x1316 <__floatsisf+0x74>
    12fa:	96 e8       	ldi	r25, 0x86	; 134
    12fc:	86 2f       	mov	r24, r22
    12fe:	70 e0       	ldi	r23, 0x00	; 0
    1300:	60 e0       	ldi	r22, 0x00	; 0
    1302:	2a f0       	brmi	.+10     	; 0x130e <__floatsisf+0x6c>
    1304:	9a 95       	dec	r25
    1306:	66 0f       	add	r22, r22
    1308:	77 1f       	adc	r23, r23
    130a:	88 1f       	adc	r24, r24
    130c:	da f7       	brpl	.-10     	; 0x1304 <__floatsisf+0x62>
    130e:	88 0f       	add	r24, r24
    1310:	96 95       	lsr	r25
    1312:	87 95       	ror	r24
    1314:	97 f9       	bld	r25, 7
    1316:	08 95       	ret

00001318 <__fp_cmp>:
    1318:	99 0f       	add	r25, r25
    131a:	00 08       	sbc	r0, r0
    131c:	55 0f       	add	r21, r21
    131e:	aa 0b       	sbc	r26, r26
    1320:	e0 e8       	ldi	r30, 0x80	; 128
    1322:	fe ef       	ldi	r31, 0xFE	; 254
    1324:	16 16       	cp	r1, r22
    1326:	17 06       	cpc	r1, r23
    1328:	e8 07       	cpc	r30, r24
    132a:	f9 07       	cpc	r31, r25
    132c:	c0 f0       	brcs	.+48     	; 0x135e <__fp_cmp+0x46>
    132e:	12 16       	cp	r1, r18
    1330:	13 06       	cpc	r1, r19
    1332:	e4 07       	cpc	r30, r20
    1334:	f5 07       	cpc	r31, r21
    1336:	98 f0       	brcs	.+38     	; 0x135e <__fp_cmp+0x46>
    1338:	62 1b       	sub	r22, r18
    133a:	73 0b       	sbc	r23, r19
    133c:	84 0b       	sbc	r24, r20
    133e:	95 0b       	sbc	r25, r21
    1340:	39 f4       	brne	.+14     	; 0x1350 <__fp_cmp+0x38>
    1342:	0a 26       	eor	r0, r26
    1344:	61 f0       	breq	.+24     	; 0x135e <__fp_cmp+0x46>
    1346:	23 2b       	or	r18, r19
    1348:	24 2b       	or	r18, r20
    134a:	25 2b       	or	r18, r21
    134c:	21 f4       	brne	.+8      	; 0x1356 <__fp_cmp+0x3e>
    134e:	08 95       	ret
    1350:	0a 26       	eor	r0, r26
    1352:	09 f4       	brne	.+2      	; 0x1356 <__fp_cmp+0x3e>
    1354:	a1 40       	sbci	r26, 0x01	; 1
    1356:	a6 95       	lsr	r26
    1358:	8f ef       	ldi	r24, 0xFF	; 255
    135a:	81 1d       	adc	r24, r1
    135c:	81 1d       	adc	r24, r1
    135e:	08 95       	ret

00001360 <__fp_inf>:
    1360:	97 f9       	bld	r25, 7
    1362:	9f 67       	ori	r25, 0x7F	; 127
    1364:	80 e8       	ldi	r24, 0x80	; 128
    1366:	70 e0       	ldi	r23, 0x00	; 0
    1368:	60 e0       	ldi	r22, 0x00	; 0
    136a:	08 95       	ret

0000136c <__fp_nan>:
    136c:	9f ef       	ldi	r25, 0xFF	; 255
    136e:	80 ec       	ldi	r24, 0xC0	; 192
    1370:	08 95       	ret

00001372 <__fp_powser>:
    1372:	df 93       	push	r29
    1374:	cf 93       	push	r28
    1376:	1f 93       	push	r17
    1378:	0f 93       	push	r16
    137a:	ff 92       	push	r15
    137c:	ef 92       	push	r14
    137e:	df 92       	push	r13
    1380:	7b 01       	movw	r14, r22
    1382:	8c 01       	movw	r16, r24
    1384:	68 94       	set
    1386:	06 c0       	rjmp	.+12     	; 0x1394 <__fp_powser+0x22>
    1388:	da 2e       	mov	r13, r26
    138a:	ef 01       	movw	r28, r30
    138c:	0e 94 48 0a 	call	0x1490	; 0x1490 <__mulsf3x>
    1390:	fe 01       	movw	r30, r28
    1392:	e8 94       	clt
    1394:	a5 91       	lpm	r26, Z+
    1396:	25 91       	lpm	r18, Z+
    1398:	35 91       	lpm	r19, Z+
    139a:	45 91       	lpm	r20, Z+
    139c:	55 91       	lpm	r21, Z+
    139e:	a6 f3       	brts	.-24     	; 0x1388 <__fp_powser+0x16>
    13a0:	ef 01       	movw	r28, r30
    13a2:	0e 94 e2 07 	call	0xfc4	; 0xfc4 <__addsf3x>
    13a6:	fe 01       	movw	r30, r28
    13a8:	97 01       	movw	r18, r14
    13aa:	a8 01       	movw	r20, r16
    13ac:	da 94       	dec	r13
    13ae:	69 f7       	brne	.-38     	; 0x138a <__fp_powser+0x18>
    13b0:	df 90       	pop	r13
    13b2:	ef 90       	pop	r14
    13b4:	ff 90       	pop	r15
    13b6:	0f 91       	pop	r16
    13b8:	1f 91       	pop	r17
    13ba:	cf 91       	pop	r28
    13bc:	df 91       	pop	r29
    13be:	08 95       	ret

000013c0 <__fp_pscA>:
    13c0:	00 24       	eor	r0, r0
    13c2:	0a 94       	dec	r0
    13c4:	16 16       	cp	r1, r22
    13c6:	17 06       	cpc	r1, r23
    13c8:	18 06       	cpc	r1, r24
    13ca:	09 06       	cpc	r0, r25
    13cc:	08 95       	ret

000013ce <__fp_pscB>:
    13ce:	00 24       	eor	r0, r0
    13d0:	0a 94       	dec	r0
    13d2:	12 16       	cp	r1, r18
    13d4:	13 06       	cpc	r1, r19
    13d6:	14 06       	cpc	r1, r20
    13d8:	05 06       	cpc	r0, r21
    13da:	08 95       	ret

000013dc <__fp_round>:
    13dc:	09 2e       	mov	r0, r25
    13de:	03 94       	inc	r0
    13e0:	00 0c       	add	r0, r0
    13e2:	11 f4       	brne	.+4      	; 0x13e8 <__fp_round+0xc>
    13e4:	88 23       	and	r24, r24
    13e6:	52 f0       	brmi	.+20     	; 0x13fc <__fp_round+0x20>
    13e8:	bb 0f       	add	r27, r27
    13ea:	40 f4       	brcc	.+16     	; 0x13fc <__fp_round+0x20>
    13ec:	bf 2b       	or	r27, r31
    13ee:	11 f4       	brne	.+4      	; 0x13f4 <__fp_round+0x18>
    13f0:	60 ff       	sbrs	r22, 0
    13f2:	04 c0       	rjmp	.+8      	; 0x13fc <__fp_round+0x20>
    13f4:	6f 5f       	subi	r22, 0xFF	; 255
    13f6:	7f 4f       	sbci	r23, 0xFF	; 255
    13f8:	8f 4f       	sbci	r24, 0xFF	; 255
    13fa:	9f 4f       	sbci	r25, 0xFF	; 255
    13fc:	08 95       	ret

000013fe <__fp_split3>:
    13fe:	57 fd       	sbrc	r21, 7
    1400:	90 58       	subi	r25, 0x80	; 128
    1402:	44 0f       	add	r20, r20
    1404:	55 1f       	adc	r21, r21
    1406:	59 f0       	breq	.+22     	; 0x141e <__fp_splitA+0x10>
    1408:	5f 3f       	cpi	r21, 0xFF	; 255
    140a:	71 f0       	breq	.+28     	; 0x1428 <__fp_splitA+0x1a>
    140c:	47 95       	ror	r20

0000140e <__fp_splitA>:
    140e:	88 0f       	add	r24, r24
    1410:	97 fb       	bst	r25, 7
    1412:	99 1f       	adc	r25, r25
    1414:	61 f0       	breq	.+24     	; 0x142e <__fp_splitA+0x20>
    1416:	9f 3f       	cpi	r25, 0xFF	; 255
    1418:	79 f0       	breq	.+30     	; 0x1438 <__fp_splitA+0x2a>
    141a:	87 95       	ror	r24
    141c:	08 95       	ret
    141e:	12 16       	cp	r1, r18
    1420:	13 06       	cpc	r1, r19
    1422:	14 06       	cpc	r1, r20
    1424:	55 1f       	adc	r21, r21
    1426:	f2 cf       	rjmp	.-28     	; 0x140c <__fp_split3+0xe>
    1428:	46 95       	lsr	r20
    142a:	f1 df       	rcall	.-30     	; 0x140e <__fp_splitA>
    142c:	08 c0       	rjmp	.+16     	; 0x143e <__fp_splitA+0x30>
    142e:	16 16       	cp	r1, r22
    1430:	17 06       	cpc	r1, r23
    1432:	18 06       	cpc	r1, r24
    1434:	99 1f       	adc	r25, r25
    1436:	f1 cf       	rjmp	.-30     	; 0x141a <__fp_splitA+0xc>
    1438:	86 95       	lsr	r24
    143a:	71 05       	cpc	r23, r1
    143c:	61 05       	cpc	r22, r1
    143e:	08 94       	sec
    1440:	08 95       	ret

00001442 <__fp_zero>:
    1442:	e8 94       	clt

00001444 <__fp_szero>:
    1444:	bb 27       	eor	r27, r27
    1446:	66 27       	eor	r22, r22
    1448:	77 27       	eor	r23, r23
    144a:	cb 01       	movw	r24, r22
    144c:	97 f9       	bld	r25, 7
    144e:	08 95       	ret

00001450 <__gesf2>:
    1450:	0e 94 8c 09 	call	0x1318	; 0x1318 <__fp_cmp>
    1454:	08 f4       	brcc	.+2      	; 0x1458 <__gesf2+0x8>
    1456:	8f ef       	ldi	r24, 0xFF	; 255
    1458:	08 95       	ret

0000145a <inverse>:
    145a:	9b 01       	movw	r18, r22
    145c:	ac 01       	movw	r20, r24
    145e:	60 e0       	ldi	r22, 0x00	; 0
    1460:	70 e0       	ldi	r23, 0x00	; 0
    1462:	80 e8       	ldi	r24, 0x80	; 128
    1464:	9f e3       	ldi	r25, 0x3F	; 63
    1466:	0c 94 ae 08 	jmp	0x115c	; 0x115c <__divsf3>

0000146a <__mulsf3>:
    146a:	0e 94 48 0a 	call	0x1490	; 0x1490 <__mulsf3x>
    146e:	0c 94 ee 09 	jmp	0x13dc	; 0x13dc <__fp_round>
    1472:	0e 94 e0 09 	call	0x13c0	; 0x13c0 <__fp_pscA>
    1476:	38 f0       	brcs	.+14     	; 0x1486 <__mulsf3+0x1c>
    1478:	0e 94 e7 09 	call	0x13ce	; 0x13ce <__fp_pscB>
    147c:	20 f0       	brcs	.+8      	; 0x1486 <__mulsf3+0x1c>
    147e:	95 23       	and	r25, r21
    1480:	11 f0       	breq	.+4      	; 0x1486 <__mulsf3+0x1c>
    1482:	0c 94 b0 09 	jmp	0x1360	; 0x1360 <__fp_inf>
    1486:	0c 94 b6 09 	jmp	0x136c	; 0x136c <__fp_nan>
    148a:	11 24       	eor	r1, r1
    148c:	0c 94 22 0a 	jmp	0x1444	; 0x1444 <__fp_szero>

00001490 <__mulsf3x>:
    1490:	0e 94 ff 09 	call	0x13fe	; 0x13fe <__fp_split3>
    1494:	70 f3       	brcs	.-36     	; 0x1472 <__mulsf3+0x8>

00001496 <__mulsf3_pse>:
    1496:	95 9f       	mul	r25, r21
    1498:	c1 f3       	breq	.-16     	; 0x148a <__mulsf3+0x20>
    149a:	95 0f       	add	r25, r21
    149c:	50 e0       	ldi	r21, 0x00	; 0
    149e:	55 1f       	adc	r21, r21
    14a0:	62 9f       	mul	r22, r18
    14a2:	f0 01       	movw	r30, r0
    14a4:	72 9f       	mul	r23, r18
    14a6:	bb 27       	eor	r27, r27
    14a8:	f0 0d       	add	r31, r0
    14aa:	b1 1d       	adc	r27, r1
    14ac:	63 9f       	mul	r22, r19
    14ae:	aa 27       	eor	r26, r26
    14b0:	f0 0d       	add	r31, r0
    14b2:	b1 1d       	adc	r27, r1
    14b4:	aa 1f       	adc	r26, r26
    14b6:	64 9f       	mul	r22, r20
    14b8:	66 27       	eor	r22, r22
    14ba:	b0 0d       	add	r27, r0
    14bc:	a1 1d       	adc	r26, r1
    14be:	66 1f       	adc	r22, r22
    14c0:	82 9f       	mul	r24, r18
    14c2:	22 27       	eor	r18, r18
    14c4:	b0 0d       	add	r27, r0
    14c6:	a1 1d       	adc	r26, r1
    14c8:	62 1f       	adc	r22, r18
    14ca:	73 9f       	mul	r23, r19
    14cc:	b0 0d       	add	r27, r0
    14ce:	a1 1d       	adc	r26, r1
    14d0:	62 1f       	adc	r22, r18
    14d2:	83 9f       	mul	r24, r19
    14d4:	a0 0d       	add	r26, r0
    14d6:	61 1d       	adc	r22, r1
    14d8:	22 1f       	adc	r18, r18
    14da:	74 9f       	mul	r23, r20
    14dc:	33 27       	eor	r19, r19
    14de:	a0 0d       	add	r26, r0
    14e0:	61 1d       	adc	r22, r1
    14e2:	23 1f       	adc	r18, r19
    14e4:	84 9f       	mul	r24, r20
    14e6:	60 0d       	add	r22, r0
    14e8:	21 1d       	adc	r18, r1
    14ea:	82 2f       	mov	r24, r18
    14ec:	76 2f       	mov	r23, r22
    14ee:	6a 2f       	mov	r22, r26
    14f0:	11 24       	eor	r1, r1
    14f2:	9f 57       	subi	r25, 0x7F	; 127
    14f4:	50 40       	sbci	r21, 0x00	; 0
    14f6:	9a f0       	brmi	.+38     	; 0x151e <__mulsf3_pse+0x88>
    14f8:	f1 f0       	breq	.+60     	; 0x1536 <__mulsf3_pse+0xa0>
    14fa:	88 23       	and	r24, r24
    14fc:	4a f0       	brmi	.+18     	; 0x1510 <__mulsf3_pse+0x7a>
    14fe:	ee 0f       	add	r30, r30
    1500:	ff 1f       	adc	r31, r31
    1502:	bb 1f       	adc	r27, r27
    1504:	66 1f       	adc	r22, r22
    1506:	77 1f       	adc	r23, r23
    1508:	88 1f       	adc	r24, r24
    150a:	91 50       	subi	r25, 0x01	; 1
    150c:	50 40       	sbci	r21, 0x00	; 0
    150e:	a9 f7       	brne	.-22     	; 0x14fa <__mulsf3_pse+0x64>
    1510:	9e 3f       	cpi	r25, 0xFE	; 254
    1512:	51 05       	cpc	r21, r1
    1514:	80 f0       	brcs	.+32     	; 0x1536 <__mulsf3_pse+0xa0>
    1516:	0c 94 b0 09 	jmp	0x1360	; 0x1360 <__fp_inf>
    151a:	0c 94 22 0a 	jmp	0x1444	; 0x1444 <__fp_szero>
    151e:	5f 3f       	cpi	r21, 0xFF	; 255
    1520:	e4 f3       	brlt	.-8      	; 0x151a <__mulsf3_pse+0x84>
    1522:	98 3e       	cpi	r25, 0xE8	; 232
    1524:	d4 f3       	brlt	.-12     	; 0x151a <__mulsf3_pse+0x84>
    1526:	86 95       	lsr	r24
    1528:	77 95       	ror	r23
    152a:	67 95       	ror	r22
    152c:	b7 95       	ror	r27
    152e:	f7 95       	ror	r31
    1530:	e7 95       	ror	r30
    1532:	9f 5f       	subi	r25, 0xFF	; 255
    1534:	c1 f7       	brne	.-16     	; 0x1526 <__mulsf3_pse+0x90>
    1536:	fe 2b       	or	r31, r30
    1538:	88 0f       	add	r24, r24
    153a:	91 1d       	adc	r25, r1
    153c:	96 95       	lsr	r25
    153e:	87 95       	ror	r24
    1540:	97 f9       	bld	r25, 7
    1542:	08 95       	ret

00001544 <square>:
    1544:	9b 01       	movw	r18, r22
    1546:	ac 01       	movw	r20, r24
    1548:	0c 94 35 0a 	jmp	0x146a	; 0x146a <__mulsf3>

0000154c <vfprintf>:
    154c:	a0 e1       	ldi	r26, 0x10	; 16
    154e:	b0 e0       	ldi	r27, 0x00	; 0
    1550:	ec ea       	ldi	r30, 0xAC	; 172
    1552:	fa e0       	ldi	r31, 0x0A	; 10
    1554:	0c 94 23 0e 	jmp	0x1c46	; 0x1c46 <__prologue_saves__>
    1558:	7c 01       	movw	r14, r24
    155a:	1b 01       	movw	r2, r22
    155c:	6a 01       	movw	r12, r20
    155e:	fc 01       	movw	r30, r24
    1560:	17 82       	std	Z+7, r1	; 0x07
    1562:	16 82       	std	Z+6, r1	; 0x06
    1564:	83 81       	ldd	r24, Z+3	; 0x03
    1566:	81 ff       	sbrs	r24, 1
    1568:	44 c3       	rjmp	.+1672   	; 0x1bf2 <vfprintf+0x6a6>
    156a:	9e 01       	movw	r18, r28
    156c:	2f 5f       	subi	r18, 0xFF	; 255
    156e:	3f 4f       	sbci	r19, 0xFF	; 255
    1570:	39 01       	movw	r6, r18
    1572:	f7 01       	movw	r30, r14
    1574:	93 81       	ldd	r25, Z+3	; 0x03
    1576:	f1 01       	movw	r30, r2
    1578:	93 fd       	sbrc	r25, 3
    157a:	85 91       	lpm	r24, Z+
    157c:	93 ff       	sbrs	r25, 3
    157e:	81 91       	ld	r24, Z+
    1580:	1f 01       	movw	r2, r30
    1582:	88 23       	and	r24, r24
    1584:	09 f4       	brne	.+2      	; 0x1588 <vfprintf+0x3c>
    1586:	31 c3       	rjmp	.+1634   	; 0x1bea <vfprintf+0x69e>
    1588:	85 32       	cpi	r24, 0x25	; 37
    158a:	39 f4       	brne	.+14     	; 0x159a <vfprintf+0x4e>
    158c:	93 fd       	sbrc	r25, 3
    158e:	85 91       	lpm	r24, Z+
    1590:	93 ff       	sbrs	r25, 3
    1592:	81 91       	ld	r24, Z+
    1594:	1f 01       	movw	r2, r30
    1596:	85 32       	cpi	r24, 0x25	; 37
    1598:	39 f4       	brne	.+14     	; 0x15a8 <vfprintf+0x5c>
    159a:	b7 01       	movw	r22, r14
    159c:	90 e0       	ldi	r25, 0x00	; 0
    159e:	0e 94 93 0f 	call	0x1f26	; 0x1f26 <fputc>
    15a2:	56 01       	movw	r10, r12
    15a4:	65 01       	movw	r12, r10
    15a6:	e5 cf       	rjmp	.-54     	; 0x1572 <vfprintf+0x26>
    15a8:	10 e0       	ldi	r17, 0x00	; 0
    15aa:	51 2c       	mov	r5, r1
    15ac:	91 2c       	mov	r9, r1
    15ae:	ff e1       	ldi	r31, 0x1F	; 31
    15b0:	f9 15       	cp	r31, r9
    15b2:	d8 f0       	brcs	.+54     	; 0x15ea <vfprintf+0x9e>
    15b4:	8b 32       	cpi	r24, 0x2B	; 43
    15b6:	79 f0       	breq	.+30     	; 0x15d6 <vfprintf+0x8a>
    15b8:	38 f4       	brcc	.+14     	; 0x15c8 <vfprintf+0x7c>
    15ba:	80 32       	cpi	r24, 0x20	; 32
    15bc:	79 f0       	breq	.+30     	; 0x15dc <vfprintf+0x90>
    15be:	83 32       	cpi	r24, 0x23	; 35
    15c0:	a1 f4       	brne	.+40     	; 0x15ea <vfprintf+0x9e>
    15c2:	f9 2d       	mov	r31, r9
    15c4:	f0 61       	ori	r31, 0x10	; 16
    15c6:	2e c0       	rjmp	.+92     	; 0x1624 <vfprintf+0xd8>
    15c8:	8d 32       	cpi	r24, 0x2D	; 45
    15ca:	61 f0       	breq	.+24     	; 0x15e4 <vfprintf+0x98>
    15cc:	80 33       	cpi	r24, 0x30	; 48
    15ce:	69 f4       	brne	.+26     	; 0x15ea <vfprintf+0x9e>
    15d0:	29 2d       	mov	r18, r9
    15d2:	21 60       	ori	r18, 0x01	; 1
    15d4:	2d c0       	rjmp	.+90     	; 0x1630 <vfprintf+0xe4>
    15d6:	39 2d       	mov	r19, r9
    15d8:	32 60       	ori	r19, 0x02	; 2
    15da:	93 2e       	mov	r9, r19
    15dc:	89 2d       	mov	r24, r9
    15de:	84 60       	ori	r24, 0x04	; 4
    15e0:	98 2e       	mov	r9, r24
    15e2:	2a c0       	rjmp	.+84     	; 0x1638 <vfprintf+0xec>
    15e4:	e9 2d       	mov	r30, r9
    15e6:	e8 60       	ori	r30, 0x08	; 8
    15e8:	15 c0       	rjmp	.+42     	; 0x1614 <vfprintf+0xc8>
    15ea:	97 fc       	sbrc	r9, 7
    15ec:	2d c0       	rjmp	.+90     	; 0x1648 <vfprintf+0xfc>
    15ee:	20 ed       	ldi	r18, 0xD0	; 208
    15f0:	28 0f       	add	r18, r24
    15f2:	2a 30       	cpi	r18, 0x0A	; 10
    15f4:	88 f4       	brcc	.+34     	; 0x1618 <vfprintf+0xcc>
    15f6:	96 fe       	sbrs	r9, 6
    15f8:	06 c0       	rjmp	.+12     	; 0x1606 <vfprintf+0xba>
    15fa:	3a e0       	ldi	r19, 0x0A	; 10
    15fc:	13 9f       	mul	r17, r19
    15fe:	20 0d       	add	r18, r0
    1600:	11 24       	eor	r1, r1
    1602:	12 2f       	mov	r17, r18
    1604:	19 c0       	rjmp	.+50     	; 0x1638 <vfprintf+0xec>
    1606:	8a e0       	ldi	r24, 0x0A	; 10
    1608:	58 9e       	mul	r5, r24
    160a:	20 0d       	add	r18, r0
    160c:	11 24       	eor	r1, r1
    160e:	52 2e       	mov	r5, r18
    1610:	e9 2d       	mov	r30, r9
    1612:	e0 62       	ori	r30, 0x20	; 32
    1614:	9e 2e       	mov	r9, r30
    1616:	10 c0       	rjmp	.+32     	; 0x1638 <vfprintf+0xec>
    1618:	8e 32       	cpi	r24, 0x2E	; 46
    161a:	31 f4       	brne	.+12     	; 0x1628 <vfprintf+0xdc>
    161c:	96 fc       	sbrc	r9, 6
    161e:	e5 c2       	rjmp	.+1482   	; 0x1bea <vfprintf+0x69e>
    1620:	f9 2d       	mov	r31, r9
    1622:	f0 64       	ori	r31, 0x40	; 64
    1624:	9f 2e       	mov	r9, r31
    1626:	08 c0       	rjmp	.+16     	; 0x1638 <vfprintf+0xec>
    1628:	8c 36       	cpi	r24, 0x6C	; 108
    162a:	21 f4       	brne	.+8      	; 0x1634 <vfprintf+0xe8>
    162c:	29 2d       	mov	r18, r9
    162e:	20 68       	ori	r18, 0x80	; 128
    1630:	92 2e       	mov	r9, r18
    1632:	02 c0       	rjmp	.+4      	; 0x1638 <vfprintf+0xec>
    1634:	88 36       	cpi	r24, 0x68	; 104
    1636:	41 f4       	brne	.+16     	; 0x1648 <vfprintf+0xfc>
    1638:	f1 01       	movw	r30, r2
    163a:	93 fd       	sbrc	r25, 3
    163c:	85 91       	lpm	r24, Z+
    163e:	93 ff       	sbrs	r25, 3
    1640:	81 91       	ld	r24, Z+
    1642:	1f 01       	movw	r2, r30
    1644:	81 11       	cpse	r24, r1
    1646:	b3 cf       	rjmp	.-154    	; 0x15ae <vfprintf+0x62>
    1648:	9b eb       	ldi	r25, 0xBB	; 187
    164a:	98 0f       	add	r25, r24
    164c:	93 30       	cpi	r25, 0x03	; 3
    164e:	20 f4       	brcc	.+8      	; 0x1658 <vfprintf+0x10c>
    1650:	99 2d       	mov	r25, r9
    1652:	90 61       	ori	r25, 0x10	; 16
    1654:	80 5e       	subi	r24, 0xE0	; 224
    1656:	07 c0       	rjmp	.+14     	; 0x1666 <vfprintf+0x11a>
    1658:	9b e9       	ldi	r25, 0x9B	; 155
    165a:	98 0f       	add	r25, r24
    165c:	93 30       	cpi	r25, 0x03	; 3
    165e:	08 f0       	brcs	.+2      	; 0x1662 <vfprintf+0x116>
    1660:	66 c1       	rjmp	.+716    	; 0x192e <vfprintf+0x3e2>
    1662:	99 2d       	mov	r25, r9
    1664:	9f 7e       	andi	r25, 0xEF	; 239
    1666:	96 ff       	sbrs	r25, 6
    1668:	16 e0       	ldi	r17, 0x06	; 6
    166a:	9f 73       	andi	r25, 0x3F	; 63
    166c:	99 2e       	mov	r9, r25
    166e:	85 36       	cpi	r24, 0x65	; 101
    1670:	19 f4       	brne	.+6      	; 0x1678 <vfprintf+0x12c>
    1672:	90 64       	ori	r25, 0x40	; 64
    1674:	99 2e       	mov	r9, r25
    1676:	08 c0       	rjmp	.+16     	; 0x1688 <vfprintf+0x13c>
    1678:	86 36       	cpi	r24, 0x66	; 102
    167a:	21 f4       	brne	.+8      	; 0x1684 <vfprintf+0x138>
    167c:	39 2f       	mov	r19, r25
    167e:	30 68       	ori	r19, 0x80	; 128
    1680:	93 2e       	mov	r9, r19
    1682:	02 c0       	rjmp	.+4      	; 0x1688 <vfprintf+0x13c>
    1684:	11 11       	cpse	r17, r1
    1686:	11 50       	subi	r17, 0x01	; 1
    1688:	97 fe       	sbrs	r9, 7
    168a:	07 c0       	rjmp	.+14     	; 0x169a <vfprintf+0x14e>
    168c:	1c 33       	cpi	r17, 0x3C	; 60
    168e:	50 f4       	brcc	.+20     	; 0x16a4 <vfprintf+0x158>
    1690:	44 24       	eor	r4, r4
    1692:	43 94       	inc	r4
    1694:	41 0e       	add	r4, r17
    1696:	27 e0       	ldi	r18, 0x07	; 7
    1698:	0b c0       	rjmp	.+22     	; 0x16b0 <vfprintf+0x164>
    169a:	18 30       	cpi	r17, 0x08	; 8
    169c:	38 f0       	brcs	.+14     	; 0x16ac <vfprintf+0x160>
    169e:	27 e0       	ldi	r18, 0x07	; 7
    16a0:	17 e0       	ldi	r17, 0x07	; 7
    16a2:	05 c0       	rjmp	.+10     	; 0x16ae <vfprintf+0x162>
    16a4:	27 e0       	ldi	r18, 0x07	; 7
    16a6:	9c e3       	ldi	r25, 0x3C	; 60
    16a8:	49 2e       	mov	r4, r25
    16aa:	02 c0       	rjmp	.+4      	; 0x16b0 <vfprintf+0x164>
    16ac:	21 2f       	mov	r18, r17
    16ae:	41 2c       	mov	r4, r1
    16b0:	56 01       	movw	r10, r12
    16b2:	84 e0       	ldi	r24, 0x04	; 4
    16b4:	a8 0e       	add	r10, r24
    16b6:	b1 1c       	adc	r11, r1
    16b8:	f6 01       	movw	r30, r12
    16ba:	60 81       	ld	r22, Z
    16bc:	71 81       	ldd	r23, Z+1	; 0x01
    16be:	82 81       	ldd	r24, Z+2	; 0x02
    16c0:	93 81       	ldd	r25, Z+3	; 0x03
    16c2:	04 2d       	mov	r16, r4
    16c4:	a3 01       	movw	r20, r6
    16c6:	0e 94 5a 0e 	call	0x1cb4	; 0x1cb4 <__ftoa_engine>
    16ca:	6c 01       	movw	r12, r24
    16cc:	f9 81       	ldd	r31, Y+1	; 0x01
    16ce:	fc 87       	std	Y+12, r31	; 0x0c
    16d0:	f0 ff       	sbrs	r31, 0
    16d2:	02 c0       	rjmp	.+4      	; 0x16d8 <vfprintf+0x18c>
    16d4:	f3 ff       	sbrs	r31, 3
    16d6:	06 c0       	rjmp	.+12     	; 0x16e4 <vfprintf+0x198>
    16d8:	91 fc       	sbrc	r9, 1
    16da:	06 c0       	rjmp	.+12     	; 0x16e8 <vfprintf+0x19c>
    16dc:	92 fe       	sbrs	r9, 2
    16de:	06 c0       	rjmp	.+12     	; 0x16ec <vfprintf+0x1a0>
    16e0:	00 e2       	ldi	r16, 0x20	; 32
    16e2:	05 c0       	rjmp	.+10     	; 0x16ee <vfprintf+0x1a2>
    16e4:	0d e2       	ldi	r16, 0x2D	; 45
    16e6:	03 c0       	rjmp	.+6      	; 0x16ee <vfprintf+0x1a2>
    16e8:	0b e2       	ldi	r16, 0x2B	; 43
    16ea:	01 c0       	rjmp	.+2      	; 0x16ee <vfprintf+0x1a2>
    16ec:	00 e0       	ldi	r16, 0x00	; 0
    16ee:	8c 85       	ldd	r24, Y+12	; 0x0c
    16f0:	8c 70       	andi	r24, 0x0C	; 12
    16f2:	19 f0       	breq	.+6      	; 0x16fa <vfprintf+0x1ae>
    16f4:	01 11       	cpse	r16, r1
    16f6:	5a c2       	rjmp	.+1204   	; 0x1bac <vfprintf+0x660>
    16f8:	9b c2       	rjmp	.+1334   	; 0x1c30 <vfprintf+0x6e4>
    16fa:	97 fe       	sbrs	r9, 7
    16fc:	10 c0       	rjmp	.+32     	; 0x171e <vfprintf+0x1d2>
    16fe:	4c 0c       	add	r4, r12
    1700:	fc 85       	ldd	r31, Y+12	; 0x0c
    1702:	f4 ff       	sbrs	r31, 4
    1704:	04 c0       	rjmp	.+8      	; 0x170e <vfprintf+0x1c2>
    1706:	8a 81       	ldd	r24, Y+2	; 0x02
    1708:	81 33       	cpi	r24, 0x31	; 49
    170a:	09 f4       	brne	.+2      	; 0x170e <vfprintf+0x1c2>
    170c:	4a 94       	dec	r4
    170e:	14 14       	cp	r1, r4
    1710:	74 f5       	brge	.+92     	; 0x176e <vfprintf+0x222>
    1712:	28 e0       	ldi	r18, 0x08	; 8
    1714:	24 15       	cp	r18, r4
    1716:	78 f5       	brcc	.+94     	; 0x1776 <vfprintf+0x22a>
    1718:	88 e0       	ldi	r24, 0x08	; 8
    171a:	48 2e       	mov	r4, r24
    171c:	2c c0       	rjmp	.+88     	; 0x1776 <vfprintf+0x22a>
    171e:	96 fc       	sbrc	r9, 6
    1720:	2a c0       	rjmp	.+84     	; 0x1776 <vfprintf+0x22a>
    1722:	81 2f       	mov	r24, r17
    1724:	90 e0       	ldi	r25, 0x00	; 0
    1726:	8c 15       	cp	r24, r12
    1728:	9d 05       	cpc	r25, r13
    172a:	9c f0       	brlt	.+38     	; 0x1752 <vfprintf+0x206>
    172c:	3c ef       	ldi	r19, 0xFC	; 252
    172e:	c3 16       	cp	r12, r19
    1730:	3f ef       	ldi	r19, 0xFF	; 255
    1732:	d3 06       	cpc	r13, r19
    1734:	74 f0       	brlt	.+28     	; 0x1752 <vfprintf+0x206>
    1736:	89 2d       	mov	r24, r9
    1738:	80 68       	ori	r24, 0x80	; 128
    173a:	98 2e       	mov	r9, r24
    173c:	0a c0       	rjmp	.+20     	; 0x1752 <vfprintf+0x206>
    173e:	e2 e0       	ldi	r30, 0x02	; 2
    1740:	f0 e0       	ldi	r31, 0x00	; 0
    1742:	ec 0f       	add	r30, r28
    1744:	fd 1f       	adc	r31, r29
    1746:	e1 0f       	add	r30, r17
    1748:	f1 1d       	adc	r31, r1
    174a:	80 81       	ld	r24, Z
    174c:	80 33       	cpi	r24, 0x30	; 48
    174e:	19 f4       	brne	.+6      	; 0x1756 <vfprintf+0x20a>
    1750:	11 50       	subi	r17, 0x01	; 1
    1752:	11 11       	cpse	r17, r1
    1754:	f4 cf       	rjmp	.-24     	; 0x173e <vfprintf+0x1f2>
    1756:	97 fe       	sbrs	r9, 7
    1758:	0e c0       	rjmp	.+28     	; 0x1776 <vfprintf+0x22a>
    175a:	44 24       	eor	r4, r4
    175c:	43 94       	inc	r4
    175e:	41 0e       	add	r4, r17
    1760:	81 2f       	mov	r24, r17
    1762:	90 e0       	ldi	r25, 0x00	; 0
    1764:	c8 16       	cp	r12, r24
    1766:	d9 06       	cpc	r13, r25
    1768:	2c f4       	brge	.+10     	; 0x1774 <vfprintf+0x228>
    176a:	1c 19       	sub	r17, r12
    176c:	04 c0       	rjmp	.+8      	; 0x1776 <vfprintf+0x22a>
    176e:	44 24       	eor	r4, r4
    1770:	43 94       	inc	r4
    1772:	01 c0       	rjmp	.+2      	; 0x1776 <vfprintf+0x22a>
    1774:	10 e0       	ldi	r17, 0x00	; 0
    1776:	97 fe       	sbrs	r9, 7
    1778:	06 c0       	rjmp	.+12     	; 0x1786 <vfprintf+0x23a>
    177a:	1c 14       	cp	r1, r12
    177c:	1d 04       	cpc	r1, r13
    177e:	34 f4       	brge	.+12     	; 0x178c <vfprintf+0x240>
    1780:	c6 01       	movw	r24, r12
    1782:	01 96       	adiw	r24, 0x01	; 1
    1784:	05 c0       	rjmp	.+10     	; 0x1790 <vfprintf+0x244>
    1786:	85 e0       	ldi	r24, 0x05	; 5
    1788:	90 e0       	ldi	r25, 0x00	; 0
    178a:	02 c0       	rjmp	.+4      	; 0x1790 <vfprintf+0x244>
    178c:	81 e0       	ldi	r24, 0x01	; 1
    178e:	90 e0       	ldi	r25, 0x00	; 0
    1790:	01 11       	cpse	r16, r1
    1792:	01 96       	adiw	r24, 0x01	; 1
    1794:	11 23       	and	r17, r17
    1796:	31 f0       	breq	.+12     	; 0x17a4 <vfprintf+0x258>
    1798:	21 2f       	mov	r18, r17
    179a:	30 e0       	ldi	r19, 0x00	; 0
    179c:	2f 5f       	subi	r18, 0xFF	; 255
    179e:	3f 4f       	sbci	r19, 0xFF	; 255
    17a0:	82 0f       	add	r24, r18
    17a2:	93 1f       	adc	r25, r19
    17a4:	25 2d       	mov	r18, r5
    17a6:	30 e0       	ldi	r19, 0x00	; 0
    17a8:	82 17       	cp	r24, r18
    17aa:	93 07       	cpc	r25, r19
    17ac:	14 f4       	brge	.+4      	; 0x17b2 <vfprintf+0x266>
    17ae:	58 1a       	sub	r5, r24
    17b0:	01 c0       	rjmp	.+2      	; 0x17b4 <vfprintf+0x268>
    17b2:	51 2c       	mov	r5, r1
    17b4:	89 2d       	mov	r24, r9
    17b6:	89 70       	andi	r24, 0x09	; 9
    17b8:	49 f4       	brne	.+18     	; 0x17cc <vfprintf+0x280>
    17ba:	55 20       	and	r5, r5
    17bc:	39 f0       	breq	.+14     	; 0x17cc <vfprintf+0x280>
    17be:	b7 01       	movw	r22, r14
    17c0:	80 e2       	ldi	r24, 0x20	; 32
    17c2:	90 e0       	ldi	r25, 0x00	; 0
    17c4:	0e 94 93 0f 	call	0x1f26	; 0x1f26 <fputc>
    17c8:	5a 94       	dec	r5
    17ca:	f7 cf       	rjmp	.-18     	; 0x17ba <vfprintf+0x26e>
    17cc:	00 23       	and	r16, r16
    17ce:	29 f0       	breq	.+10     	; 0x17da <vfprintf+0x28e>
    17d0:	b7 01       	movw	r22, r14
    17d2:	80 2f       	mov	r24, r16
    17d4:	90 e0       	ldi	r25, 0x00	; 0
    17d6:	0e 94 93 0f 	call	0x1f26	; 0x1f26 <fputc>
    17da:	93 fc       	sbrc	r9, 3
    17dc:	09 c0       	rjmp	.+18     	; 0x17f0 <vfprintf+0x2a4>
    17de:	55 20       	and	r5, r5
    17e0:	39 f0       	breq	.+14     	; 0x17f0 <vfprintf+0x2a4>
    17e2:	b7 01       	movw	r22, r14
    17e4:	80 e3       	ldi	r24, 0x30	; 48
    17e6:	90 e0       	ldi	r25, 0x00	; 0
    17e8:	0e 94 93 0f 	call	0x1f26	; 0x1f26 <fputc>
    17ec:	5a 94       	dec	r5
    17ee:	f7 cf       	rjmp	.-18     	; 0x17de <vfprintf+0x292>
    17f0:	97 fe       	sbrs	r9, 7
    17f2:	4c c0       	rjmp	.+152    	; 0x188c <vfprintf+0x340>
    17f4:	46 01       	movw	r8, r12
    17f6:	d7 fe       	sbrs	r13, 7
    17f8:	02 c0       	rjmp	.+4      	; 0x17fe <vfprintf+0x2b2>
    17fa:	81 2c       	mov	r8, r1
    17fc:	91 2c       	mov	r9, r1
    17fe:	c6 01       	movw	r24, r12
    1800:	88 19       	sub	r24, r8
    1802:	99 09       	sbc	r25, r9
    1804:	f3 01       	movw	r30, r6
    1806:	e8 0f       	add	r30, r24
    1808:	f9 1f       	adc	r31, r25
    180a:	fe 87       	std	Y+14, r31	; 0x0e
    180c:	ed 87       	std	Y+13, r30	; 0x0d
    180e:	96 01       	movw	r18, r12
    1810:	24 19       	sub	r18, r4
    1812:	31 09       	sbc	r19, r1
    1814:	38 8b       	std	Y+16, r19	; 0x10
    1816:	2f 87       	std	Y+15, r18	; 0x0f
    1818:	01 2f       	mov	r16, r17
    181a:	10 e0       	ldi	r17, 0x00	; 0
    181c:	11 95       	neg	r17
    181e:	01 95       	neg	r16
    1820:	11 09       	sbc	r17, r1
    1822:	3f ef       	ldi	r19, 0xFF	; 255
    1824:	83 16       	cp	r8, r19
    1826:	93 06       	cpc	r9, r19
    1828:	29 f4       	brne	.+10     	; 0x1834 <vfprintf+0x2e8>
    182a:	b7 01       	movw	r22, r14
    182c:	8e e2       	ldi	r24, 0x2E	; 46
    182e:	90 e0       	ldi	r25, 0x00	; 0
    1830:	0e 94 93 0f 	call	0x1f26	; 0x1f26 <fputc>
    1834:	c8 14       	cp	r12, r8
    1836:	d9 04       	cpc	r13, r9
    1838:	4c f0       	brlt	.+18     	; 0x184c <vfprintf+0x300>
    183a:	8f 85       	ldd	r24, Y+15	; 0x0f
    183c:	98 89       	ldd	r25, Y+16	; 0x10
    183e:	88 15       	cp	r24, r8
    1840:	99 05       	cpc	r25, r9
    1842:	24 f4       	brge	.+8      	; 0x184c <vfprintf+0x300>
    1844:	ed 85       	ldd	r30, Y+13	; 0x0d
    1846:	fe 85       	ldd	r31, Y+14	; 0x0e
    1848:	81 81       	ldd	r24, Z+1	; 0x01
    184a:	01 c0       	rjmp	.+2      	; 0x184e <vfprintf+0x302>
    184c:	80 e3       	ldi	r24, 0x30	; 48
    184e:	f1 e0       	ldi	r31, 0x01	; 1
    1850:	8f 1a       	sub	r8, r31
    1852:	91 08       	sbc	r9, r1
    1854:	2d 85       	ldd	r18, Y+13	; 0x0d
    1856:	3e 85       	ldd	r19, Y+14	; 0x0e
    1858:	2f 5f       	subi	r18, 0xFF	; 255
    185a:	3f 4f       	sbci	r19, 0xFF	; 255
    185c:	3e 87       	std	Y+14, r19	; 0x0e
    185e:	2d 87       	std	Y+13, r18	; 0x0d
    1860:	80 16       	cp	r8, r16
    1862:	91 06       	cpc	r9, r17
    1864:	2c f0       	brlt	.+10     	; 0x1870 <vfprintf+0x324>
    1866:	b7 01       	movw	r22, r14
    1868:	90 e0       	ldi	r25, 0x00	; 0
    186a:	0e 94 93 0f 	call	0x1f26	; 0x1f26 <fputc>
    186e:	d9 cf       	rjmp	.-78     	; 0x1822 <vfprintf+0x2d6>
    1870:	c8 14       	cp	r12, r8
    1872:	d9 04       	cpc	r13, r9
    1874:	41 f4       	brne	.+16     	; 0x1886 <vfprintf+0x33a>
    1876:	9a 81       	ldd	r25, Y+2	; 0x02
    1878:	96 33       	cpi	r25, 0x36	; 54
    187a:	20 f4       	brcc	.+8      	; 0x1884 <vfprintf+0x338>
    187c:	95 33       	cpi	r25, 0x35	; 53
    187e:	19 f4       	brne	.+6      	; 0x1886 <vfprintf+0x33a>
    1880:	3c 85       	ldd	r19, Y+12	; 0x0c
    1882:	34 ff       	sbrs	r19, 4
    1884:	81 e3       	ldi	r24, 0x31	; 49
    1886:	b7 01       	movw	r22, r14
    1888:	90 e0       	ldi	r25, 0x00	; 0
    188a:	4e c0       	rjmp	.+156    	; 0x1928 <vfprintf+0x3dc>
    188c:	8a 81       	ldd	r24, Y+2	; 0x02
    188e:	81 33       	cpi	r24, 0x31	; 49
    1890:	19 f0       	breq	.+6      	; 0x1898 <vfprintf+0x34c>
    1892:	9c 85       	ldd	r25, Y+12	; 0x0c
    1894:	9f 7e       	andi	r25, 0xEF	; 239
    1896:	9c 87       	std	Y+12, r25	; 0x0c
    1898:	b7 01       	movw	r22, r14
    189a:	90 e0       	ldi	r25, 0x00	; 0
    189c:	0e 94 93 0f 	call	0x1f26	; 0x1f26 <fputc>
    18a0:	11 11       	cpse	r17, r1
    18a2:	05 c0       	rjmp	.+10     	; 0x18ae <vfprintf+0x362>
    18a4:	94 fc       	sbrc	r9, 4
    18a6:	18 c0       	rjmp	.+48     	; 0x18d8 <vfprintf+0x38c>
    18a8:	85 e6       	ldi	r24, 0x65	; 101
    18aa:	90 e0       	ldi	r25, 0x00	; 0
    18ac:	17 c0       	rjmp	.+46     	; 0x18dc <vfprintf+0x390>
    18ae:	b7 01       	movw	r22, r14
    18b0:	8e e2       	ldi	r24, 0x2E	; 46
    18b2:	90 e0       	ldi	r25, 0x00	; 0
    18b4:	0e 94 93 0f 	call	0x1f26	; 0x1f26 <fputc>
    18b8:	1e 5f       	subi	r17, 0xFE	; 254
    18ba:	82 e0       	ldi	r24, 0x02	; 2
    18bc:	01 e0       	ldi	r16, 0x01	; 1
    18be:	08 0f       	add	r16, r24
    18c0:	f3 01       	movw	r30, r6
    18c2:	e8 0f       	add	r30, r24
    18c4:	f1 1d       	adc	r31, r1
    18c6:	80 81       	ld	r24, Z
    18c8:	b7 01       	movw	r22, r14
    18ca:	90 e0       	ldi	r25, 0x00	; 0
    18cc:	0e 94 93 0f 	call	0x1f26	; 0x1f26 <fputc>
    18d0:	80 2f       	mov	r24, r16
    18d2:	01 13       	cpse	r16, r17
    18d4:	f3 cf       	rjmp	.-26     	; 0x18bc <vfprintf+0x370>
    18d6:	e6 cf       	rjmp	.-52     	; 0x18a4 <vfprintf+0x358>
    18d8:	85 e4       	ldi	r24, 0x45	; 69
    18da:	90 e0       	ldi	r25, 0x00	; 0
    18dc:	b7 01       	movw	r22, r14
    18de:	0e 94 93 0f 	call	0x1f26	; 0x1f26 <fputc>
    18e2:	d7 fc       	sbrc	r13, 7
    18e4:	06 c0       	rjmp	.+12     	; 0x18f2 <vfprintf+0x3a6>
    18e6:	c1 14       	cp	r12, r1
    18e8:	d1 04       	cpc	r13, r1
    18ea:	41 f4       	brne	.+16     	; 0x18fc <vfprintf+0x3b0>
    18ec:	ec 85       	ldd	r30, Y+12	; 0x0c
    18ee:	e4 ff       	sbrs	r30, 4
    18f0:	05 c0       	rjmp	.+10     	; 0x18fc <vfprintf+0x3b0>
    18f2:	d1 94       	neg	r13
    18f4:	c1 94       	neg	r12
    18f6:	d1 08       	sbc	r13, r1
    18f8:	8d e2       	ldi	r24, 0x2D	; 45
    18fa:	01 c0       	rjmp	.+2      	; 0x18fe <vfprintf+0x3b2>
    18fc:	8b e2       	ldi	r24, 0x2B	; 43
    18fe:	b7 01       	movw	r22, r14
    1900:	90 e0       	ldi	r25, 0x00	; 0
    1902:	0e 94 93 0f 	call	0x1f26	; 0x1f26 <fputc>
    1906:	80 e3       	ldi	r24, 0x30	; 48
    1908:	2a e0       	ldi	r18, 0x0A	; 10
    190a:	c2 16       	cp	r12, r18
    190c:	d1 04       	cpc	r13, r1
    190e:	2c f0       	brlt	.+10     	; 0x191a <vfprintf+0x3ce>
    1910:	8f 5f       	subi	r24, 0xFF	; 255
    1912:	fa e0       	ldi	r31, 0x0A	; 10
    1914:	cf 1a       	sub	r12, r31
    1916:	d1 08       	sbc	r13, r1
    1918:	f7 cf       	rjmp	.-18     	; 0x1908 <vfprintf+0x3bc>
    191a:	b7 01       	movw	r22, r14
    191c:	90 e0       	ldi	r25, 0x00	; 0
    191e:	0e 94 93 0f 	call	0x1f26	; 0x1f26 <fputc>
    1922:	b7 01       	movw	r22, r14
    1924:	c6 01       	movw	r24, r12
    1926:	c0 96       	adiw	r24, 0x30	; 48
    1928:	0e 94 93 0f 	call	0x1f26	; 0x1f26 <fputc>
    192c:	54 c1       	rjmp	.+680    	; 0x1bd6 <vfprintf+0x68a>
    192e:	83 36       	cpi	r24, 0x63	; 99
    1930:	31 f0       	breq	.+12     	; 0x193e <vfprintf+0x3f2>
    1932:	83 37       	cpi	r24, 0x73	; 115
    1934:	79 f0       	breq	.+30     	; 0x1954 <vfprintf+0x408>
    1936:	83 35       	cpi	r24, 0x53	; 83
    1938:	09 f0       	breq	.+2      	; 0x193c <vfprintf+0x3f0>
    193a:	56 c0       	rjmp	.+172    	; 0x19e8 <vfprintf+0x49c>
    193c:	20 c0       	rjmp	.+64     	; 0x197e <vfprintf+0x432>
    193e:	56 01       	movw	r10, r12
    1940:	32 e0       	ldi	r19, 0x02	; 2
    1942:	a3 0e       	add	r10, r19
    1944:	b1 1c       	adc	r11, r1
    1946:	f6 01       	movw	r30, r12
    1948:	80 81       	ld	r24, Z
    194a:	89 83       	std	Y+1, r24	; 0x01
    194c:	01 e0       	ldi	r16, 0x01	; 1
    194e:	10 e0       	ldi	r17, 0x00	; 0
    1950:	63 01       	movw	r12, r6
    1952:	12 c0       	rjmp	.+36     	; 0x1978 <vfprintf+0x42c>
    1954:	56 01       	movw	r10, r12
    1956:	f2 e0       	ldi	r31, 0x02	; 2
    1958:	af 0e       	add	r10, r31
    195a:	b1 1c       	adc	r11, r1
    195c:	f6 01       	movw	r30, r12
    195e:	c0 80       	ld	r12, Z
    1960:	d1 80       	ldd	r13, Z+1	; 0x01
    1962:	96 fe       	sbrs	r9, 6
    1964:	03 c0       	rjmp	.+6      	; 0x196c <vfprintf+0x420>
    1966:	61 2f       	mov	r22, r17
    1968:	70 e0       	ldi	r23, 0x00	; 0
    196a:	02 c0       	rjmp	.+4      	; 0x1970 <vfprintf+0x424>
    196c:	6f ef       	ldi	r22, 0xFF	; 255
    196e:	7f ef       	ldi	r23, 0xFF	; 255
    1970:	c6 01       	movw	r24, r12
    1972:	0e 94 3d 0f 	call	0x1e7a	; 0x1e7a <strnlen>
    1976:	8c 01       	movw	r16, r24
    1978:	f9 2d       	mov	r31, r9
    197a:	ff 77       	andi	r31, 0x7F	; 127
    197c:	14 c0       	rjmp	.+40     	; 0x19a6 <vfprintf+0x45a>
    197e:	56 01       	movw	r10, r12
    1980:	22 e0       	ldi	r18, 0x02	; 2
    1982:	a2 0e       	add	r10, r18
    1984:	b1 1c       	adc	r11, r1
    1986:	f6 01       	movw	r30, r12
    1988:	c0 80       	ld	r12, Z
    198a:	d1 80       	ldd	r13, Z+1	; 0x01
    198c:	96 fe       	sbrs	r9, 6
    198e:	03 c0       	rjmp	.+6      	; 0x1996 <vfprintf+0x44a>
    1990:	61 2f       	mov	r22, r17
    1992:	70 e0       	ldi	r23, 0x00	; 0
    1994:	02 c0       	rjmp	.+4      	; 0x199a <vfprintf+0x44e>
    1996:	6f ef       	ldi	r22, 0xFF	; 255
    1998:	7f ef       	ldi	r23, 0xFF	; 255
    199a:	c6 01       	movw	r24, r12
    199c:	0e 94 32 0f 	call	0x1e64	; 0x1e64 <strnlen_P>
    19a0:	8c 01       	movw	r16, r24
    19a2:	f9 2d       	mov	r31, r9
    19a4:	f0 68       	ori	r31, 0x80	; 128
    19a6:	9f 2e       	mov	r9, r31
    19a8:	f3 fd       	sbrc	r31, 3
    19aa:	1a c0       	rjmp	.+52     	; 0x19e0 <vfprintf+0x494>
    19ac:	85 2d       	mov	r24, r5
    19ae:	90 e0       	ldi	r25, 0x00	; 0
    19b0:	08 17       	cp	r16, r24
    19b2:	19 07       	cpc	r17, r25
    19b4:	a8 f4       	brcc	.+42     	; 0x19e0 <vfprintf+0x494>
    19b6:	b7 01       	movw	r22, r14
    19b8:	80 e2       	ldi	r24, 0x20	; 32
    19ba:	90 e0       	ldi	r25, 0x00	; 0
    19bc:	0e 94 93 0f 	call	0x1f26	; 0x1f26 <fputc>
    19c0:	5a 94       	dec	r5
    19c2:	f4 cf       	rjmp	.-24     	; 0x19ac <vfprintf+0x460>
    19c4:	f6 01       	movw	r30, r12
    19c6:	97 fc       	sbrc	r9, 7
    19c8:	85 91       	lpm	r24, Z+
    19ca:	97 fe       	sbrs	r9, 7
    19cc:	81 91       	ld	r24, Z+
    19ce:	6f 01       	movw	r12, r30
    19d0:	b7 01       	movw	r22, r14
    19d2:	90 e0       	ldi	r25, 0x00	; 0
    19d4:	0e 94 93 0f 	call	0x1f26	; 0x1f26 <fputc>
    19d8:	51 10       	cpse	r5, r1
    19da:	5a 94       	dec	r5
    19dc:	01 50       	subi	r16, 0x01	; 1
    19de:	11 09       	sbc	r17, r1
    19e0:	01 15       	cp	r16, r1
    19e2:	11 05       	cpc	r17, r1
    19e4:	79 f7       	brne	.-34     	; 0x19c4 <vfprintf+0x478>
    19e6:	f7 c0       	rjmp	.+494    	; 0x1bd6 <vfprintf+0x68a>
    19e8:	84 36       	cpi	r24, 0x64	; 100
    19ea:	11 f0       	breq	.+4      	; 0x19f0 <vfprintf+0x4a4>
    19ec:	89 36       	cpi	r24, 0x69	; 105
    19ee:	61 f5       	brne	.+88     	; 0x1a48 <vfprintf+0x4fc>
    19f0:	56 01       	movw	r10, r12
    19f2:	97 fe       	sbrs	r9, 7
    19f4:	09 c0       	rjmp	.+18     	; 0x1a08 <vfprintf+0x4bc>
    19f6:	24 e0       	ldi	r18, 0x04	; 4
    19f8:	a2 0e       	add	r10, r18
    19fa:	b1 1c       	adc	r11, r1
    19fc:	f6 01       	movw	r30, r12
    19fe:	60 81       	ld	r22, Z
    1a00:	71 81       	ldd	r23, Z+1	; 0x01
    1a02:	82 81       	ldd	r24, Z+2	; 0x02
    1a04:	93 81       	ldd	r25, Z+3	; 0x03
    1a06:	0a c0       	rjmp	.+20     	; 0x1a1c <vfprintf+0x4d0>
    1a08:	f2 e0       	ldi	r31, 0x02	; 2
    1a0a:	af 0e       	add	r10, r31
    1a0c:	b1 1c       	adc	r11, r1
    1a0e:	f6 01       	movw	r30, r12
    1a10:	60 81       	ld	r22, Z
    1a12:	71 81       	ldd	r23, Z+1	; 0x01
    1a14:	07 2e       	mov	r0, r23
    1a16:	00 0c       	add	r0, r0
    1a18:	88 0b       	sbc	r24, r24
    1a1a:	99 0b       	sbc	r25, r25
    1a1c:	f9 2d       	mov	r31, r9
    1a1e:	ff 76       	andi	r31, 0x6F	; 111
    1a20:	9f 2e       	mov	r9, r31
    1a22:	97 ff       	sbrs	r25, 7
    1a24:	09 c0       	rjmp	.+18     	; 0x1a38 <vfprintf+0x4ec>
    1a26:	90 95       	com	r25
    1a28:	80 95       	com	r24
    1a2a:	70 95       	com	r23
    1a2c:	61 95       	neg	r22
    1a2e:	7f 4f       	sbci	r23, 0xFF	; 255
    1a30:	8f 4f       	sbci	r24, 0xFF	; 255
    1a32:	9f 4f       	sbci	r25, 0xFF	; 255
    1a34:	f0 68       	ori	r31, 0x80	; 128
    1a36:	9f 2e       	mov	r9, r31
    1a38:	2a e0       	ldi	r18, 0x0A	; 10
    1a3a:	30 e0       	ldi	r19, 0x00	; 0
    1a3c:	a3 01       	movw	r20, r6
    1a3e:	0e 94 cf 0f 	call	0x1f9e	; 0x1f9e <__ultoa_invert>
    1a42:	c8 2e       	mov	r12, r24
    1a44:	c6 18       	sub	r12, r6
    1a46:	3f c0       	rjmp	.+126    	; 0x1ac6 <vfprintf+0x57a>
    1a48:	09 2d       	mov	r16, r9
    1a4a:	85 37       	cpi	r24, 0x75	; 117
    1a4c:	21 f4       	brne	.+8      	; 0x1a56 <vfprintf+0x50a>
    1a4e:	0f 7e       	andi	r16, 0xEF	; 239
    1a50:	2a e0       	ldi	r18, 0x0A	; 10
    1a52:	30 e0       	ldi	r19, 0x00	; 0
    1a54:	1d c0       	rjmp	.+58     	; 0x1a90 <vfprintf+0x544>
    1a56:	09 7f       	andi	r16, 0xF9	; 249
    1a58:	8f 36       	cpi	r24, 0x6F	; 111
    1a5a:	91 f0       	breq	.+36     	; 0x1a80 <vfprintf+0x534>
    1a5c:	18 f4       	brcc	.+6      	; 0x1a64 <vfprintf+0x518>
    1a5e:	88 35       	cpi	r24, 0x58	; 88
    1a60:	59 f0       	breq	.+22     	; 0x1a78 <vfprintf+0x52c>
    1a62:	c3 c0       	rjmp	.+390    	; 0x1bea <vfprintf+0x69e>
    1a64:	80 37       	cpi	r24, 0x70	; 112
    1a66:	19 f0       	breq	.+6      	; 0x1a6e <vfprintf+0x522>
    1a68:	88 37       	cpi	r24, 0x78	; 120
    1a6a:	11 f0       	breq	.+4      	; 0x1a70 <vfprintf+0x524>
    1a6c:	be c0       	rjmp	.+380    	; 0x1bea <vfprintf+0x69e>
    1a6e:	00 61       	ori	r16, 0x10	; 16
    1a70:	04 ff       	sbrs	r16, 4
    1a72:	09 c0       	rjmp	.+18     	; 0x1a86 <vfprintf+0x53a>
    1a74:	04 60       	ori	r16, 0x04	; 4
    1a76:	07 c0       	rjmp	.+14     	; 0x1a86 <vfprintf+0x53a>
    1a78:	94 fe       	sbrs	r9, 4
    1a7a:	08 c0       	rjmp	.+16     	; 0x1a8c <vfprintf+0x540>
    1a7c:	06 60       	ori	r16, 0x06	; 6
    1a7e:	06 c0       	rjmp	.+12     	; 0x1a8c <vfprintf+0x540>
    1a80:	28 e0       	ldi	r18, 0x08	; 8
    1a82:	30 e0       	ldi	r19, 0x00	; 0
    1a84:	05 c0       	rjmp	.+10     	; 0x1a90 <vfprintf+0x544>
    1a86:	20 e1       	ldi	r18, 0x10	; 16
    1a88:	30 e0       	ldi	r19, 0x00	; 0
    1a8a:	02 c0       	rjmp	.+4      	; 0x1a90 <vfprintf+0x544>
    1a8c:	20 e1       	ldi	r18, 0x10	; 16
    1a8e:	32 e0       	ldi	r19, 0x02	; 2
    1a90:	56 01       	movw	r10, r12
    1a92:	07 ff       	sbrs	r16, 7
    1a94:	09 c0       	rjmp	.+18     	; 0x1aa8 <vfprintf+0x55c>
    1a96:	84 e0       	ldi	r24, 0x04	; 4
    1a98:	a8 0e       	add	r10, r24
    1a9a:	b1 1c       	adc	r11, r1
    1a9c:	f6 01       	movw	r30, r12
    1a9e:	60 81       	ld	r22, Z
    1aa0:	71 81       	ldd	r23, Z+1	; 0x01
    1aa2:	82 81       	ldd	r24, Z+2	; 0x02
    1aa4:	93 81       	ldd	r25, Z+3	; 0x03
    1aa6:	08 c0       	rjmp	.+16     	; 0x1ab8 <vfprintf+0x56c>
    1aa8:	f2 e0       	ldi	r31, 0x02	; 2
    1aaa:	af 0e       	add	r10, r31
    1aac:	b1 1c       	adc	r11, r1
    1aae:	f6 01       	movw	r30, r12
    1ab0:	60 81       	ld	r22, Z
    1ab2:	71 81       	ldd	r23, Z+1	; 0x01
    1ab4:	80 e0       	ldi	r24, 0x00	; 0
    1ab6:	90 e0       	ldi	r25, 0x00	; 0
    1ab8:	a3 01       	movw	r20, r6
    1aba:	0e 94 cf 0f 	call	0x1f9e	; 0x1f9e <__ultoa_invert>
    1abe:	c8 2e       	mov	r12, r24
    1ac0:	c6 18       	sub	r12, r6
    1ac2:	0f 77       	andi	r16, 0x7F	; 127
    1ac4:	90 2e       	mov	r9, r16
    1ac6:	96 fe       	sbrs	r9, 6
    1ac8:	0b c0       	rjmp	.+22     	; 0x1ae0 <vfprintf+0x594>
    1aca:	09 2d       	mov	r16, r9
    1acc:	0e 7f       	andi	r16, 0xFE	; 254
    1ace:	c1 16       	cp	r12, r17
    1ad0:	50 f4       	brcc	.+20     	; 0x1ae6 <vfprintf+0x59a>
    1ad2:	94 fe       	sbrs	r9, 4
    1ad4:	0a c0       	rjmp	.+20     	; 0x1aea <vfprintf+0x59e>
    1ad6:	92 fc       	sbrc	r9, 2
    1ad8:	08 c0       	rjmp	.+16     	; 0x1aea <vfprintf+0x59e>
    1ada:	09 2d       	mov	r16, r9
    1adc:	0e 7e       	andi	r16, 0xEE	; 238
    1ade:	05 c0       	rjmp	.+10     	; 0x1aea <vfprintf+0x59e>
    1ae0:	dc 2c       	mov	r13, r12
    1ae2:	09 2d       	mov	r16, r9
    1ae4:	03 c0       	rjmp	.+6      	; 0x1aec <vfprintf+0x5a0>
    1ae6:	dc 2c       	mov	r13, r12
    1ae8:	01 c0       	rjmp	.+2      	; 0x1aec <vfprintf+0x5a0>
    1aea:	d1 2e       	mov	r13, r17
    1aec:	04 ff       	sbrs	r16, 4
    1aee:	0d c0       	rjmp	.+26     	; 0x1b0a <vfprintf+0x5be>
    1af0:	fe 01       	movw	r30, r28
    1af2:	ec 0d       	add	r30, r12
    1af4:	f1 1d       	adc	r31, r1
    1af6:	80 81       	ld	r24, Z
    1af8:	80 33       	cpi	r24, 0x30	; 48
    1afa:	11 f4       	brne	.+4      	; 0x1b00 <vfprintf+0x5b4>
    1afc:	09 7e       	andi	r16, 0xE9	; 233
    1afe:	09 c0       	rjmp	.+18     	; 0x1b12 <vfprintf+0x5c6>
    1b00:	02 ff       	sbrs	r16, 2
    1b02:	06 c0       	rjmp	.+12     	; 0x1b10 <vfprintf+0x5c4>
    1b04:	d3 94       	inc	r13
    1b06:	d3 94       	inc	r13
    1b08:	04 c0       	rjmp	.+8      	; 0x1b12 <vfprintf+0x5c6>
    1b0a:	80 2f       	mov	r24, r16
    1b0c:	86 78       	andi	r24, 0x86	; 134
    1b0e:	09 f0       	breq	.+2      	; 0x1b12 <vfprintf+0x5c6>
    1b10:	d3 94       	inc	r13
    1b12:	03 fd       	sbrc	r16, 3
    1b14:	11 c0       	rjmp	.+34     	; 0x1b38 <vfprintf+0x5ec>
    1b16:	00 ff       	sbrs	r16, 0
    1b18:	06 c0       	rjmp	.+12     	; 0x1b26 <vfprintf+0x5da>
    1b1a:	1c 2d       	mov	r17, r12
    1b1c:	d5 14       	cp	r13, r5
    1b1e:	80 f4       	brcc	.+32     	; 0x1b40 <vfprintf+0x5f4>
    1b20:	15 0d       	add	r17, r5
    1b22:	1d 19       	sub	r17, r13
    1b24:	0d c0       	rjmp	.+26     	; 0x1b40 <vfprintf+0x5f4>
    1b26:	d5 14       	cp	r13, r5
    1b28:	58 f4       	brcc	.+22     	; 0x1b40 <vfprintf+0x5f4>
    1b2a:	b7 01       	movw	r22, r14
    1b2c:	80 e2       	ldi	r24, 0x20	; 32
    1b2e:	90 e0       	ldi	r25, 0x00	; 0
    1b30:	0e 94 93 0f 	call	0x1f26	; 0x1f26 <fputc>
    1b34:	d3 94       	inc	r13
    1b36:	f7 cf       	rjmp	.-18     	; 0x1b26 <vfprintf+0x5da>
    1b38:	d5 14       	cp	r13, r5
    1b3a:	10 f4       	brcc	.+4      	; 0x1b40 <vfprintf+0x5f4>
    1b3c:	5d 18       	sub	r5, r13
    1b3e:	01 c0       	rjmp	.+2      	; 0x1b42 <vfprintf+0x5f6>
    1b40:	51 2c       	mov	r5, r1
    1b42:	04 ff       	sbrs	r16, 4
    1b44:	10 c0       	rjmp	.+32     	; 0x1b66 <vfprintf+0x61a>
    1b46:	b7 01       	movw	r22, r14
    1b48:	80 e3       	ldi	r24, 0x30	; 48
    1b4a:	90 e0       	ldi	r25, 0x00	; 0
    1b4c:	0e 94 93 0f 	call	0x1f26	; 0x1f26 <fputc>
    1b50:	02 ff       	sbrs	r16, 2
    1b52:	17 c0       	rjmp	.+46     	; 0x1b82 <vfprintf+0x636>
    1b54:	01 fd       	sbrc	r16, 1
    1b56:	03 c0       	rjmp	.+6      	; 0x1b5e <vfprintf+0x612>
    1b58:	88 e7       	ldi	r24, 0x78	; 120
    1b5a:	90 e0       	ldi	r25, 0x00	; 0
    1b5c:	02 c0       	rjmp	.+4      	; 0x1b62 <vfprintf+0x616>
    1b5e:	88 e5       	ldi	r24, 0x58	; 88
    1b60:	90 e0       	ldi	r25, 0x00	; 0
    1b62:	b7 01       	movw	r22, r14
    1b64:	0c c0       	rjmp	.+24     	; 0x1b7e <vfprintf+0x632>
    1b66:	80 2f       	mov	r24, r16
    1b68:	86 78       	andi	r24, 0x86	; 134
    1b6a:	59 f0       	breq	.+22     	; 0x1b82 <vfprintf+0x636>
    1b6c:	01 ff       	sbrs	r16, 1
    1b6e:	02 c0       	rjmp	.+4      	; 0x1b74 <vfprintf+0x628>
    1b70:	8b e2       	ldi	r24, 0x2B	; 43
    1b72:	01 c0       	rjmp	.+2      	; 0x1b76 <vfprintf+0x62a>
    1b74:	80 e2       	ldi	r24, 0x20	; 32
    1b76:	07 fd       	sbrc	r16, 7
    1b78:	8d e2       	ldi	r24, 0x2D	; 45
    1b7a:	b7 01       	movw	r22, r14
    1b7c:	90 e0       	ldi	r25, 0x00	; 0
    1b7e:	0e 94 93 0f 	call	0x1f26	; 0x1f26 <fputc>
    1b82:	c1 16       	cp	r12, r17
    1b84:	38 f4       	brcc	.+14     	; 0x1b94 <vfprintf+0x648>
    1b86:	b7 01       	movw	r22, r14
    1b88:	80 e3       	ldi	r24, 0x30	; 48
    1b8a:	90 e0       	ldi	r25, 0x00	; 0
    1b8c:	0e 94 93 0f 	call	0x1f26	; 0x1f26 <fputc>
    1b90:	11 50       	subi	r17, 0x01	; 1
    1b92:	f7 cf       	rjmp	.-18     	; 0x1b82 <vfprintf+0x636>
    1b94:	ca 94       	dec	r12
    1b96:	f3 01       	movw	r30, r6
    1b98:	ec 0d       	add	r30, r12
    1b9a:	f1 1d       	adc	r31, r1
    1b9c:	80 81       	ld	r24, Z
    1b9e:	b7 01       	movw	r22, r14
    1ba0:	90 e0       	ldi	r25, 0x00	; 0
    1ba2:	0e 94 93 0f 	call	0x1f26	; 0x1f26 <fputc>
    1ba6:	c1 10       	cpse	r12, r1
    1ba8:	f5 cf       	rjmp	.-22     	; 0x1b94 <vfprintf+0x648>
    1baa:	15 c0       	rjmp	.+42     	; 0x1bd6 <vfprintf+0x68a>
    1bac:	f4 e0       	ldi	r31, 0x04	; 4
    1bae:	f5 15       	cp	r31, r5
    1bb0:	60 f5       	brcc	.+88     	; 0x1c0a <vfprintf+0x6be>
    1bb2:	84 e0       	ldi	r24, 0x04	; 4
    1bb4:	58 1a       	sub	r5, r24
    1bb6:	93 fe       	sbrs	r9, 3
    1bb8:	1f c0       	rjmp	.+62     	; 0x1bf8 <vfprintf+0x6ac>
    1bba:	01 11       	cpse	r16, r1
    1bbc:	27 c0       	rjmp	.+78     	; 0x1c0c <vfprintf+0x6c0>
    1bbe:	2c 85       	ldd	r18, Y+12	; 0x0c
    1bc0:	23 ff       	sbrs	r18, 3
    1bc2:	2a c0       	rjmp	.+84     	; 0x1c18 <vfprintf+0x6cc>
    1bc4:	06 e9       	ldi	r16, 0x96	; 150
    1bc6:	10 e0       	ldi	r17, 0x00	; 0
    1bc8:	39 2d       	mov	r19, r9
    1bca:	30 71       	andi	r19, 0x10	; 16
    1bcc:	93 2e       	mov	r9, r19
    1bce:	f8 01       	movw	r30, r16
    1bd0:	84 91       	lpm	r24, Z
    1bd2:	81 11       	cpse	r24, r1
    1bd4:	24 c0       	rjmp	.+72     	; 0x1c1e <vfprintf+0x6d2>
    1bd6:	55 20       	and	r5, r5
    1bd8:	09 f4       	brne	.+2      	; 0x1bdc <vfprintf+0x690>
    1bda:	e4 cc       	rjmp	.-1592   	; 0x15a4 <vfprintf+0x58>
    1bdc:	b7 01       	movw	r22, r14
    1bde:	80 e2       	ldi	r24, 0x20	; 32
    1be0:	90 e0       	ldi	r25, 0x00	; 0
    1be2:	0e 94 93 0f 	call	0x1f26	; 0x1f26 <fputc>
    1be6:	5a 94       	dec	r5
    1be8:	f6 cf       	rjmp	.-20     	; 0x1bd6 <vfprintf+0x68a>
    1bea:	f7 01       	movw	r30, r14
    1bec:	86 81       	ldd	r24, Z+6	; 0x06
    1bee:	97 81       	ldd	r25, Z+7	; 0x07
    1bf0:	26 c0       	rjmp	.+76     	; 0x1c3e <vfprintf+0x6f2>
    1bf2:	8f ef       	ldi	r24, 0xFF	; 255
    1bf4:	9f ef       	ldi	r25, 0xFF	; 255
    1bf6:	23 c0       	rjmp	.+70     	; 0x1c3e <vfprintf+0x6f2>
    1bf8:	b7 01       	movw	r22, r14
    1bfa:	80 e2       	ldi	r24, 0x20	; 32
    1bfc:	90 e0       	ldi	r25, 0x00	; 0
    1bfe:	0e 94 93 0f 	call	0x1f26	; 0x1f26 <fputc>
    1c02:	5a 94       	dec	r5
    1c04:	51 10       	cpse	r5, r1
    1c06:	f8 cf       	rjmp	.-16     	; 0x1bf8 <vfprintf+0x6ac>
    1c08:	d8 cf       	rjmp	.-80     	; 0x1bba <vfprintf+0x66e>
    1c0a:	51 2c       	mov	r5, r1
    1c0c:	b7 01       	movw	r22, r14
    1c0e:	80 2f       	mov	r24, r16
    1c10:	90 e0       	ldi	r25, 0x00	; 0
    1c12:	0e 94 93 0f 	call	0x1f26	; 0x1f26 <fputc>
    1c16:	d3 cf       	rjmp	.-90     	; 0x1bbe <vfprintf+0x672>
    1c18:	0a e9       	ldi	r16, 0x9A	; 154
    1c1a:	10 e0       	ldi	r17, 0x00	; 0
    1c1c:	d5 cf       	rjmp	.-86     	; 0x1bc8 <vfprintf+0x67c>
    1c1e:	91 10       	cpse	r9, r1
    1c20:	80 52       	subi	r24, 0x20	; 32
    1c22:	b7 01       	movw	r22, r14
    1c24:	90 e0       	ldi	r25, 0x00	; 0
    1c26:	0e 94 93 0f 	call	0x1f26	; 0x1f26 <fputc>
    1c2a:	0f 5f       	subi	r16, 0xFF	; 255
    1c2c:	1f 4f       	sbci	r17, 0xFF	; 255
    1c2e:	cf cf       	rjmp	.-98     	; 0x1bce <vfprintf+0x682>
    1c30:	23 e0       	ldi	r18, 0x03	; 3
    1c32:	25 15       	cp	r18, r5
    1c34:	10 f4       	brcc	.+4      	; 0x1c3a <vfprintf+0x6ee>
    1c36:	83 e0       	ldi	r24, 0x03	; 3
    1c38:	bd cf       	rjmp	.-134    	; 0x1bb4 <vfprintf+0x668>
    1c3a:	51 2c       	mov	r5, r1
    1c3c:	c0 cf       	rjmp	.-128    	; 0x1bbe <vfprintf+0x672>
    1c3e:	60 96       	adiw	r28, 0x10	; 16
    1c40:	e2 e1       	ldi	r30, 0x12	; 18
    1c42:	0c 94 3f 0e 	jmp	0x1c7e	; 0x1c7e <__epilogue_restores__>

00001c46 <__prologue_saves__>:
    1c46:	2f 92       	push	r2
    1c48:	3f 92       	push	r3
    1c4a:	4f 92       	push	r4
    1c4c:	5f 92       	push	r5
    1c4e:	6f 92       	push	r6
    1c50:	7f 92       	push	r7
    1c52:	8f 92       	push	r8
    1c54:	9f 92       	push	r9
    1c56:	af 92       	push	r10
    1c58:	bf 92       	push	r11
    1c5a:	cf 92       	push	r12
    1c5c:	df 92       	push	r13
    1c5e:	ef 92       	push	r14
    1c60:	ff 92       	push	r15
    1c62:	0f 93       	push	r16
    1c64:	1f 93       	push	r17
    1c66:	cf 93       	push	r28
    1c68:	df 93       	push	r29
    1c6a:	cd b7       	in	r28, 0x3d	; 61
    1c6c:	de b7       	in	r29, 0x3e	; 62
    1c6e:	ca 1b       	sub	r28, r26
    1c70:	db 0b       	sbc	r29, r27
    1c72:	0f b6       	in	r0, 0x3f	; 63
    1c74:	f8 94       	cli
    1c76:	de bf       	out	0x3e, r29	; 62
    1c78:	0f be       	out	0x3f, r0	; 63
    1c7a:	cd bf       	out	0x3d, r28	; 61
    1c7c:	09 94       	ijmp

00001c7e <__epilogue_restores__>:
    1c7e:	2a 88       	ldd	r2, Y+18	; 0x12
    1c80:	39 88       	ldd	r3, Y+17	; 0x11
    1c82:	48 88       	ldd	r4, Y+16	; 0x10
    1c84:	5f 84       	ldd	r5, Y+15	; 0x0f
    1c86:	6e 84       	ldd	r6, Y+14	; 0x0e
    1c88:	7d 84       	ldd	r7, Y+13	; 0x0d
    1c8a:	8c 84       	ldd	r8, Y+12	; 0x0c
    1c8c:	9b 84       	ldd	r9, Y+11	; 0x0b
    1c8e:	aa 84       	ldd	r10, Y+10	; 0x0a
    1c90:	b9 84       	ldd	r11, Y+9	; 0x09
    1c92:	c8 84       	ldd	r12, Y+8	; 0x08
    1c94:	df 80       	ldd	r13, Y+7	; 0x07
    1c96:	ee 80       	ldd	r14, Y+6	; 0x06
    1c98:	fd 80       	ldd	r15, Y+5	; 0x05
    1c9a:	0c 81       	ldd	r16, Y+4	; 0x04
    1c9c:	1b 81       	ldd	r17, Y+3	; 0x03
    1c9e:	aa 81       	ldd	r26, Y+2	; 0x02
    1ca0:	b9 81       	ldd	r27, Y+1	; 0x01
    1ca2:	ce 0f       	add	r28, r30
    1ca4:	d1 1d       	adc	r29, r1
    1ca6:	0f b6       	in	r0, 0x3f	; 63
    1ca8:	f8 94       	cli
    1caa:	de bf       	out	0x3e, r29	; 62
    1cac:	0f be       	out	0x3f, r0	; 63
    1cae:	cd bf       	out	0x3d, r28	; 61
    1cb0:	ed 01       	movw	r28, r26
    1cb2:	08 95       	ret

00001cb4 <__ftoa_engine>:
    1cb4:	28 30       	cpi	r18, 0x08	; 8
    1cb6:	08 f0       	brcs	.+2      	; 0x1cba <__ftoa_engine+0x6>
    1cb8:	27 e0       	ldi	r18, 0x07	; 7
    1cba:	33 27       	eor	r19, r19
    1cbc:	da 01       	movw	r26, r20
    1cbe:	99 0f       	add	r25, r25
    1cc0:	31 1d       	adc	r19, r1
    1cc2:	87 fd       	sbrc	r24, 7
    1cc4:	91 60       	ori	r25, 0x01	; 1
    1cc6:	00 96       	adiw	r24, 0x00	; 0
    1cc8:	61 05       	cpc	r22, r1
    1cca:	71 05       	cpc	r23, r1
    1ccc:	39 f4       	brne	.+14     	; 0x1cdc <__ftoa_engine+0x28>
    1cce:	32 60       	ori	r19, 0x02	; 2
    1cd0:	2e 5f       	subi	r18, 0xFE	; 254
    1cd2:	3d 93       	st	X+, r19
    1cd4:	30 e3       	ldi	r19, 0x30	; 48
    1cd6:	2a 95       	dec	r18
    1cd8:	e1 f7       	brne	.-8      	; 0x1cd2 <__ftoa_engine+0x1e>
    1cda:	08 95       	ret
    1cdc:	9f 3f       	cpi	r25, 0xFF	; 255
    1cde:	30 f0       	brcs	.+12     	; 0x1cec <__ftoa_engine+0x38>
    1ce0:	80 38       	cpi	r24, 0x80	; 128
    1ce2:	71 05       	cpc	r23, r1
    1ce4:	61 05       	cpc	r22, r1
    1ce6:	09 f0       	breq	.+2      	; 0x1cea <__ftoa_engine+0x36>
    1ce8:	3c 5f       	subi	r19, 0xFC	; 252
    1cea:	3c 5f       	subi	r19, 0xFC	; 252
    1cec:	3d 93       	st	X+, r19
    1cee:	91 30       	cpi	r25, 0x01	; 1
    1cf0:	08 f0       	brcs	.+2      	; 0x1cf4 <__ftoa_engine+0x40>
    1cf2:	80 68       	ori	r24, 0x80	; 128
    1cf4:	91 1d       	adc	r25, r1
    1cf6:	df 93       	push	r29
    1cf8:	cf 93       	push	r28
    1cfa:	1f 93       	push	r17
    1cfc:	0f 93       	push	r16
    1cfe:	ff 92       	push	r15
    1d00:	ef 92       	push	r14
    1d02:	19 2f       	mov	r17, r25
    1d04:	98 7f       	andi	r25, 0xF8	; 248
    1d06:	96 95       	lsr	r25
    1d08:	e9 2f       	mov	r30, r25
    1d0a:	96 95       	lsr	r25
    1d0c:	96 95       	lsr	r25
    1d0e:	e9 0f       	add	r30, r25
    1d10:	ff 27       	eor	r31, r31
    1d12:	e8 50       	subi	r30, 0x08	; 8
    1d14:	ff 4f       	sbci	r31, 0xFF	; 255
    1d16:	99 27       	eor	r25, r25
    1d18:	33 27       	eor	r19, r19
    1d1a:	ee 24       	eor	r14, r14
    1d1c:	ff 24       	eor	r15, r15
    1d1e:	a7 01       	movw	r20, r14
    1d20:	e7 01       	movw	r28, r14
    1d22:	05 90       	lpm	r0, Z+
    1d24:	08 94       	sec
    1d26:	07 94       	ror	r0
    1d28:	28 f4       	brcc	.+10     	; 0x1d34 <__ftoa_engine+0x80>
    1d2a:	36 0f       	add	r19, r22
    1d2c:	e7 1e       	adc	r14, r23
    1d2e:	f8 1e       	adc	r15, r24
    1d30:	49 1f       	adc	r20, r25
    1d32:	51 1d       	adc	r21, r1
    1d34:	66 0f       	add	r22, r22
    1d36:	77 1f       	adc	r23, r23
    1d38:	88 1f       	adc	r24, r24
    1d3a:	99 1f       	adc	r25, r25
    1d3c:	06 94       	lsr	r0
    1d3e:	a1 f7       	brne	.-24     	; 0x1d28 <__ftoa_engine+0x74>
    1d40:	05 90       	lpm	r0, Z+
    1d42:	07 94       	ror	r0
    1d44:	28 f4       	brcc	.+10     	; 0x1d50 <__ftoa_engine+0x9c>
    1d46:	e7 0e       	add	r14, r23
    1d48:	f8 1e       	adc	r15, r24
    1d4a:	49 1f       	adc	r20, r25
    1d4c:	56 1f       	adc	r21, r22
    1d4e:	c1 1d       	adc	r28, r1
    1d50:	77 0f       	add	r23, r23
    1d52:	88 1f       	adc	r24, r24
    1d54:	99 1f       	adc	r25, r25
    1d56:	66 1f       	adc	r22, r22
    1d58:	06 94       	lsr	r0
    1d5a:	a1 f7       	brne	.-24     	; 0x1d44 <__ftoa_engine+0x90>
    1d5c:	05 90       	lpm	r0, Z+
    1d5e:	07 94       	ror	r0
    1d60:	28 f4       	brcc	.+10     	; 0x1d6c <__ftoa_engine+0xb8>
    1d62:	f8 0e       	add	r15, r24
    1d64:	49 1f       	adc	r20, r25
    1d66:	56 1f       	adc	r21, r22
    1d68:	c7 1f       	adc	r28, r23
    1d6a:	d1 1d       	adc	r29, r1
    1d6c:	88 0f       	add	r24, r24
    1d6e:	99 1f       	adc	r25, r25
    1d70:	66 1f       	adc	r22, r22
    1d72:	77 1f       	adc	r23, r23
    1d74:	06 94       	lsr	r0
    1d76:	a1 f7       	brne	.-24     	; 0x1d60 <__ftoa_engine+0xac>
    1d78:	05 90       	lpm	r0, Z+
    1d7a:	07 94       	ror	r0
    1d7c:	20 f4       	brcc	.+8      	; 0x1d86 <__ftoa_engine+0xd2>
    1d7e:	49 0f       	add	r20, r25
    1d80:	56 1f       	adc	r21, r22
    1d82:	c7 1f       	adc	r28, r23
    1d84:	d8 1f       	adc	r29, r24
    1d86:	99 0f       	add	r25, r25
    1d88:	66 1f       	adc	r22, r22
    1d8a:	77 1f       	adc	r23, r23
    1d8c:	88 1f       	adc	r24, r24
    1d8e:	06 94       	lsr	r0
    1d90:	a9 f7       	brne	.-22     	; 0x1d7c <__ftoa_engine+0xc8>
    1d92:	84 91       	lpm	r24, Z
    1d94:	10 95       	com	r17
    1d96:	17 70       	andi	r17, 0x07	; 7
    1d98:	41 f0       	breq	.+16     	; 0x1daa <__ftoa_engine+0xf6>
    1d9a:	d6 95       	lsr	r29
    1d9c:	c7 95       	ror	r28
    1d9e:	57 95       	ror	r21
    1da0:	47 95       	ror	r20
    1da2:	f7 94       	ror	r15
    1da4:	e7 94       	ror	r14
    1da6:	1a 95       	dec	r17
    1da8:	c1 f7       	brne	.-16     	; 0x1d9a <__ftoa_engine+0xe6>
    1daa:	ee e9       	ldi	r30, 0x9E	; 158
    1dac:	f0 e0       	ldi	r31, 0x00	; 0
    1dae:	68 94       	set
    1db0:	15 90       	lpm	r1, Z+
    1db2:	15 91       	lpm	r17, Z+
    1db4:	35 91       	lpm	r19, Z+
    1db6:	65 91       	lpm	r22, Z+
    1db8:	95 91       	lpm	r25, Z+
    1dba:	05 90       	lpm	r0, Z+
    1dbc:	7f e2       	ldi	r23, 0x2F	; 47
    1dbe:	73 95       	inc	r23
    1dc0:	e1 18       	sub	r14, r1
    1dc2:	f1 0a       	sbc	r15, r17
    1dc4:	43 0b       	sbc	r20, r19
    1dc6:	56 0b       	sbc	r21, r22
    1dc8:	c9 0b       	sbc	r28, r25
    1dca:	d0 09       	sbc	r29, r0
    1dcc:	c0 f7       	brcc	.-16     	; 0x1dbe <__ftoa_engine+0x10a>
    1dce:	e1 0c       	add	r14, r1
    1dd0:	f1 1e       	adc	r15, r17
    1dd2:	43 1f       	adc	r20, r19
    1dd4:	56 1f       	adc	r21, r22
    1dd6:	c9 1f       	adc	r28, r25
    1dd8:	d0 1d       	adc	r29, r0
    1dda:	7e f4       	brtc	.+30     	; 0x1dfa <__ftoa_engine+0x146>
    1ddc:	70 33       	cpi	r23, 0x30	; 48
    1dde:	11 f4       	brne	.+4      	; 0x1de4 <__ftoa_engine+0x130>
    1de0:	8a 95       	dec	r24
    1de2:	e6 cf       	rjmp	.-52     	; 0x1db0 <__ftoa_engine+0xfc>
    1de4:	e8 94       	clt
    1de6:	01 50       	subi	r16, 0x01	; 1
    1de8:	30 f0       	brcs	.+12     	; 0x1df6 <__ftoa_engine+0x142>
    1dea:	08 0f       	add	r16, r24
    1dec:	0a f4       	brpl	.+2      	; 0x1df0 <__ftoa_engine+0x13c>
    1dee:	00 27       	eor	r16, r16
    1df0:	02 17       	cp	r16, r18
    1df2:	08 f4       	brcc	.+2      	; 0x1df6 <__ftoa_engine+0x142>
    1df4:	20 2f       	mov	r18, r16
    1df6:	23 95       	inc	r18
    1df8:	02 2f       	mov	r16, r18
    1dfa:	7a 33       	cpi	r23, 0x3A	; 58
    1dfc:	28 f0       	brcs	.+10     	; 0x1e08 <__ftoa_engine+0x154>
    1dfe:	79 e3       	ldi	r23, 0x39	; 57
    1e00:	7d 93       	st	X+, r23
    1e02:	2a 95       	dec	r18
    1e04:	e9 f7       	brne	.-6      	; 0x1e00 <__ftoa_engine+0x14c>
    1e06:	10 c0       	rjmp	.+32     	; 0x1e28 <__ftoa_engine+0x174>
    1e08:	7d 93       	st	X+, r23
    1e0a:	2a 95       	dec	r18
    1e0c:	89 f6       	brne	.-94     	; 0x1db0 <__ftoa_engine+0xfc>
    1e0e:	06 94       	lsr	r0
    1e10:	97 95       	ror	r25
    1e12:	67 95       	ror	r22
    1e14:	37 95       	ror	r19
    1e16:	17 95       	ror	r17
    1e18:	17 94       	ror	r1
    1e1a:	e1 18       	sub	r14, r1
    1e1c:	f1 0a       	sbc	r15, r17
    1e1e:	43 0b       	sbc	r20, r19
    1e20:	56 0b       	sbc	r21, r22
    1e22:	c9 0b       	sbc	r28, r25
    1e24:	d0 09       	sbc	r29, r0
    1e26:	98 f0       	brcs	.+38     	; 0x1e4e <__ftoa_engine+0x19a>
    1e28:	23 95       	inc	r18
    1e2a:	7e 91       	ld	r23, -X
    1e2c:	73 95       	inc	r23
    1e2e:	7a 33       	cpi	r23, 0x3A	; 58
    1e30:	08 f0       	brcs	.+2      	; 0x1e34 <__ftoa_engine+0x180>
    1e32:	70 e3       	ldi	r23, 0x30	; 48
    1e34:	7c 93       	st	X, r23
    1e36:	20 13       	cpse	r18, r16
    1e38:	b8 f7       	brcc	.-18     	; 0x1e28 <__ftoa_engine+0x174>
    1e3a:	7e 91       	ld	r23, -X
    1e3c:	70 61       	ori	r23, 0x10	; 16
    1e3e:	7d 93       	st	X+, r23
    1e40:	30 f0       	brcs	.+12     	; 0x1e4e <__ftoa_engine+0x19a>
    1e42:	83 95       	inc	r24
    1e44:	71 e3       	ldi	r23, 0x31	; 49
    1e46:	7d 93       	st	X+, r23
    1e48:	70 e3       	ldi	r23, 0x30	; 48
    1e4a:	2a 95       	dec	r18
    1e4c:	e1 f7       	brne	.-8      	; 0x1e46 <__ftoa_engine+0x192>
    1e4e:	11 24       	eor	r1, r1
    1e50:	ef 90       	pop	r14
    1e52:	ff 90       	pop	r15
    1e54:	0f 91       	pop	r16
    1e56:	1f 91       	pop	r17
    1e58:	cf 91       	pop	r28
    1e5a:	df 91       	pop	r29
    1e5c:	99 27       	eor	r25, r25
    1e5e:	87 fd       	sbrc	r24, 7
    1e60:	90 95       	com	r25
    1e62:	08 95       	ret

00001e64 <strnlen_P>:
    1e64:	fc 01       	movw	r30, r24
    1e66:	05 90       	lpm	r0, Z+
    1e68:	61 50       	subi	r22, 0x01	; 1
    1e6a:	70 40       	sbci	r23, 0x00	; 0
    1e6c:	01 10       	cpse	r0, r1
    1e6e:	d8 f7       	brcc	.-10     	; 0x1e66 <strnlen_P+0x2>
    1e70:	80 95       	com	r24
    1e72:	90 95       	com	r25
    1e74:	8e 0f       	add	r24, r30
    1e76:	9f 1f       	adc	r25, r31
    1e78:	08 95       	ret

00001e7a <strnlen>:
    1e7a:	fc 01       	movw	r30, r24
    1e7c:	61 50       	subi	r22, 0x01	; 1
    1e7e:	70 40       	sbci	r23, 0x00	; 0
    1e80:	01 90       	ld	r0, Z+
    1e82:	01 10       	cpse	r0, r1
    1e84:	d8 f7       	brcc	.-10     	; 0x1e7c <strnlen+0x2>
    1e86:	80 95       	com	r24
    1e88:	90 95       	com	r25
    1e8a:	8e 0f       	add	r24, r30
    1e8c:	9f 1f       	adc	r25, r31
    1e8e:	08 95       	ret

00001e90 <fdevopen>:
    1e90:	0f 93       	push	r16
    1e92:	1f 93       	push	r17
    1e94:	cf 93       	push	r28
    1e96:	df 93       	push	r29
    1e98:	00 97       	sbiw	r24, 0x00	; 0
    1e9a:	31 f4       	brne	.+12     	; 0x1ea8 <fdevopen+0x18>
    1e9c:	61 15       	cp	r22, r1
    1e9e:	71 05       	cpc	r23, r1
    1ea0:	19 f4       	brne	.+6      	; 0x1ea8 <fdevopen+0x18>
    1ea2:	80 e0       	ldi	r24, 0x00	; 0
    1ea4:	90 e0       	ldi	r25, 0x00	; 0
    1ea6:	3a c0       	rjmp	.+116    	; 0x1f1c <fdevopen+0x8c>
    1ea8:	8b 01       	movw	r16, r22
    1eaa:	ec 01       	movw	r28, r24
    1eac:	6e e0       	ldi	r22, 0x0E	; 14
    1eae:	70 e0       	ldi	r23, 0x00	; 0
    1eb0:	81 e0       	ldi	r24, 0x01	; 1
    1eb2:	90 e0       	ldi	r25, 0x00	; 0
    1eb4:	0e 94 2d 10 	call	0x205a	; 0x205a <calloc>
    1eb8:	fc 01       	movw	r30, r24
    1eba:	89 2b       	or	r24, r25
    1ebc:	91 f3       	breq	.-28     	; 0x1ea2 <fdevopen+0x12>
    1ebe:	80 e8       	ldi	r24, 0x80	; 128
    1ec0:	83 83       	std	Z+3, r24	; 0x03
    1ec2:	01 15       	cp	r16, r1
    1ec4:	11 05       	cpc	r17, r1
    1ec6:	71 f0       	breq	.+28     	; 0x1ee4 <fdevopen+0x54>
    1ec8:	13 87       	std	Z+11, r17	; 0x0b
    1eca:	02 87       	std	Z+10, r16	; 0x0a
    1ecc:	81 e8       	ldi	r24, 0x81	; 129
    1ece:	83 83       	std	Z+3, r24	; 0x03
    1ed0:	80 91 55 01 	lds	r24, 0x0155	; 0x800155 <__iob>
    1ed4:	90 91 56 01 	lds	r25, 0x0156	; 0x800156 <__iob+0x1>
    1ed8:	89 2b       	or	r24, r25
    1eda:	21 f4       	brne	.+8      	; 0x1ee4 <fdevopen+0x54>
    1edc:	f0 93 56 01 	sts	0x0156, r31	; 0x800156 <__iob+0x1>
    1ee0:	e0 93 55 01 	sts	0x0155, r30	; 0x800155 <__iob>
    1ee4:	20 97       	sbiw	r28, 0x00	; 0
    1ee6:	c9 f0       	breq	.+50     	; 0x1f1a <fdevopen+0x8a>
    1ee8:	d1 87       	std	Z+9, r29	; 0x09
    1eea:	c0 87       	std	Z+8, r28	; 0x08
    1eec:	83 81       	ldd	r24, Z+3	; 0x03
    1eee:	82 60       	ori	r24, 0x02	; 2
    1ef0:	83 83       	std	Z+3, r24	; 0x03
    1ef2:	80 91 57 01 	lds	r24, 0x0157	; 0x800157 <__iob+0x2>
    1ef6:	90 91 58 01 	lds	r25, 0x0158	; 0x800158 <__iob+0x3>
    1efa:	89 2b       	or	r24, r25
    1efc:	71 f4       	brne	.+28     	; 0x1f1a <fdevopen+0x8a>
    1efe:	f0 93 58 01 	sts	0x0158, r31	; 0x800158 <__iob+0x3>
    1f02:	e0 93 57 01 	sts	0x0157, r30	; 0x800157 <__iob+0x2>
    1f06:	80 91 59 01 	lds	r24, 0x0159	; 0x800159 <__iob+0x4>
    1f0a:	90 91 5a 01 	lds	r25, 0x015A	; 0x80015a <__iob+0x5>
    1f0e:	89 2b       	or	r24, r25
    1f10:	21 f4       	brne	.+8      	; 0x1f1a <fdevopen+0x8a>
    1f12:	f0 93 5a 01 	sts	0x015A, r31	; 0x80015a <__iob+0x5>
    1f16:	e0 93 59 01 	sts	0x0159, r30	; 0x800159 <__iob+0x4>
    1f1a:	cf 01       	movw	r24, r30
    1f1c:	df 91       	pop	r29
    1f1e:	cf 91       	pop	r28
    1f20:	1f 91       	pop	r17
    1f22:	0f 91       	pop	r16
    1f24:	08 95       	ret

00001f26 <fputc>:
    1f26:	0f 93       	push	r16
    1f28:	1f 93       	push	r17
    1f2a:	cf 93       	push	r28
    1f2c:	df 93       	push	r29
    1f2e:	fb 01       	movw	r30, r22
    1f30:	23 81       	ldd	r18, Z+3	; 0x03
    1f32:	21 fd       	sbrc	r18, 1
    1f34:	03 c0       	rjmp	.+6      	; 0x1f3c <fputc+0x16>
    1f36:	8f ef       	ldi	r24, 0xFF	; 255
    1f38:	9f ef       	ldi	r25, 0xFF	; 255
    1f3a:	2c c0       	rjmp	.+88     	; 0x1f94 <fputc+0x6e>
    1f3c:	22 ff       	sbrs	r18, 2
    1f3e:	16 c0       	rjmp	.+44     	; 0x1f6c <fputc+0x46>
    1f40:	46 81       	ldd	r20, Z+6	; 0x06
    1f42:	57 81       	ldd	r21, Z+7	; 0x07
    1f44:	24 81       	ldd	r18, Z+4	; 0x04
    1f46:	35 81       	ldd	r19, Z+5	; 0x05
    1f48:	42 17       	cp	r20, r18
    1f4a:	53 07       	cpc	r21, r19
    1f4c:	44 f4       	brge	.+16     	; 0x1f5e <fputc+0x38>
    1f4e:	a0 81       	ld	r26, Z
    1f50:	b1 81       	ldd	r27, Z+1	; 0x01
    1f52:	9d 01       	movw	r18, r26
    1f54:	2f 5f       	subi	r18, 0xFF	; 255
    1f56:	3f 4f       	sbci	r19, 0xFF	; 255
    1f58:	31 83       	std	Z+1, r19	; 0x01
    1f5a:	20 83       	st	Z, r18
    1f5c:	8c 93       	st	X, r24
    1f5e:	26 81       	ldd	r18, Z+6	; 0x06
    1f60:	37 81       	ldd	r19, Z+7	; 0x07
    1f62:	2f 5f       	subi	r18, 0xFF	; 255
    1f64:	3f 4f       	sbci	r19, 0xFF	; 255
    1f66:	37 83       	std	Z+7, r19	; 0x07
    1f68:	26 83       	std	Z+6, r18	; 0x06
    1f6a:	14 c0       	rjmp	.+40     	; 0x1f94 <fputc+0x6e>
    1f6c:	8b 01       	movw	r16, r22
    1f6e:	ec 01       	movw	r28, r24
    1f70:	fb 01       	movw	r30, r22
    1f72:	00 84       	ldd	r0, Z+8	; 0x08
    1f74:	f1 85       	ldd	r31, Z+9	; 0x09
    1f76:	e0 2d       	mov	r30, r0
    1f78:	09 95       	icall
    1f7a:	89 2b       	or	r24, r25
    1f7c:	e1 f6       	brne	.-72     	; 0x1f36 <fputc+0x10>
    1f7e:	d8 01       	movw	r26, r16
    1f80:	16 96       	adiw	r26, 0x06	; 6
    1f82:	8d 91       	ld	r24, X+
    1f84:	9c 91       	ld	r25, X
    1f86:	17 97       	sbiw	r26, 0x07	; 7
    1f88:	01 96       	adiw	r24, 0x01	; 1
    1f8a:	17 96       	adiw	r26, 0x07	; 7
    1f8c:	9c 93       	st	X, r25
    1f8e:	8e 93       	st	-X, r24
    1f90:	16 97       	sbiw	r26, 0x06	; 6
    1f92:	ce 01       	movw	r24, r28
    1f94:	df 91       	pop	r29
    1f96:	cf 91       	pop	r28
    1f98:	1f 91       	pop	r17
    1f9a:	0f 91       	pop	r16
    1f9c:	08 95       	ret

00001f9e <__ultoa_invert>:
    1f9e:	fa 01       	movw	r30, r20
    1fa0:	aa 27       	eor	r26, r26
    1fa2:	28 30       	cpi	r18, 0x08	; 8
    1fa4:	51 f1       	breq	.+84     	; 0x1ffa <__ultoa_invert+0x5c>
    1fa6:	20 31       	cpi	r18, 0x10	; 16
    1fa8:	81 f1       	breq	.+96     	; 0x200a <__ultoa_invert+0x6c>
    1faa:	e8 94       	clt
    1fac:	6f 93       	push	r22
    1fae:	6e 7f       	andi	r22, 0xFE	; 254
    1fb0:	6e 5f       	subi	r22, 0xFE	; 254
    1fb2:	7f 4f       	sbci	r23, 0xFF	; 255
    1fb4:	8f 4f       	sbci	r24, 0xFF	; 255
    1fb6:	9f 4f       	sbci	r25, 0xFF	; 255
    1fb8:	af 4f       	sbci	r26, 0xFF	; 255
    1fba:	b1 e0       	ldi	r27, 0x01	; 1
    1fbc:	3e d0       	rcall	.+124    	; 0x203a <__ultoa_invert+0x9c>
    1fbe:	b4 e0       	ldi	r27, 0x04	; 4
    1fc0:	3c d0       	rcall	.+120    	; 0x203a <__ultoa_invert+0x9c>
    1fc2:	67 0f       	add	r22, r23
    1fc4:	78 1f       	adc	r23, r24
    1fc6:	89 1f       	adc	r24, r25
    1fc8:	9a 1f       	adc	r25, r26
    1fca:	a1 1d       	adc	r26, r1
    1fcc:	68 0f       	add	r22, r24
    1fce:	79 1f       	adc	r23, r25
    1fd0:	8a 1f       	adc	r24, r26
    1fd2:	91 1d       	adc	r25, r1
    1fd4:	a1 1d       	adc	r26, r1
    1fd6:	6a 0f       	add	r22, r26
    1fd8:	71 1d       	adc	r23, r1
    1fda:	81 1d       	adc	r24, r1
    1fdc:	91 1d       	adc	r25, r1
    1fde:	a1 1d       	adc	r26, r1
    1fe0:	20 d0       	rcall	.+64     	; 0x2022 <__ultoa_invert+0x84>
    1fe2:	09 f4       	brne	.+2      	; 0x1fe6 <__ultoa_invert+0x48>
    1fe4:	68 94       	set
    1fe6:	3f 91       	pop	r19
    1fe8:	2a e0       	ldi	r18, 0x0A	; 10
    1fea:	26 9f       	mul	r18, r22
    1fec:	11 24       	eor	r1, r1
    1fee:	30 19       	sub	r19, r0
    1ff0:	30 5d       	subi	r19, 0xD0	; 208
    1ff2:	31 93       	st	Z+, r19
    1ff4:	de f6       	brtc	.-74     	; 0x1fac <__ultoa_invert+0xe>
    1ff6:	cf 01       	movw	r24, r30
    1ff8:	08 95       	ret
    1ffa:	46 2f       	mov	r20, r22
    1ffc:	47 70       	andi	r20, 0x07	; 7
    1ffe:	40 5d       	subi	r20, 0xD0	; 208
    2000:	41 93       	st	Z+, r20
    2002:	b3 e0       	ldi	r27, 0x03	; 3
    2004:	0f d0       	rcall	.+30     	; 0x2024 <__ultoa_invert+0x86>
    2006:	c9 f7       	brne	.-14     	; 0x1ffa <__ultoa_invert+0x5c>
    2008:	f6 cf       	rjmp	.-20     	; 0x1ff6 <__ultoa_invert+0x58>
    200a:	46 2f       	mov	r20, r22
    200c:	4f 70       	andi	r20, 0x0F	; 15
    200e:	40 5d       	subi	r20, 0xD0	; 208
    2010:	4a 33       	cpi	r20, 0x3A	; 58
    2012:	18 f0       	brcs	.+6      	; 0x201a <__ultoa_invert+0x7c>
    2014:	49 5d       	subi	r20, 0xD9	; 217
    2016:	31 fd       	sbrc	r19, 1
    2018:	40 52       	subi	r20, 0x20	; 32
    201a:	41 93       	st	Z+, r20
    201c:	02 d0       	rcall	.+4      	; 0x2022 <__ultoa_invert+0x84>
    201e:	a9 f7       	brne	.-22     	; 0x200a <__ultoa_invert+0x6c>
    2020:	ea cf       	rjmp	.-44     	; 0x1ff6 <__ultoa_invert+0x58>
    2022:	b4 e0       	ldi	r27, 0x04	; 4
    2024:	a6 95       	lsr	r26
    2026:	97 95       	ror	r25
    2028:	87 95       	ror	r24
    202a:	77 95       	ror	r23
    202c:	67 95       	ror	r22
    202e:	ba 95       	dec	r27
    2030:	c9 f7       	brne	.-14     	; 0x2024 <__ultoa_invert+0x86>
    2032:	00 97       	sbiw	r24, 0x00	; 0
    2034:	61 05       	cpc	r22, r1
    2036:	71 05       	cpc	r23, r1
    2038:	08 95       	ret
    203a:	9b 01       	movw	r18, r22
    203c:	ac 01       	movw	r20, r24
    203e:	0a 2e       	mov	r0, r26
    2040:	06 94       	lsr	r0
    2042:	57 95       	ror	r21
    2044:	47 95       	ror	r20
    2046:	37 95       	ror	r19
    2048:	27 95       	ror	r18
    204a:	ba 95       	dec	r27
    204c:	c9 f7       	brne	.-14     	; 0x2040 <__ultoa_invert+0xa2>
    204e:	62 0f       	add	r22, r18
    2050:	73 1f       	adc	r23, r19
    2052:	84 1f       	adc	r24, r20
    2054:	95 1f       	adc	r25, r21
    2056:	a0 1d       	adc	r26, r0
    2058:	08 95       	ret

0000205a <calloc>:
    205a:	0f 93       	push	r16
    205c:	1f 93       	push	r17
    205e:	cf 93       	push	r28
    2060:	df 93       	push	r29
    2062:	86 9f       	mul	r24, r22
    2064:	80 01       	movw	r16, r0
    2066:	87 9f       	mul	r24, r23
    2068:	10 0d       	add	r17, r0
    206a:	96 9f       	mul	r25, r22
    206c:	10 0d       	add	r17, r0
    206e:	11 24       	eor	r1, r1
    2070:	c8 01       	movw	r24, r16
    2072:	0e 94 49 10 	call	0x2092	; 0x2092 <malloc>
    2076:	ec 01       	movw	r28, r24
    2078:	00 97       	sbiw	r24, 0x00	; 0
    207a:	29 f0       	breq	.+10     	; 0x2086 <calloc+0x2c>
    207c:	a8 01       	movw	r20, r16
    207e:	60 e0       	ldi	r22, 0x00	; 0
    2080:	70 e0       	ldi	r23, 0x00	; 0
    2082:	0e 94 6a 11 	call	0x22d4	; 0x22d4 <memset>
    2086:	ce 01       	movw	r24, r28
    2088:	df 91       	pop	r29
    208a:	cf 91       	pop	r28
    208c:	1f 91       	pop	r17
    208e:	0f 91       	pop	r16
    2090:	08 95       	ret

00002092 <malloc>:
    2092:	0f 93       	push	r16
    2094:	1f 93       	push	r17
    2096:	cf 93       	push	r28
    2098:	df 93       	push	r29
    209a:	82 30       	cpi	r24, 0x02	; 2
    209c:	91 05       	cpc	r25, r1
    209e:	10 f4       	brcc	.+4      	; 0x20a4 <malloc+0x12>
    20a0:	82 e0       	ldi	r24, 0x02	; 2
    20a2:	90 e0       	ldi	r25, 0x00	; 0
    20a4:	e0 91 5d 01 	lds	r30, 0x015D	; 0x80015d <__flp>
    20a8:	f0 91 5e 01 	lds	r31, 0x015E	; 0x80015e <__flp+0x1>
    20ac:	20 e0       	ldi	r18, 0x00	; 0
    20ae:	30 e0       	ldi	r19, 0x00	; 0
    20b0:	a0 e0       	ldi	r26, 0x00	; 0
    20b2:	b0 e0       	ldi	r27, 0x00	; 0
    20b4:	30 97       	sbiw	r30, 0x00	; 0
    20b6:	19 f1       	breq	.+70     	; 0x20fe <malloc+0x6c>
    20b8:	40 81       	ld	r20, Z
    20ba:	51 81       	ldd	r21, Z+1	; 0x01
    20bc:	02 81       	ldd	r16, Z+2	; 0x02
    20be:	13 81       	ldd	r17, Z+3	; 0x03
    20c0:	48 17       	cp	r20, r24
    20c2:	59 07       	cpc	r21, r25
    20c4:	c8 f0       	brcs	.+50     	; 0x20f8 <malloc+0x66>
    20c6:	84 17       	cp	r24, r20
    20c8:	95 07       	cpc	r25, r21
    20ca:	69 f4       	brne	.+26     	; 0x20e6 <malloc+0x54>
    20cc:	10 97       	sbiw	r26, 0x00	; 0
    20ce:	31 f0       	breq	.+12     	; 0x20dc <malloc+0x4a>
    20d0:	12 96       	adiw	r26, 0x02	; 2
    20d2:	0c 93       	st	X, r16
    20d4:	12 97       	sbiw	r26, 0x02	; 2
    20d6:	13 96       	adiw	r26, 0x03	; 3
    20d8:	1c 93       	st	X, r17
    20da:	27 c0       	rjmp	.+78     	; 0x212a <malloc+0x98>
    20dc:	00 93 5d 01 	sts	0x015D, r16	; 0x80015d <__flp>
    20e0:	10 93 5e 01 	sts	0x015E, r17	; 0x80015e <__flp+0x1>
    20e4:	22 c0       	rjmp	.+68     	; 0x212a <malloc+0x98>
    20e6:	21 15       	cp	r18, r1
    20e8:	31 05       	cpc	r19, r1
    20ea:	19 f0       	breq	.+6      	; 0x20f2 <malloc+0x60>
    20ec:	42 17       	cp	r20, r18
    20ee:	53 07       	cpc	r21, r19
    20f0:	18 f4       	brcc	.+6      	; 0x20f8 <malloc+0x66>
    20f2:	9a 01       	movw	r18, r20
    20f4:	bd 01       	movw	r22, r26
    20f6:	ef 01       	movw	r28, r30
    20f8:	df 01       	movw	r26, r30
    20fa:	f8 01       	movw	r30, r16
    20fc:	db cf       	rjmp	.-74     	; 0x20b4 <malloc+0x22>
    20fe:	21 15       	cp	r18, r1
    2100:	31 05       	cpc	r19, r1
    2102:	f9 f0       	breq	.+62     	; 0x2142 <malloc+0xb0>
    2104:	28 1b       	sub	r18, r24
    2106:	39 0b       	sbc	r19, r25
    2108:	24 30       	cpi	r18, 0x04	; 4
    210a:	31 05       	cpc	r19, r1
    210c:	80 f4       	brcc	.+32     	; 0x212e <malloc+0x9c>
    210e:	8a 81       	ldd	r24, Y+2	; 0x02
    2110:	9b 81       	ldd	r25, Y+3	; 0x03
    2112:	61 15       	cp	r22, r1
    2114:	71 05       	cpc	r23, r1
    2116:	21 f0       	breq	.+8      	; 0x2120 <malloc+0x8e>
    2118:	fb 01       	movw	r30, r22
    211a:	93 83       	std	Z+3, r25	; 0x03
    211c:	82 83       	std	Z+2, r24	; 0x02
    211e:	04 c0       	rjmp	.+8      	; 0x2128 <malloc+0x96>
    2120:	90 93 5e 01 	sts	0x015E, r25	; 0x80015e <__flp+0x1>
    2124:	80 93 5d 01 	sts	0x015D, r24	; 0x80015d <__flp>
    2128:	fe 01       	movw	r30, r28
    212a:	32 96       	adiw	r30, 0x02	; 2
    212c:	44 c0       	rjmp	.+136    	; 0x21b6 <malloc+0x124>
    212e:	fe 01       	movw	r30, r28
    2130:	e2 0f       	add	r30, r18
    2132:	f3 1f       	adc	r31, r19
    2134:	81 93       	st	Z+, r24
    2136:	91 93       	st	Z+, r25
    2138:	22 50       	subi	r18, 0x02	; 2
    213a:	31 09       	sbc	r19, r1
    213c:	39 83       	std	Y+1, r19	; 0x01
    213e:	28 83       	st	Y, r18
    2140:	3a c0       	rjmp	.+116    	; 0x21b6 <malloc+0x124>
    2142:	20 91 5b 01 	lds	r18, 0x015B	; 0x80015b <__brkval>
    2146:	30 91 5c 01 	lds	r19, 0x015C	; 0x80015c <__brkval+0x1>
    214a:	23 2b       	or	r18, r19
    214c:	41 f4       	brne	.+16     	; 0x215e <malloc+0xcc>
    214e:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    2152:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    2156:	30 93 5c 01 	sts	0x015C, r19	; 0x80015c <__brkval+0x1>
    215a:	20 93 5b 01 	sts	0x015B, r18	; 0x80015b <__brkval>
    215e:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
    2162:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
    2166:	21 15       	cp	r18, r1
    2168:	31 05       	cpc	r19, r1
    216a:	41 f4       	brne	.+16     	; 0x217c <malloc+0xea>
    216c:	2d b7       	in	r18, 0x3d	; 61
    216e:	3e b7       	in	r19, 0x3e	; 62
    2170:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    2174:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    2178:	24 1b       	sub	r18, r20
    217a:	35 0b       	sbc	r19, r21
    217c:	e0 91 5b 01 	lds	r30, 0x015B	; 0x80015b <__brkval>
    2180:	f0 91 5c 01 	lds	r31, 0x015C	; 0x80015c <__brkval+0x1>
    2184:	e2 17       	cp	r30, r18
    2186:	f3 07       	cpc	r31, r19
    2188:	a0 f4       	brcc	.+40     	; 0x21b2 <malloc+0x120>
    218a:	2e 1b       	sub	r18, r30
    218c:	3f 0b       	sbc	r19, r31
    218e:	28 17       	cp	r18, r24
    2190:	39 07       	cpc	r19, r25
    2192:	78 f0       	brcs	.+30     	; 0x21b2 <malloc+0x120>
    2194:	ac 01       	movw	r20, r24
    2196:	4e 5f       	subi	r20, 0xFE	; 254
    2198:	5f 4f       	sbci	r21, 0xFF	; 255
    219a:	24 17       	cp	r18, r20
    219c:	35 07       	cpc	r19, r21
    219e:	48 f0       	brcs	.+18     	; 0x21b2 <malloc+0x120>
    21a0:	4e 0f       	add	r20, r30
    21a2:	5f 1f       	adc	r21, r31
    21a4:	50 93 5c 01 	sts	0x015C, r21	; 0x80015c <__brkval+0x1>
    21a8:	40 93 5b 01 	sts	0x015B, r20	; 0x80015b <__brkval>
    21ac:	81 93       	st	Z+, r24
    21ae:	91 93       	st	Z+, r25
    21b0:	02 c0       	rjmp	.+4      	; 0x21b6 <malloc+0x124>
    21b2:	e0 e0       	ldi	r30, 0x00	; 0
    21b4:	f0 e0       	ldi	r31, 0x00	; 0
    21b6:	cf 01       	movw	r24, r30
    21b8:	df 91       	pop	r29
    21ba:	cf 91       	pop	r28
    21bc:	1f 91       	pop	r17
    21be:	0f 91       	pop	r16
    21c0:	08 95       	ret

000021c2 <free>:
    21c2:	cf 93       	push	r28
    21c4:	df 93       	push	r29
    21c6:	00 97       	sbiw	r24, 0x00	; 0
    21c8:	09 f4       	brne	.+2      	; 0x21cc <free+0xa>
    21ca:	81 c0       	rjmp	.+258    	; 0x22ce <free+0x10c>
    21cc:	fc 01       	movw	r30, r24
    21ce:	32 97       	sbiw	r30, 0x02	; 2
    21d0:	13 82       	std	Z+3, r1	; 0x03
    21d2:	12 82       	std	Z+2, r1	; 0x02
    21d4:	a0 91 5d 01 	lds	r26, 0x015D	; 0x80015d <__flp>
    21d8:	b0 91 5e 01 	lds	r27, 0x015E	; 0x80015e <__flp+0x1>
    21dc:	10 97       	sbiw	r26, 0x00	; 0
    21de:	81 f4       	brne	.+32     	; 0x2200 <free+0x3e>
    21e0:	20 81       	ld	r18, Z
    21e2:	31 81       	ldd	r19, Z+1	; 0x01
    21e4:	82 0f       	add	r24, r18
    21e6:	93 1f       	adc	r25, r19
    21e8:	20 91 5b 01 	lds	r18, 0x015B	; 0x80015b <__brkval>
    21ec:	30 91 5c 01 	lds	r19, 0x015C	; 0x80015c <__brkval+0x1>
    21f0:	28 17       	cp	r18, r24
    21f2:	39 07       	cpc	r19, r25
    21f4:	51 f5       	brne	.+84     	; 0x224a <free+0x88>
    21f6:	f0 93 5c 01 	sts	0x015C, r31	; 0x80015c <__brkval+0x1>
    21fa:	e0 93 5b 01 	sts	0x015B, r30	; 0x80015b <__brkval>
    21fe:	67 c0       	rjmp	.+206    	; 0x22ce <free+0x10c>
    2200:	ed 01       	movw	r28, r26
    2202:	20 e0       	ldi	r18, 0x00	; 0
    2204:	30 e0       	ldi	r19, 0x00	; 0
    2206:	ce 17       	cp	r28, r30
    2208:	df 07       	cpc	r29, r31
    220a:	40 f4       	brcc	.+16     	; 0x221c <free+0x5a>
    220c:	4a 81       	ldd	r20, Y+2	; 0x02
    220e:	5b 81       	ldd	r21, Y+3	; 0x03
    2210:	9e 01       	movw	r18, r28
    2212:	41 15       	cp	r20, r1
    2214:	51 05       	cpc	r21, r1
    2216:	f1 f0       	breq	.+60     	; 0x2254 <free+0x92>
    2218:	ea 01       	movw	r28, r20
    221a:	f5 cf       	rjmp	.-22     	; 0x2206 <free+0x44>
    221c:	d3 83       	std	Z+3, r29	; 0x03
    221e:	c2 83       	std	Z+2, r28	; 0x02
    2220:	40 81       	ld	r20, Z
    2222:	51 81       	ldd	r21, Z+1	; 0x01
    2224:	84 0f       	add	r24, r20
    2226:	95 1f       	adc	r25, r21
    2228:	c8 17       	cp	r28, r24
    222a:	d9 07       	cpc	r29, r25
    222c:	59 f4       	brne	.+22     	; 0x2244 <free+0x82>
    222e:	88 81       	ld	r24, Y
    2230:	99 81       	ldd	r25, Y+1	; 0x01
    2232:	84 0f       	add	r24, r20
    2234:	95 1f       	adc	r25, r21
    2236:	02 96       	adiw	r24, 0x02	; 2
    2238:	91 83       	std	Z+1, r25	; 0x01
    223a:	80 83       	st	Z, r24
    223c:	8a 81       	ldd	r24, Y+2	; 0x02
    223e:	9b 81       	ldd	r25, Y+3	; 0x03
    2240:	93 83       	std	Z+3, r25	; 0x03
    2242:	82 83       	std	Z+2, r24	; 0x02
    2244:	21 15       	cp	r18, r1
    2246:	31 05       	cpc	r19, r1
    2248:	29 f4       	brne	.+10     	; 0x2254 <free+0x92>
    224a:	f0 93 5e 01 	sts	0x015E, r31	; 0x80015e <__flp+0x1>
    224e:	e0 93 5d 01 	sts	0x015D, r30	; 0x80015d <__flp>
    2252:	3d c0       	rjmp	.+122    	; 0x22ce <free+0x10c>
    2254:	e9 01       	movw	r28, r18
    2256:	fb 83       	std	Y+3, r31	; 0x03
    2258:	ea 83       	std	Y+2, r30	; 0x02
    225a:	49 91       	ld	r20, Y+
    225c:	59 91       	ld	r21, Y+
    225e:	c4 0f       	add	r28, r20
    2260:	d5 1f       	adc	r29, r21
    2262:	ec 17       	cp	r30, r28
    2264:	fd 07       	cpc	r31, r29
    2266:	61 f4       	brne	.+24     	; 0x2280 <free+0xbe>
    2268:	80 81       	ld	r24, Z
    226a:	91 81       	ldd	r25, Z+1	; 0x01
    226c:	84 0f       	add	r24, r20
    226e:	95 1f       	adc	r25, r21
    2270:	02 96       	adiw	r24, 0x02	; 2
    2272:	e9 01       	movw	r28, r18
    2274:	99 83       	std	Y+1, r25	; 0x01
    2276:	88 83       	st	Y, r24
    2278:	82 81       	ldd	r24, Z+2	; 0x02
    227a:	93 81       	ldd	r25, Z+3	; 0x03
    227c:	9b 83       	std	Y+3, r25	; 0x03
    227e:	8a 83       	std	Y+2, r24	; 0x02
    2280:	e0 e0       	ldi	r30, 0x00	; 0
    2282:	f0 e0       	ldi	r31, 0x00	; 0
    2284:	12 96       	adiw	r26, 0x02	; 2
    2286:	8d 91       	ld	r24, X+
    2288:	9c 91       	ld	r25, X
    228a:	13 97       	sbiw	r26, 0x03	; 3
    228c:	00 97       	sbiw	r24, 0x00	; 0
    228e:	19 f0       	breq	.+6      	; 0x2296 <free+0xd4>
    2290:	fd 01       	movw	r30, r26
    2292:	dc 01       	movw	r26, r24
    2294:	f7 cf       	rjmp	.-18     	; 0x2284 <free+0xc2>
    2296:	8d 91       	ld	r24, X+
    2298:	9c 91       	ld	r25, X
    229a:	11 97       	sbiw	r26, 0x01	; 1
    229c:	9d 01       	movw	r18, r26
    229e:	2e 5f       	subi	r18, 0xFE	; 254
    22a0:	3f 4f       	sbci	r19, 0xFF	; 255
    22a2:	82 0f       	add	r24, r18
    22a4:	93 1f       	adc	r25, r19
    22a6:	20 91 5b 01 	lds	r18, 0x015B	; 0x80015b <__brkval>
    22aa:	30 91 5c 01 	lds	r19, 0x015C	; 0x80015c <__brkval+0x1>
    22ae:	28 17       	cp	r18, r24
    22b0:	39 07       	cpc	r19, r25
    22b2:	69 f4       	brne	.+26     	; 0x22ce <free+0x10c>
    22b4:	30 97       	sbiw	r30, 0x00	; 0
    22b6:	29 f4       	brne	.+10     	; 0x22c2 <free+0x100>
    22b8:	10 92 5e 01 	sts	0x015E, r1	; 0x80015e <__flp+0x1>
    22bc:	10 92 5d 01 	sts	0x015D, r1	; 0x80015d <__flp>
    22c0:	02 c0       	rjmp	.+4      	; 0x22c6 <free+0x104>
    22c2:	13 82       	std	Z+3, r1	; 0x03
    22c4:	12 82       	std	Z+2, r1	; 0x02
    22c6:	b0 93 5c 01 	sts	0x015C, r27	; 0x80015c <__brkval+0x1>
    22ca:	a0 93 5b 01 	sts	0x015B, r26	; 0x80015b <__brkval>
    22ce:	df 91       	pop	r29
    22d0:	cf 91       	pop	r28
    22d2:	08 95       	ret

000022d4 <memset>:
    22d4:	dc 01       	movw	r26, r24
    22d6:	01 c0       	rjmp	.+2      	; 0x22da <memset+0x6>
    22d8:	6d 93       	st	X+, r22
    22da:	41 50       	subi	r20, 0x01	; 1
    22dc:	50 40       	sbci	r21, 0x00	; 0
    22de:	e0 f7       	brcc	.-8      	; 0x22d8 <memset+0x4>
    22e0:	08 95       	ret

000022e2 <_exit>:
    22e2:	f8 94       	cli

000022e4 <__stop_program>:
    22e4:	ff cf       	rjmp	.-2      	; 0x22e4 <__stop_program>
