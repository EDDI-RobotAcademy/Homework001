
nrf24l01.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000002e4  00800100  0000175e  000017f2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000175e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000b  008003e4  008003e4  00001ad6  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001ad6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001b34  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000298  00000000  00000000  00001b74  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002f8c  00000000  00000000  00001e0c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001335  00000000  00000000  00004d98  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001666  00000000  00000000  000060cd  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000670  00000000  00000000  00007734  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000a6e  00000000  00000000  00007da4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001531  00000000  00000000  00008812  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000220  00000000  00000000  00009d43  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 84 02 	jmp	0x508	; 0x508 <__vector_1>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 ac 01 	jmp	0x358	; 0x358 <__vector_5>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 d5 01 	jmp	0x3aa	; 0x3aa <__vector_7>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	13 e0       	ldi	r17, 0x03	; 3
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	ee e5       	ldi	r30, 0x5E	; 94
      7c:	f7 e1       	ldi	r31, 0x17	; 23
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	a4 3e       	cpi	r26, 0xE4	; 228
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	23 e0       	ldi	r18, 0x03	; 3
      8c:	a4 ee       	ldi	r26, 0xE4	; 228
      8e:	b3 e0       	ldi	r27, 0x03	; 3
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	af 3e       	cpi	r26, 0xEF	; 239
      96:	b2 07       	cpc	r27, r18
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <main>
      9e:	0c 94 ad 0b 	jmp	0x175a	; 0x175a <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <adc_init>:
      a6:	ec e7       	ldi	r30, 0x7C	; 124
      a8:	f0 e0       	ldi	r31, 0x00	; 0
      aa:	80 81       	ld	r24, Z
      ac:	88 6c       	ori	r24, 0xC8	; 200
      ae:	80 83       	st	Z, r24
      b0:	ea e7       	ldi	r30, 0x7A	; 122
      b2:	f0 e0       	ldi	r31, 0x00	; 0
      b4:	80 81       	ld	r24, Z
      b6:	80 68       	ori	r24, 0x80	; 128
      b8:	80 83       	st	Z, r24
      ba:	08 95       	ret

000000bc <adc_read>:
      bc:	ea e7       	ldi	r30, 0x7A	; 122
      be:	f0 e0       	ldi	r31, 0x00	; 0
      c0:	80 81       	ld	r24, Z
      c2:	80 64       	ori	r24, 0x40	; 64
      c4:	80 83       	st	Z, r24
      c6:	80 81       	ld	r24, Z
      c8:	84 ff       	sbrs	r24, 4
      ca:	fd cf       	rjmp	.-6      	; 0xc6 <adc_read+0xa>
      cc:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
      d0:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__DATA_REGION_ORIGIN__+0x18>
      d4:	90 e0       	ldi	r25, 0x00	; 0
      d6:	92 2b       	or	r25, r18
      d8:	08 95       	ret

000000da <adc_stop>:
      da:	ea e7       	ldi	r30, 0x7A	; 122
      dc:	f0 e0       	ldi	r31, 0x00	; 0
      de:	80 81       	ld	r24, Z
      e0:	8f 77       	andi	r24, 0x7F	; 127
      e2:	80 83       	st	Z, r24
      e4:	08 95       	ret

000000e6 <gen_random_add>:
      e6:	ef 92       	push	r14
      e8:	ff 92       	push	r15
      ea:	0f 93       	push	r16
      ec:	1f 93       	push	r17
      ee:	cf 93       	push	r28
      f0:	df 93       	push	r29
      f2:	ec 01       	movw	r28, r24
      f4:	0e 94 5e 00 	call	0xbc	; 0xbc <adc_read>
      f8:	0e 94 9b 06 	call	0xd36	; 0xd36 <srand>
      fc:	7e 01       	movw	r14, r28
      fe:	85 e0       	ldi	r24, 0x05	; 5
     100:	e8 0e       	add	r14, r24
     102:	f1 1c       	adc	r15, r1
     104:	0f ef       	ldi	r16, 0xFF	; 255
     106:	10 e0       	ldi	r17, 0x00	; 0
     108:	0e 94 96 06 	call	0xd2c	; 0xd2c <rand>
     10c:	b8 01       	movw	r22, r16
     10e:	0e 94 22 06 	call	0xc44	; 0xc44 <__divmodhi4>
     112:	89 93       	st	Y+, r24
     114:	ec 16       	cp	r14, r28
     116:	fd 06       	cpc	r15, r29
     118:	b9 f7       	brne	.-18     	; 0x108 <gen_random_add+0x22>
     11a:	df 91       	pop	r29
     11c:	cf 91       	pop	r28
     11e:	1f 91       	pop	r17
     120:	0f 91       	pop	r16
     122:	ff 90       	pop	r15
     124:	ef 90       	pop	r14
     126:	08 95       	ret

00000128 <key_io_init>:
	else 
	{
		printf("1!\n");
		return 1;
	}
}
     128:	85 b7       	in	r24, 0x35	; 53
     12a:	8f 7e       	andi	r24, 0xEF	; 239
     12c:	85 bf       	out	0x35, r24	; 53
     12e:	8a b1       	in	r24, 0x0a	; 10
     130:	8f 70       	andi	r24, 0x0F	; 15
     132:	8a b9       	out	0x0a, r24	; 10
     134:	8b b1       	in	r24, 0x0b	; 11
     136:	80 6f       	ori	r24, 0xF0	; 240
     138:	8b b9       	out	0x0b, r24	; 11
     13a:	84 b1       	in	r24, 0x04	; 4
     13c:	83 60       	ori	r24, 0x03	; 3
     13e:	84 b9       	out	0x04, r24	; 4
     140:	85 b1       	in	r24, 0x05	; 5
     142:	83 60       	ori	r24, 0x03	; 3
     144:	85 b9       	out	0x05, r24	; 5
     146:	87 b1       	in	r24, 0x07	; 7
     148:	8e 60       	ori	r24, 0x0E	; 14
     14a:	87 b9       	out	0x07, r24	; 7
     14c:	88 b1       	in	r24, 0x08	; 8
     14e:	8e 60       	ori	r24, 0x0E	; 14
     150:	88 b9       	out	0x08, r24	; 8
     152:	08 95       	ret

00000154 <key_int_init>:
     154:	f8 94       	cli
     156:	ed e6       	ldi	r30, 0x6D	; 109
     158:	f0 e0       	ldi	r31, 0x00	; 0
     15a:	80 81       	ld	r24, Z
     15c:	80 6f       	ori	r24, 0xF0	; 240
     15e:	80 83       	st	Z, r24
     160:	78 94       	sei
     162:	08 95       	ret

00000164 <All_row_to_low>:
     164:	85 b1       	in	r24, 0x05	; 5
     166:	8c 7f       	andi	r24, 0xFC	; 252
     168:	85 b9       	out	0x05, r24	; 5
     16a:	88 b1       	in	r24, 0x08	; 8
     16c:	81 7f       	andi	r24, 0xF1	; 241
     16e:	88 b9       	out	0x08, r24	; 8
     170:	08 95       	ret

00000172 <All_row_to_high>:
     172:	85 b1       	in	r24, 0x05	; 5
     174:	83 60       	ori	r24, 0x03	; 3
     176:	85 b9       	out	0x05, r24	; 5
     178:	88 b1       	in	r24, 0x08	; 8
     17a:	8e 60       	ori	r24, 0x0E	; 14
     17c:	88 b9       	out	0x08, r24	; 8
     17e:	08 95       	ret

00000180 <key_scan>:
     180:	cf 93       	push	r28
     182:	0e 94 b9 00 	call	0x172	; 0x172 <All_row_to_high>
     186:	91 e0       	ldi	r25, 0x01	; 1
     188:	01 c0       	rjmp	.+2      	; 0x18c <key_scan+0xc>
     18a:	9f 5f       	subi	r25, 0xFF	; 255
     18c:	ef ef       	ldi	r30, 0xFF	; 255
     18e:	e9 0f       	add	r30, r25
     190:	e2 30       	cpi	r30, 0x02	; 2
     192:	81 f0       	breq	.+32     	; 0x1b4 <key_scan+0x34>
     194:	28 f4       	brcc	.+10     	; 0x1a0 <key_scan+0x20>
     196:	ee 23       	and	r30, r30
     198:	41 f0       	breq	.+16     	; 0x1aa <key_scan+0x2a>
     19a:	e1 30       	cpi	r30, 0x01	; 1
     19c:	41 f0       	breq	.+16     	; 0x1ae <key_scan+0x2e>
     19e:	20 c0       	rjmp	.+64     	; 0x1e0 <key_scan+0x60>
     1a0:	e3 30       	cpi	r30, 0x03	; 3
     1a2:	59 f0       	breq	.+22     	; 0x1ba <key_scan+0x3a>
     1a4:	e4 30       	cpi	r30, 0x04	; 4
     1a6:	61 f0       	breq	.+24     	; 0x1c0 <key_scan+0x40>
     1a8:	1b c0       	rjmp	.+54     	; 0x1e0 <key_scan+0x60>
     1aa:	28 98       	cbi	0x05, 0	; 5
     1ac:	4d c0       	rjmp	.+154    	; 0x248 <key_scan+0xc8>
     1ae:	28 9a       	sbi	0x05, 0	; 5
     1b0:	29 98       	cbi	0x05, 1	; 5
     1b2:	4a c0       	rjmp	.+148    	; 0x248 <key_scan+0xc8>
     1b4:	29 9a       	sbi	0x05, 1	; 5
     1b6:	41 98       	cbi	0x08, 1	; 8
     1b8:	47 c0       	rjmp	.+142    	; 0x248 <key_scan+0xc8>
     1ba:	41 9a       	sbi	0x08, 1	; 8
     1bc:	42 98       	cbi	0x08, 2	; 8
     1be:	44 c0       	rjmp	.+136    	; 0x248 <key_scan+0xc8>
     1c0:	42 9a       	sbi	0x08, 2	; 8
     1c2:	43 98       	cbi	0x08, 3	; 8
     1c4:	89 b1       	in	r24, 0x09	; 9
     1c6:	82 95       	swap	r24
     1c8:	8f 70       	andi	r24, 0x0F	; 15
     1ca:	8b 30       	cpi	r24, 0x0B	; 11
     1cc:	41 f1       	breq	.+80     	; 0x21e <key_scan+0x9e>
     1ce:	18 f4       	brcc	.+6      	; 0x1d6 <key_scan+0x56>
     1d0:	87 30       	cpi	r24, 0x07	; 7
     1d2:	71 f1       	breq	.+92     	; 0x230 <key_scan+0xb0>
     1d4:	47 c0       	rjmp	.+142    	; 0x264 <key_scan+0xe4>
     1d6:	8d 30       	cpi	r24, 0x0D	; 13
     1d8:	c9 f0       	breq	.+50     	; 0x20c <key_scan+0x8c>
     1da:	8e 30       	cpi	r24, 0x0E	; 14
     1dc:	71 f0       	breq	.+28     	; 0x1fa <key_scan+0x7a>
     1de:	42 c0       	rjmp	.+132    	; 0x264 <key_scan+0xe4>
     1e0:	89 b1       	in	r24, 0x09	; 9
     1e2:	82 95       	swap	r24
     1e4:	8f 70       	andi	r24, 0x0F	; 15
     1e6:	8b 30       	cpi	r24, 0x0B	; 11
     1e8:	d1 f0       	breq	.+52     	; 0x21e <key_scan+0x9e>
     1ea:	18 f4       	brcc	.+6      	; 0x1f2 <key_scan+0x72>
     1ec:	87 30       	cpi	r24, 0x07	; 7
     1ee:	01 f1       	breq	.+64     	; 0x230 <key_scan+0xb0>
     1f0:	27 c0       	rjmp	.+78     	; 0x240 <key_scan+0xc0>
     1f2:	8d 30       	cpi	r24, 0x0D	; 13
     1f4:	59 f0       	breq	.+22     	; 0x20c <key_scan+0x8c>
     1f6:	8e 30       	cpi	r24, 0x0E	; 14
     1f8:	19 f5       	brne	.+70     	; 0x240 <key_scan+0xc0>
     1fa:	f0 e0       	ldi	r31, 0x00	; 0
     1fc:	ee 0f       	add	r30, r30
     1fe:	ff 1f       	adc	r31, r31
     200:	ee 0f       	add	r30, r30
     202:	ff 1f       	adc	r31, r31
     204:	e6 5f       	subi	r30, 0xF6	; 246
     206:	fe 4f       	sbci	r31, 0xFE	; 254
     208:	10 82       	st	Z, r1
     20a:	1a c0       	rjmp	.+52     	; 0x240 <key_scan+0xc0>
     20c:	f0 e0       	ldi	r31, 0x00	; 0
     20e:	ee 0f       	add	r30, r30
     210:	ff 1f       	adc	r31, r31
     212:	ee 0f       	add	r30, r30
     214:	ff 1f       	adc	r31, r31
     216:	e6 5f       	subi	r30, 0xF6	; 246
     218:	fe 4f       	sbci	r31, 0xFE	; 254
     21a:	11 82       	std	Z+1, r1	; 0x01
     21c:	11 c0       	rjmp	.+34     	; 0x240 <key_scan+0xc0>
     21e:	f0 e0       	ldi	r31, 0x00	; 0
     220:	ee 0f       	add	r30, r30
     222:	ff 1f       	adc	r31, r31
     224:	ee 0f       	add	r30, r30
     226:	ff 1f       	adc	r31, r31
     228:	e6 5f       	subi	r30, 0xF6	; 246
     22a:	fe 4f       	sbci	r31, 0xFE	; 254
     22c:	12 82       	std	Z+2, r1	; 0x02
     22e:	08 c0       	rjmp	.+16     	; 0x240 <key_scan+0xc0>
     230:	f0 e0       	ldi	r31, 0x00	; 0
     232:	ee 0f       	add	r30, r30
     234:	ff 1f       	adc	r31, r31
     236:	ee 0f       	add	r30, r30
     238:	ff 1f       	adc	r31, r31
     23a:	e6 5f       	subi	r30, 0xF6	; 246
     23c:	fe 4f       	sbci	r31, 0xFE	; 254
     23e:	13 82       	std	Z+3, r1	; 0x03
     240:	95 30       	cpi	r25, 0x05	; 5
     242:	08 f4       	brcc	.+2      	; 0x246 <key_scan+0xc6>
     244:	a2 cf       	rjmp	.-188    	; 0x18a <key_scan+0xa>
     246:	0e c0       	rjmp	.+28     	; 0x264 <key_scan+0xe4>
     248:	89 b1       	in	r24, 0x09	; 9
     24a:	82 95       	swap	r24
     24c:	8f 70       	andi	r24, 0x0F	; 15
     24e:	8b 30       	cpi	r24, 0x0B	; 11
     250:	31 f3       	breq	.-52     	; 0x21e <key_scan+0x9e>
     252:	18 f4       	brcc	.+6      	; 0x25a <key_scan+0xda>
     254:	87 30       	cpi	r24, 0x07	; 7
     256:	61 f3       	breq	.-40     	; 0x230 <key_scan+0xb0>
     258:	98 cf       	rjmp	.-208    	; 0x18a <key_scan+0xa>
     25a:	8d 30       	cpi	r24, 0x0D	; 13
     25c:	b9 f2       	breq	.-82     	; 0x20c <key_scan+0x8c>
     25e:	8e 30       	cpi	r24, 0x0E	; 14
     260:	61 f2       	breq	.-104    	; 0x1fa <key_scan+0x7a>
     262:	93 cf       	rjmp	.-218    	; 0x18a <key_scan+0xa>
     264:	0e 94 b2 00 	call	0x164	; 0x164 <All_row_to_low>
     268:	c9 b1       	in	r28, 0x09	; 9
     26a:	c2 95       	swap	r28
     26c:	cf 70       	andi	r28, 0x0F	; 15
     26e:	83 e2       	ldi	r24, 0x23	; 35
     270:	91 e0       	ldi	r25, 0x01	; 1
     272:	0e 94 0e 07 	call	0xe1c	; 0xe1c <puts>
     276:	1f 92       	push	r1
     278:	cf 93       	push	r28
     27a:	80 e3       	ldi	r24, 0x30	; 48
     27c:	91 e0       	ldi	r25, 0x01	; 1
     27e:	9f 93       	push	r25
     280:	8f 93       	push	r24
     282:	0e 94 f1 06 	call	0xde2	; 0xde2 <printf>
     286:	0f 90       	pop	r0
     288:	0f 90       	pop	r0
     28a:	0f 90       	pop	r0
     28c:	0f 90       	pop	r0
     28e:	8c 2f       	mov	r24, r28
     290:	cf 91       	pop	r28
     292:	08 95       	ret

00000294 <view_matrix>:
     294:	cf 92       	push	r12
     296:	df 92       	push	r13
     298:	ef 92       	push	r14
     29a:	ff 92       	push	r15
     29c:	0f 93       	push	r16
     29e:	1f 93       	push	r17
     2a0:	cf 93       	push	r28
     2a2:	df 93       	push	r29
     2a4:	c1 2c       	mov	r12, r1
     2a6:	d1 2c       	mov	r13, r1
     2a8:	04 e4       	ldi	r16, 0x44	; 68
     2aa:	11 e0       	ldi	r17, 0x01	; 1
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <view_matrix+0x54>
     2ae:	f7 01       	movw	r30, r14
     2b0:	ec 0f       	add	r30, r28
     2b2:	fd 1f       	adc	r31, r29
     2b4:	80 81       	ld	r24, Z
     2b6:	1f 92       	push	r1
     2b8:	8f 93       	push	r24
     2ba:	1f 93       	push	r17
     2bc:	0f 93       	push	r16
     2be:	0e 94 f1 06 	call	0xde2	; 0xde2 <printf>
     2c2:	21 96       	adiw	r28, 0x01	; 1
     2c4:	0f 90       	pop	r0
     2c6:	0f 90       	pop	r0
     2c8:	0f 90       	pop	r0
     2ca:	0f 90       	pop	r0
     2cc:	c4 30       	cpi	r28, 0x04	; 4
     2ce:	d1 05       	cpc	r29, r1
     2d0:	71 f7       	brne	.-36     	; 0x2ae <view_matrix+0x1a>
     2d2:	8a e0       	ldi	r24, 0x0A	; 10
     2d4:	90 e0       	ldi	r25, 0x00	; 0
     2d6:	0e 94 07 07 	call	0xe0e	; 0xe0e <putchar>
     2da:	2f ef       	ldi	r18, 0xFF	; 255
     2dc:	c2 1a       	sub	r12, r18
     2de:	d2 0a       	sbc	r13, r18
     2e0:	35 e0       	ldi	r19, 0x05	; 5
     2e2:	c3 16       	cp	r12, r19
     2e4:	d1 04       	cpc	r13, r1
     2e6:	61 f0       	breq	.+24     	; 0x300 <view_matrix+0x6c>
     2e8:	c0 e0       	ldi	r28, 0x00	; 0
     2ea:	d0 e0       	ldi	r29, 0x00	; 0
     2ec:	c6 01       	movw	r24, r12
     2ee:	88 0f       	add	r24, r24
     2f0:	99 1f       	adc	r25, r25
     2f2:	88 0f       	add	r24, r24
     2f4:	99 1f       	adc	r25, r25
     2f6:	9c 01       	movw	r18, r24
     2f8:	26 5f       	subi	r18, 0xF6	; 246
     2fa:	3e 4f       	sbci	r19, 0xFE	; 254
     2fc:	79 01       	movw	r14, r18
     2fe:	d7 cf       	rjmp	.-82     	; 0x2ae <view_matrix+0x1a>
     300:	df 91       	pop	r29
     302:	cf 91       	pop	r28
     304:	1f 91       	pop	r17
     306:	0f 91       	pop	r16
     308:	ff 90       	pop	r15
     30a:	ef 90       	pop	r14
     30c:	df 90       	pop	r13
     30e:	cf 90       	pop	r12
     310:	08 95       	ret

00000312 <key_timer_init>:
     312:	f8 94       	cli
     314:	e6 eb       	ldi	r30, 0xB6	; 182
     316:	f0 e0       	ldi	r31, 0x00	; 0
     318:	80 81       	ld	r24, Z
     31a:	8f 7d       	andi	r24, 0xDF	; 223
     31c:	80 83       	st	Z, r24
     31e:	e1 eb       	ldi	r30, 0xB1	; 177
     320:	f0 e0       	ldi	r31, 0x00	; 0
     322:	80 81       	ld	r24, Z
     324:	87 60       	ori	r24, 0x07	; 7
     326:	80 83       	st	Z, r24
     328:	e0 eb       	ldi	r30, 0xB0	; 176
     32a:	f0 e0       	ldi	r31, 0x00	; 0
     32c:	80 81       	ld	r24, Z
     32e:	81 60       	ori	r24, 0x01	; 1
     330:	80 83       	st	Z, r24
     332:	8b e9       	ldi	r24, 0x9B	; 155
     334:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__DATA_REGION_ORIGIN__+0x53>
     338:	78 94       	sei
     33a:	08 95       	ret

0000033c <disable_pc_int>:

void disable_pc_int(void)
{
	cbi(PCICR,PCIE2);//Disable Pin change interrupt 
     33c:	e8 e6       	ldi	r30, 0x68	; 104
     33e:	f0 e0       	ldi	r31, 0x00	; 0
     340:	80 81       	ld	r24, Z
     342:	8b 7f       	andi	r24, 0xFB	; 251
     344:	80 83       	st	Z, r24
	sbi(PCIFR,PCIF2);
     346:	da 9a       	sbi	0x1b, 2	; 27
     348:	08 95       	ret

0000034a <enable_pc_int>:
}

void enable_pc_int(void)
{
	sbi(PCIFR,PCIF2);
     34a:	da 9a       	sbi	0x1b, 2	; 27
	sbi(PCICR,PCIE2);//Enable Pin change interrupt
     34c:	e8 e6       	ldi	r30, 0x68	; 104
     34e:	f0 e0       	ldi	r31, 0x00	; 0
     350:	80 81       	ld	r24, Z
     352:	84 60       	ori	r24, 0x04	; 4
     354:	80 83       	st	Z, r24
     356:	08 95       	ret

00000358 <__vector_5>:
}

ISR(PCINT2_vect) //High to low interrupt occur
{
     358:	1f 92       	push	r1
     35a:	0f 92       	push	r0
     35c:	0f b6       	in	r0, 0x3f	; 63
     35e:	0f 92       	push	r0
     360:	11 24       	eor	r1, r1
     362:	2f 93       	push	r18
     364:	3f 93       	push	r19
     366:	4f 93       	push	r20
     368:	5f 93       	push	r21
     36a:	6f 93       	push	r22
     36c:	7f 93       	push	r23
     36e:	8f 93       	push	r24
     370:	9f 93       	push	r25
     372:	af 93       	push	r26
     374:	bf 93       	push	r27
     376:	ef 93       	push	r30
     378:	ff 93       	push	r31
	printf("isr!\n");
     37a:	8d e4       	ldi	r24, 0x4D	; 77
     37c:	91 e0       	ldi	r25, 0x01	; 1
     37e:	0e 94 0e 07 	call	0xe1c	; 0xe1c <puts>
	phase = 1; 
     382:	81 e0       	ldi	r24, 0x01	; 1
     384:	80 93 e4 03 	sts	0x03E4, r24	; 0x8003e4 <__data_end>
}
     388:	ff 91       	pop	r31
     38a:	ef 91       	pop	r30
     38c:	bf 91       	pop	r27
     38e:	af 91       	pop	r26
     390:	9f 91       	pop	r25
     392:	8f 91       	pop	r24
     394:	7f 91       	pop	r23
     396:	6f 91       	pop	r22
     398:	5f 91       	pop	r21
     39a:	4f 91       	pop	r20
     39c:	3f 91       	pop	r19
     39e:	2f 91       	pop	r18
     3a0:	0f 90       	pop	r0
     3a2:	0f be       	out	0x3f, r0	; 63
     3a4:	0f 90       	pop	r0
     3a6:	1f 90       	pop	r1
     3a8:	18 95       	reti

000003aa <__vector_7>:

ISR(TIMER2_COMPA_vect)
{
     3aa:	1f 92       	push	r1
     3ac:	0f 92       	push	r0
     3ae:	0f b6       	in	r0, 0x3f	; 63
     3b0:	0f 92       	push	r0
     3b2:	11 24       	eor	r1, r1
     3b4:	8f 93       	push	r24
	phase = 2;
     3b6:	82 e0       	ldi	r24, 0x02	; 2
     3b8:	80 93 e4 03 	sts	0x03E4, r24	; 0x8003e4 <__data_end>
	//OCR0A 값 초기화 해줘야 하는지 알아보기
}
     3bc:	8f 91       	pop	r24
     3be:	0f 90       	pop	r0
     3c0:	0f be       	out	0x3f, r0	; 63
     3c2:	0f 90       	pop	r0
     3c4:	1f 90       	pop	r1
     3c6:	18 95       	reti

000003c8 <main>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     3c8:	2f ef       	ldi	r18, 0xFF	; 255
     3ca:	81 ee       	ldi	r24, 0xE1	; 225
     3cc:	94 e0       	ldi	r25, 0x04	; 4
     3ce:	21 50       	subi	r18, 0x01	; 1
     3d0:	80 40       	sbci	r24, 0x00	; 0
     3d2:	90 40       	sbci	r25, 0x00	; 0
     3d4:	e1 f7       	brne	.-8      	; 0x3ce <main+0x6>
     3d6:	00 c0       	rjmp	.+0      	; 0x3d8 <main+0x10>
     3d8:	00 00       	nop
int main(void)
{
    /* Replace with your application code */
	_delay_ms(100);
	
	FILE* fpStdio = fdevopen(usartTxChar,NULL);
     3da:	60 e0       	ldi	r22, 0x00	; 0
     3dc:	70 e0       	ldi	r23, 0x00	; 0
     3de:	88 e1       	ldi	r24, 0x18	; 24
     3e0:	96 e0       	ldi	r25, 0x06	; 6
     3e2:	0e 94 a6 06 	call	0xd4c	; 0xd4c <fdevopen>
	
	uart_init();
     3e6:	0e 94 00 06 	call	0xc00	; 0xc00 <uart_init>
	SPI_Master_Init();
     3ea:	0e 94 e7 05 	call	0xbce	; 0xbce <SPI_Master_Init>
	nrf24_port_init();
     3ee:	0e 94 f2 02 	call	0x5e4	; 0x5e4 <nrf24_port_init>
	key_int_init();
     3f2:	0e 94 aa 00 	call	0x154	; 0x154 <key_int_init>
	key_io_init();
     3f6:	0e 94 94 00 	call	0x128	; 0x128 <key_io_init>
	key_timer_init();
     3fa:	0e 94 89 01 	call	0x312	; 0x312 <key_timer_init>
	i2c_init();
     3fe:	0e 94 fa 05 	call	0xbf4	; 0xbf4 <i2c_init>
	//mtch6102_dump_register();
	nrf24_init();
     402:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <nrf24_init>
	nrf24_dump_registers();
     406:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <nrf24_dump_registers>
	adc_init();
     40a:	0e 94 53 00 	call	0xa6	; 0xa6 <adc_init>
	gen_random_add(tranceiver_addr);
     40e:	8e e1       	ldi	r24, 0x1E	; 30
     410:	91 e0       	ldi	r25, 0x01	; 1
     412:	0e 94 73 00 	call	0xe6	; 0xe6 <gen_random_add>
	adc_stop();
     416:	0e 94 6d 00 	call	0xda	; 0xda <adc_stop>
     41a:	ce e1       	ldi	r28, 0x1E	; 30
     41c:	d1 e0       	ldi	r29, 0x01	; 1
     41e:	0f 2e       	mov	r0, r31
     420:	f3 e2       	ldi	r31, 0x23	; 35
     422:	ef 2e       	mov	r14, r31
     424:	f1 e0       	ldi	r31, 0x01	; 1
     426:	ff 2e       	mov	r15, r31
     428:	f0 2d       	mov	r31, r0
	
	for(uint8_t i=0;i<ADDR_WIDTH;i++)
	{
		printf("tranceiver_addr : %02x \n",tranceiver_addr[i]);
     42a:	02 e5       	ldi	r16, 0x52	; 82
     42c:	11 e0       	ldi	r17, 0x01	; 1
     42e:	89 91       	ld	r24, Y+
     430:	1f 92       	push	r1
     432:	8f 93       	push	r24
     434:	1f 93       	push	r17
     436:	0f 93       	push	r16
     438:	0e 94 f1 06 	call	0xde2	; 0xde2 <printf>
	nrf24_dump_registers();
	adc_init();
	gen_random_add(tranceiver_addr);
	adc_stop();
	
	for(uint8_t i=0;i<ADDR_WIDTH;i++)
     43c:	0f 90       	pop	r0
     43e:	0f 90       	pop	r0
     440:	0f 90       	pop	r0
     442:	0f 90       	pop	r0
     444:	ce 15       	cp	r28, r14
     446:	df 05       	cpc	r29, r15
     448:	91 f7       	brne	.-28     	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
	{
		printf("tranceiver_addr : %02x \n",tranceiver_addr[i]);
	}

	All_row_to_low();
     44a:	0e 94 b2 00 	call	0x164	; 0x164 <All_row_to_low>
	phase = DO_NOTHING;
     44e:	10 92 e4 03 	sts	0x03E4, r1	; 0x8003e4 <__data_end>
	enable_pc_int();
     452:	0e 94 a5 01 	call	0x34a	; 0x34a <enable_pc_int>
	Power_set(power_down);
     456:	82 e0       	ldi	r24, 0x02	; 2
     458:	0e 94 d2 05 	call	0xba4	; 0xba4 <Power_set>
			                      AFTER PIN CHANGE INTERRUPT PHASE
			  ********************************************************************/ 	
			case PIN_CHANGE_INT: //Do 1:1 link,
				disable_pc_int();
				printf("Pin_Chnage_interrupt_occur!\n");
				sbi(TIMSK2,OCIE2A); //Timer Counter interrupt enable #DEFINE 함수로 바꾸기
     45c:	00 e7       	ldi	r16, 0x70	; 112
     45e:	10 e0       	ldi	r17, 0x00	; 0
					key_status = key_scan();
					if(key_status == ALL_KEY_OPEN)
					{
						break;
					}
					printf("do_scanning\r");
     460:	ce e9       	ldi	r28, 0x9E	; 158
     462:	d1 e0       	ldi	r29, 0x01	; 1
				phase = DO_NOTHING;
				All_row_to_high();
				printf("high!\n");
				enable_pc_int();
				printf("low!\n");
				printf("phase : %d \n",phase);
     464:	0f 2e       	mov	r0, r31
     466:	f6 eb       	ldi	r31, 0xB6	; 182
     468:	ef 2e       	mov	r14, r31
     46a:	f1 e0       	ldi	r31, 0x01	; 1
     46c:	ff 2e       	mov	r15, r31
     46e:	f0 2d       	mov	r31, r0
	enable_pc_int();
	Power_set(power_down);

    while (1) 
	{
		switch(phase)
     470:	80 91 e4 03 	lds	r24, 0x03E4	; 0x8003e4 <__data_end>
     474:	81 30       	cpi	r24, 0x01	; 1
     476:	19 f0       	breq	.+6      	; 0x47e <__LOCK_REGION_LENGTH__+0x7e>
     478:	82 30       	cpi	r24, 0x02	; 2
     47a:	89 f0       	breq	.+34     	; 0x49e <__LOCK_REGION_LENGTH__+0x9e>
     47c:	f9 cf       	rjmp	.-14     	; 0x470 <__LOCK_REGION_LENGTH__+0x70>
				
			 /********************************************************************
			                      AFTER PIN CHANGE INTERRUPT PHASE
			  ********************************************************************/ 	
			case PIN_CHANGE_INT: //Do 1:1 link,
				disable_pc_int();
     47e:	0e 94 9e 01 	call	0x33c	; 0x33c <disable_pc_int>
				printf("Pin_Chnage_interrupt_occur!\n");
     482:	8b e6       	ldi	r24, 0x6B	; 107
     484:	91 e0       	ldi	r25, 0x01	; 1
     486:	0e 94 0e 07 	call	0xe1c	; 0xe1c <puts>
				sbi(TIMSK2,OCIE2A); //Timer Counter interrupt enable #DEFINE 함수로 바꾸기
     48a:	f8 01       	movw	r30, r16
     48c:	80 81       	ld	r24, Z
     48e:	82 60       	ori	r24, 0x02	; 2
     490:	80 83       	st	Z, r24
				Power_set(idle);
     492:	80 e0       	ldi	r24, 0x00	; 0
     494:	0e 94 d2 05 	call	0xba4	; 0xba4 <Power_set>
				phase = DO_NOTHING;
     498:	10 92 e4 03 	sts	0x03E4, r1	; 0x8003e4 <__data_end>
				break;
     49c:	e9 cf       	rjmp	.-46     	; 0x470 <__LOCK_REGION_LENGTH__+0x70>
				
			 /********************************************************************
			                      AFTER TIMER INTERRUPT PHASE
			  ********************************************************************/ 
			case TIMER_INT:  //normaral phase, then scan key matrix
				printf("Timer_Over_Flow_occur!\n");
     49e:	87 e8       	ldi	r24, 0x87	; 135
     4a0:	91 e0       	ldi	r25, 0x01	; 1
     4a2:	0e 94 0e 07 	call	0xe1c	; 0xe1c <puts>
				cbi(TIMSK2,OCIE2A); //disable TIMER interrupt #DEFINE 함수로 바꾸기
     4a6:	f8 01       	movw	r30, r16
     4a8:	80 81       	ld	r24, Z
     4aa:	8d 7f       	andi	r24, 0xFD	; 253
     4ac:	80 83       	st	Z, r24
				while(1)
				{
					uint8_t key_status;
					key_status = key_scan();
     4ae:	0e 94 c0 00 	call	0x180	; 0x180 <key_scan>
					if(key_status == ALL_KEY_OPEN)
     4b2:	8f 30       	cpi	r24, 0x0F	; 15
     4b4:	39 f0       	breq	.+14     	; 0x4c4 <__LOCK_REGION_LENGTH__+0xc4>
					{
						break;
					}
					printf("do_scanning\r");
     4b6:	df 93       	push	r29
     4b8:	cf 93       	push	r28
     4ba:	0e 94 f1 06 	call	0xde2	; 0xde2 <printf>
				}
     4be:	0f 90       	pop	r0
     4c0:	0f 90       	pop	r0
     4c2:	f5 cf       	rjmp	.-22     	; 0x4ae <__LOCK_REGION_LENGTH__+0xae>
			
				view_matrix();
     4c4:	0e 94 4a 01 	call	0x294	; 0x294 <view_matrix>
				phase = DO_NOTHING;
     4c8:	10 92 e4 03 	sts	0x03E4, r1	; 0x8003e4 <__data_end>
				All_row_to_high();
     4cc:	0e 94 b9 00 	call	0x172	; 0x172 <All_row_to_high>
				printf("high!\n");
     4d0:	8b ea       	ldi	r24, 0xAB	; 171
     4d2:	91 e0       	ldi	r25, 0x01	; 1
     4d4:	0e 94 0e 07 	call	0xe1c	; 0xe1c <puts>
				enable_pc_int();
     4d8:	0e 94 a5 01 	call	0x34a	; 0x34a <enable_pc_int>
				printf("low!\n");
     4dc:	81 eb       	ldi	r24, 0xB1	; 177
     4de:	91 e0       	ldi	r25, 0x01	; 1
     4e0:	0e 94 0e 07 	call	0xe1c	; 0xe1c <puts>
				printf("phase : %d \n",phase);
     4e4:	80 91 e4 03 	lds	r24, 0x03E4	; 0x8003e4 <__data_end>
     4e8:	1f 92       	push	r1
     4ea:	8f 93       	push	r24
     4ec:	ff 92       	push	r15
     4ee:	ef 92       	push	r14
     4f0:	0e 94 f1 06 	call	0xde2	; 0xde2 <printf>
				All_row_to_low();
     4f4:	0e 94 b2 00 	call	0x164	; 0x164 <All_row_to_low>
				Power_set(power_down);
     4f8:	82 e0       	ldi	r24, 0x02	; 2
     4fa:	0e 94 d2 05 	call	0xba4	; 0xba4 <Power_set>
				//send_data;
				break;
     4fe:	0f 90       	pop	r0
     500:	0f 90       	pop	r0
     502:	0f 90       	pop	r0
     504:	0f 90       	pop	r0
     506:	b4 cf       	rjmp	.-152    	; 0x470 <__LOCK_REGION_LENGTH__+0x70>

00000508 <__vector_1>:
	printf("cur_pos.xpos : %d, cur_pos.ypos : %04d\r",cur_pos.xpos,cur_pos.ypos);
}


ISR(INT0_vect)
{
     508:	1f 92       	push	r1
     50a:	0f 92       	push	r0
     50c:	0f b6       	in	r0, 0x3f	; 63
     50e:	0f 92       	push	r0
     510:	11 24       	eor	r1, r1
     512:	8f 93       	push	r24
	phase = 3;
     514:	83 e0       	ldi	r24, 0x03	; 3
     516:	80 93 e4 03 	sts	0x03E4, r24	; 0x8003e4 <__data_end>
}
     51a:	8f 91       	pop	r24
     51c:	0f 90       	pop	r0
     51e:	0f be       	out	0x3f, r0	; 63
     520:	0f 90       	pop	r0
     522:	1f 90       	pop	r1
     524:	18 95       	reti

00000526 <cs_high>:
	PORTB &= ~CS;
}

void ce_high(void)
{
	PORTB |= CE;
     526:	2a 9a       	sbi	0x05, 2	; 5
     528:	08 95       	ret

0000052a <cs_low>:
     52a:	2a 98       	cbi	0x05, 2	; 5
     52c:	08 95       	ret

0000052e <nrf24_read_reg>:
     52e:	ef 92       	push	r14
     530:	ff 92       	push	r15
     532:	0f 93       	push	r16
     534:	1f 93       	push	r17
     536:	cf 93       	push	r28
     538:	df 93       	push	r29
     53a:	c8 2f       	mov	r28, r24
     53c:	7b 01       	movw	r14, r22
     53e:	8a 01       	movw	r16, r20
     540:	0e 94 95 02 	call	0x52a	; 0x52a <cs_low>
     544:	8c 2f       	mov	r24, r28
     546:	0e 94 f4 05 	call	0xbe8	; 0xbe8 <SPI_TxRx>
     54a:	e1 14       	cp	r14, r1
     54c:	f1 04       	cpc	r15, r1
     54e:	69 f0       	breq	.+26     	; 0x56a <nrf24_read_reg+0x3c>
     550:	10 16       	cp	r1, r16
     552:	11 06       	cpc	r1, r17
     554:	54 f4       	brge	.+20     	; 0x56a <nrf24_read_reg+0x3c>
     556:	e7 01       	movw	r28, r14
     558:	0e 0d       	add	r16, r14
     55a:	1f 1d       	adc	r17, r15
     55c:	8f ef       	ldi	r24, 0xFF	; 255
     55e:	0e 94 f4 05 	call	0xbe8	; 0xbe8 <SPI_TxRx>
     562:	89 93       	st	Y+, r24
     564:	0c 17       	cp	r16, r28
     566:	1d 07       	cpc	r17, r29
     568:	c9 f7       	brne	.-14     	; 0x55c <nrf24_read_reg+0x2e>
     56a:	8f ef       	ldi	r24, 0xFF	; 255
     56c:	0e 94 f4 05 	call	0xbe8	; 0xbe8 <SPI_TxRx>
     570:	c8 2f       	mov	r28, r24
     572:	0e 94 93 02 	call	0x526	; 0x526 <cs_high>
     576:	8c 2f       	mov	r24, r28
     578:	df 91       	pop	r29
     57a:	cf 91       	pop	r28
     57c:	1f 91       	pop	r17
     57e:	0f 91       	pop	r16
     580:	ff 90       	pop	r15
     582:	ef 90       	pop	r14
     584:	08 95       	ret

00000586 <nrf24_write_reg>:
     586:	df 92       	push	r13
     588:	ef 92       	push	r14
     58a:	ff 92       	push	r15
     58c:	0f 93       	push	r16
     58e:	1f 93       	push	r17
     590:	cf 93       	push	r28
     592:	df 93       	push	r29
     594:	c8 2f       	mov	r28, r24
     596:	7b 01       	movw	r14, r22
     598:	8a 01       	movw	r16, r20
     59a:	0e 94 95 02 	call	0x52a	; 0x52a <cs_low>
     59e:	c0 32       	cpi	r28, 0x20	; 32
     5a0:	08 f4       	brcc	.+2      	; 0x5a4 <nrf24_write_reg+0x1e>
     5a2:	c0 5e       	subi	r28, 0xE0	; 224
     5a4:	8c 2f       	mov	r24, r28
     5a6:	0e 94 f4 05 	call	0xbe8	; 0xbe8 <SPI_TxRx>
     5aa:	d8 2e       	mov	r13, r24
     5ac:	e1 14       	cp	r14, r1
     5ae:	f1 04       	cpc	r15, r1
     5b0:	61 f0       	breq	.+24     	; 0x5ca <nrf24_write_reg+0x44>
     5b2:	10 16       	cp	r1, r16
     5b4:	11 06       	cpc	r1, r17
     5b6:	4c f4       	brge	.+18     	; 0x5ca <nrf24_write_reg+0x44>
     5b8:	e7 01       	movw	r28, r14
     5ba:	0e 0d       	add	r16, r14
     5bc:	1f 1d       	adc	r17, r15
     5be:	89 91       	ld	r24, Y+
     5c0:	0e 94 f4 05 	call	0xbe8	; 0xbe8 <SPI_TxRx>
     5c4:	0c 17       	cp	r16, r28
     5c6:	1d 07       	cpc	r17, r29
     5c8:	d1 f7       	brne	.-12     	; 0x5be <nrf24_write_reg+0x38>
     5ca:	0e 94 93 02 	call	0x526	; 0x526 <cs_high>
     5ce:	8d 2d       	mov	r24, r13
     5d0:	df 91       	pop	r29
     5d2:	cf 91       	pop	r28
     5d4:	1f 91       	pop	r17
     5d6:	0f 91       	pop	r16
     5d8:	ff 90       	pop	r15
     5da:	ef 90       	pop	r14
     5dc:	df 90       	pop	r13
     5de:	08 95       	ret

000005e0 <ce_low>:
}

void ce_low(void)
{
	PORTB &= ~CE;
     5e0:	29 98       	cbi	0x05, 1	; 5
     5e2:	08 95       	ret

000005e4 <nrf24_port_init>:
}

void nrf24_port_init(void)
{
	DDRB |= (SCK | MOSI | CS | CE);
     5e4:	84 b1       	in	r24, 0x04	; 4
     5e6:	8e 62       	ori	r24, 0x2E	; 46
     5e8:	84 b9       	out	0x04, r24	; 4
	PORTB |= (MISO | CS);
     5ea:	85 b1       	in	r24, 0x05	; 5
     5ec:	84 61       	ori	r24, 0x14	; 20
     5ee:	85 b9       	out	0x05, r24	; 5
     5f0:	08 95       	ret

000005f2 <nrf24_dump_registers>:
}

/*============================================================================*/

void nrf24_dump_registers(void)
{
     5f2:	af 92       	push	r10
     5f4:	bf 92       	push	r11
     5f6:	cf 92       	push	r12
     5f8:	df 92       	push	r13
     5fa:	ef 92       	push	r14
     5fc:	ff 92       	push	r15
     5fe:	0f 93       	push	r16
     600:	1f 93       	push	r17
     602:	cf 93       	push	r28
     604:	df 93       	push	r29
     606:	00 d0       	rcall	.+0      	; 0x608 <nrf24_dump_registers+0x16>
     608:	00 d0       	rcall	.+0      	; 0x60a <nrf24_dump_registers+0x18>
     60a:	1f 92       	push	r1
     60c:	cd b7       	in	r28, 0x3d	; 61
     60e:	de b7       	in	r29, 0x3e	; 62
    uint8_t     addr[ADDR_WIDTH];
    int         i;

    printf("\n\nnRF24L01 Registers Value\n");
     610:	83 ec       	ldi	r24, 0xC3	; 195
     612:	91 e0       	ldi	r25, 0x01	; 1
     614:	0e 94 0e 07 	call	0xe1c	; 0xe1c <puts>

    printf("    CONFIG : %02X\n", nrf24_read_reg(CONFIG_REG, NULL, 0));
     618:	40 e0       	ldi	r20, 0x00	; 0
     61a:	50 e0       	ldi	r21, 0x00	; 0
     61c:	60 e0       	ldi	r22, 0x00	; 0
     61e:	70 e0       	ldi	r23, 0x00	; 0
     620:	80 e0       	ldi	r24, 0x00	; 0
     622:	0e 94 97 02 	call	0x52e	; 0x52e <nrf24_read_reg>
     626:	1f 92       	push	r1
     628:	8f 93       	push	r24
     62a:	8e ed       	ldi	r24, 0xDE	; 222
     62c:	91 e0       	ldi	r25, 0x01	; 1
     62e:	9f 93       	push	r25
     630:	8f 93       	push	r24
     632:	0e 94 f1 06 	call	0xde2	; 0xde2 <printf>
    printf("     EN_AA : %02X\n", nrf24_read_reg(EN_AA_REG, NULL, 0));
     636:	40 e0       	ldi	r20, 0x00	; 0
     638:	50 e0       	ldi	r21, 0x00	; 0
     63a:	60 e0       	ldi	r22, 0x00	; 0
     63c:	70 e0       	ldi	r23, 0x00	; 0
     63e:	81 e0       	ldi	r24, 0x01	; 1
     640:	0e 94 97 02 	call	0x52e	; 0x52e <nrf24_read_reg>
     644:	1f 92       	push	r1
     646:	8f 93       	push	r24
     648:	81 ef       	ldi	r24, 0xF1	; 241
     64a:	91 e0       	ldi	r25, 0x01	; 1
     64c:	9f 93       	push	r25
     64e:	8f 93       	push	r24
     650:	0e 94 f1 06 	call	0xde2	; 0xde2 <printf>
    printf(" EN_RXADDR : %02X\n", nrf24_read_reg(EN_RXADDR_REG, NULL, 0));
     654:	40 e0       	ldi	r20, 0x00	; 0
     656:	50 e0       	ldi	r21, 0x00	; 0
     658:	60 e0       	ldi	r22, 0x00	; 0
     65a:	70 e0       	ldi	r23, 0x00	; 0
     65c:	82 e0       	ldi	r24, 0x02	; 2
     65e:	0e 94 97 02 	call	0x52e	; 0x52e <nrf24_read_reg>
     662:	1f 92       	push	r1
     664:	8f 93       	push	r24
     666:	84 e0       	ldi	r24, 0x04	; 4
     668:	92 e0       	ldi	r25, 0x02	; 2
     66a:	9f 93       	push	r25
     66c:	8f 93       	push	r24
     66e:	0e 94 f1 06 	call	0xde2	; 0xde2 <printf>
    printf("  SETUP_AW : %02X\n", nrf24_read_reg(SETUP_AW_REG, NULL, 0));
     672:	40 e0       	ldi	r20, 0x00	; 0
     674:	50 e0       	ldi	r21, 0x00	; 0
     676:	60 e0       	ldi	r22, 0x00	; 0
     678:	70 e0       	ldi	r23, 0x00	; 0
     67a:	83 e0       	ldi	r24, 0x03	; 3
     67c:	0e 94 97 02 	call	0x52e	; 0x52e <nrf24_read_reg>
     680:	1f 92       	push	r1
     682:	8f 93       	push	r24
     684:	87 e1       	ldi	r24, 0x17	; 23
     686:	92 e0       	ldi	r25, 0x02	; 2
     688:	9f 93       	push	r25
     68a:	8f 93       	push	r24
     68c:	0e 94 f1 06 	call	0xde2	; 0xde2 <printf>
    printf("SETUP_RETR : %02X\n", nrf24_read_reg(SETUP_RETR_REG, NULL, 0));
     690:	40 e0       	ldi	r20, 0x00	; 0
     692:	50 e0       	ldi	r21, 0x00	; 0
     694:	60 e0       	ldi	r22, 0x00	; 0
     696:	70 e0       	ldi	r23, 0x00	; 0
     698:	84 e0       	ldi	r24, 0x04	; 4
     69a:	0e 94 97 02 	call	0x52e	; 0x52e <nrf24_read_reg>
     69e:	1f 92       	push	r1
     6a0:	8f 93       	push	r24
     6a2:	8a e2       	ldi	r24, 0x2A	; 42
     6a4:	92 e0       	ldi	r25, 0x02	; 2
     6a6:	9f 93       	push	r25
     6a8:	8f 93       	push	r24
     6aa:	0e 94 f1 06 	call	0xde2	; 0xde2 <printf>
    printf("     RF_CH : %02X\n", nrf24_read_reg(RF_CH_REG, NULL, 0));
     6ae:	40 e0       	ldi	r20, 0x00	; 0
     6b0:	50 e0       	ldi	r21, 0x00	; 0
     6b2:	60 e0       	ldi	r22, 0x00	; 0
     6b4:	70 e0       	ldi	r23, 0x00	; 0
     6b6:	85 e0       	ldi	r24, 0x05	; 5
     6b8:	0e 94 97 02 	call	0x52e	; 0x52e <nrf24_read_reg>
     6bc:	1f 92       	push	r1
     6be:	8f 93       	push	r24
     6c0:	8d e3       	ldi	r24, 0x3D	; 61
     6c2:	92 e0       	ldi	r25, 0x02	; 2
     6c4:	9f 93       	push	r25
     6c6:	8f 93       	push	r24
     6c8:	0e 94 f1 06 	call	0xde2	; 0xde2 <printf>
    printf("  RF_SETUP : %02X\n", nrf24_read_reg(RF_SETUP_REG, NULL, 0));
     6cc:	40 e0       	ldi	r20, 0x00	; 0
     6ce:	50 e0       	ldi	r21, 0x00	; 0
     6d0:	60 e0       	ldi	r22, 0x00	; 0
     6d2:	70 e0       	ldi	r23, 0x00	; 0
     6d4:	86 e0       	ldi	r24, 0x06	; 6
     6d6:	0e 94 97 02 	call	0x52e	; 0x52e <nrf24_read_reg>
     6da:	1f 92       	push	r1
     6dc:	8f 93       	push	r24
     6de:	80 e5       	ldi	r24, 0x50	; 80
     6e0:	92 e0       	ldi	r25, 0x02	; 2
     6e2:	9f 93       	push	r25
     6e4:	8f 93       	push	r24
     6e6:	0e 94 f1 06 	call	0xde2	; 0xde2 <printf>
    printf("    STATUS : %02X\n", nrf24_read_reg(STATUS_REG, NULL, 0));
     6ea:	40 e0       	ldi	r20, 0x00	; 0
     6ec:	50 e0       	ldi	r21, 0x00	; 0
     6ee:	60 e0       	ldi	r22, 0x00	; 0
     6f0:	70 e0       	ldi	r23, 0x00	; 0
     6f2:	87 e0       	ldi	r24, 0x07	; 7
     6f4:	0e 94 97 02 	call	0x52e	; 0x52e <nrf24_read_reg>
     6f8:	1f 92       	push	r1
     6fa:	8f 93       	push	r24
     6fc:	83 e6       	ldi	r24, 0x63	; 99
     6fe:	92 e0       	ldi	r25, 0x02	; 2
     700:	9f 93       	push	r25
     702:	8f 93       	push	r24
     704:	0e 94 f1 06 	call	0xde2	; 0xde2 <printf>

    nrf24_read_reg(RX_ADDR_P0_REG, addr, ADDR_WIDTH);
     708:	0f b6       	in	r0, 0x3f	; 63
     70a:	f8 94       	cli
     70c:	de bf       	out	0x3e, r29	; 62
     70e:	0f be       	out	0x3f, r0	; 63
     710:	cd bf       	out	0x3d, r28	; 61
     712:	45 e0       	ldi	r20, 0x05	; 5
     714:	50 e0       	ldi	r21, 0x00	; 0
     716:	be 01       	movw	r22, r28
     718:	6f 5f       	subi	r22, 0xFF	; 255
     71a:	7f 4f       	sbci	r23, 0xFF	; 255
     71c:	8a e0       	ldi	r24, 0x0A	; 10
     71e:	0e 94 97 02 	call	0x52e	; 0x52e <nrf24_read_reg>
    printf("RX_ADDR_P0 : ");
     722:	86 e7       	ldi	r24, 0x76	; 118
     724:	92 e0       	ldi	r25, 0x02	; 2
     726:	9f 93       	push	r25
     728:	8f 93       	push	r24
     72a:	0e 94 f1 06 	call	0xde2	; 0xde2 <printf>
     72e:	fe 01       	movw	r30, r28
     730:	31 96       	adiw	r30, 0x01	; 1
     732:	7f 01       	movw	r14, r30
     734:	6e 01       	movw	r12, r28
     736:	f6 e0       	ldi	r31, 0x06	; 6
     738:	cf 0e       	add	r12, r31
     73a:	d1 1c       	adc	r13, r1
     73c:	0f 90       	pop	r0
     73e:	0f 90       	pop	r0
     740:	87 01       	movw	r16, r14
    for (i=0; i<ADDR_WIDTH; i++)
    printf("%02X", addr[i]);
     742:	0f 2e       	mov	r0, r31
     744:	f4 e8       	ldi	r31, 0x84	; 132
     746:	af 2e       	mov	r10, r31
     748:	f2 e0       	ldi	r31, 0x02	; 2
     74a:	bf 2e       	mov	r11, r31
     74c:	f0 2d       	mov	r31, r0
     74e:	f8 01       	movw	r30, r16
     750:	81 91       	ld	r24, Z+
     752:	8f 01       	movw	r16, r30
     754:	1f 92       	push	r1
     756:	8f 93       	push	r24
     758:	bf 92       	push	r11
     75a:	af 92       	push	r10
     75c:	0e 94 f1 06 	call	0xde2	; 0xde2 <printf>
    printf("  RF_SETUP : %02X\n", nrf24_read_reg(RF_SETUP_REG, NULL, 0));
    printf("    STATUS : %02X\n", nrf24_read_reg(STATUS_REG, NULL, 0));

    nrf24_read_reg(RX_ADDR_P0_REG, addr, ADDR_WIDTH);
    printf("RX_ADDR_P0 : ");
    for (i=0; i<ADDR_WIDTH; i++)
     760:	0f 90       	pop	r0
     762:	0f 90       	pop	r0
     764:	0f 90       	pop	r0
     766:	0f 90       	pop	r0
     768:	0c 15       	cp	r16, r12
     76a:	1d 05       	cpc	r17, r13
     76c:	81 f7       	brne	.-32     	; 0x74e <nrf24_dump_registers+0x15c>
    printf("%02X", addr[i]);
    printf("\n");
     76e:	8a e0       	ldi	r24, 0x0A	; 10
     770:	90 e0       	ldi	r25, 0x00	; 0
     772:	0e 94 07 07 	call	0xe0e	; 0xe0e <putchar>

    nrf24_read_reg(RX_ADDR_P1_REG, addr, ADDR_WIDTH);
     776:	45 e0       	ldi	r20, 0x05	; 5
     778:	50 e0       	ldi	r21, 0x00	; 0
     77a:	be 01       	movw	r22, r28
     77c:	6f 5f       	subi	r22, 0xFF	; 255
     77e:	7f 4f       	sbci	r23, 0xFF	; 255
     780:	8b e0       	ldi	r24, 0x0B	; 11
     782:	0e 94 97 02 	call	0x52e	; 0x52e <nrf24_read_reg>
    printf("RX_ADDR_P1 : ");
     786:	89 e8       	ldi	r24, 0x89	; 137
     788:	92 e0       	ldi	r25, 0x02	; 2
     78a:	9f 93       	push	r25
     78c:	8f 93       	push	r24
     78e:	0e 94 f1 06 	call	0xde2	; 0xde2 <printf>
     792:	0f 90       	pop	r0
     794:	0f 90       	pop	r0
     796:	87 01       	movw	r16, r14
    for (i=0; i<ADDR_WIDTH; i++)
    printf("%02X", addr[i]);
     798:	0f 2e       	mov	r0, r31
     79a:	f4 e8       	ldi	r31, 0x84	; 132
     79c:	af 2e       	mov	r10, r31
     79e:	f2 e0       	ldi	r31, 0x02	; 2
     7a0:	bf 2e       	mov	r11, r31
     7a2:	f0 2d       	mov	r31, r0
     7a4:	f8 01       	movw	r30, r16
     7a6:	81 91       	ld	r24, Z+
     7a8:	8f 01       	movw	r16, r30
     7aa:	1f 92       	push	r1
     7ac:	8f 93       	push	r24
     7ae:	bf 92       	push	r11
     7b0:	af 92       	push	r10
     7b2:	0e 94 f1 06 	call	0xde2	; 0xde2 <printf>
    printf("%02X", addr[i]);
    printf("\n");

    nrf24_read_reg(RX_ADDR_P1_REG, addr, ADDR_WIDTH);
    printf("RX_ADDR_P1 : ");
    for (i=0; i<ADDR_WIDTH; i++)
     7b6:	0f 90       	pop	r0
     7b8:	0f 90       	pop	r0
     7ba:	0f 90       	pop	r0
     7bc:	0f 90       	pop	r0
     7be:	0c 15       	cp	r16, r12
     7c0:	1d 05       	cpc	r17, r13
     7c2:	81 f7       	brne	.-32     	; 0x7a4 <nrf24_dump_registers+0x1b2>
    printf("%02X", addr[i]);
    printf("\n");
     7c4:	8a e0       	ldi	r24, 0x0A	; 10
     7c6:	90 e0       	ldi	r25, 0x00	; 0
     7c8:	0e 94 07 07 	call	0xe0e	; 0xe0e <putchar>

    printf("RX_ADDR_P2 : %02X\n", nrf24_read_reg(RX_ADDR_P2_REG, NULL, 0));
     7cc:	40 e0       	ldi	r20, 0x00	; 0
     7ce:	50 e0       	ldi	r21, 0x00	; 0
     7d0:	60 e0       	ldi	r22, 0x00	; 0
     7d2:	70 e0       	ldi	r23, 0x00	; 0
     7d4:	8c e0       	ldi	r24, 0x0C	; 12
     7d6:	0e 94 97 02 	call	0x52e	; 0x52e <nrf24_read_reg>
     7da:	1f 92       	push	r1
     7dc:	8f 93       	push	r24
     7de:	87 e9       	ldi	r24, 0x97	; 151
     7e0:	92 e0       	ldi	r25, 0x02	; 2
     7e2:	9f 93       	push	r25
     7e4:	8f 93       	push	r24
     7e6:	0e 94 f1 06 	call	0xde2	; 0xde2 <printf>
    printf("RX_ADDR_P3 : %02X\n", nrf24_read_reg(RX_ADDR_P3_REG, NULL, 0));
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e0       	ldi	r21, 0x00	; 0
     7ee:	60 e0       	ldi	r22, 0x00	; 0
     7f0:	70 e0       	ldi	r23, 0x00	; 0
     7f2:	8d e0       	ldi	r24, 0x0D	; 13
     7f4:	0e 94 97 02 	call	0x52e	; 0x52e <nrf24_read_reg>
     7f8:	1f 92       	push	r1
     7fa:	8f 93       	push	r24
     7fc:	8a ea       	ldi	r24, 0xAA	; 170
     7fe:	92 e0       	ldi	r25, 0x02	; 2
     800:	9f 93       	push	r25
     802:	8f 93       	push	r24
     804:	0e 94 f1 06 	call	0xde2	; 0xde2 <printf>
    printf("RX_ADDR_P4 : %02X\n", nrf24_read_reg(RX_ADDR_P4_REG, NULL, 0));
     808:	40 e0       	ldi	r20, 0x00	; 0
     80a:	50 e0       	ldi	r21, 0x00	; 0
     80c:	60 e0       	ldi	r22, 0x00	; 0
     80e:	70 e0       	ldi	r23, 0x00	; 0
     810:	8e e0       	ldi	r24, 0x0E	; 14
     812:	0e 94 97 02 	call	0x52e	; 0x52e <nrf24_read_reg>
     816:	1f 92       	push	r1
     818:	8f 93       	push	r24
     81a:	8d eb       	ldi	r24, 0xBD	; 189
     81c:	92 e0       	ldi	r25, 0x02	; 2
     81e:	9f 93       	push	r25
     820:	8f 93       	push	r24
     822:	0e 94 f1 06 	call	0xde2	; 0xde2 <printf>
    printf("RX_ADDR_P5 : %02X\n", nrf24_read_reg(RX_ADDR_P5_REG, NULL, 0));
     826:	40 e0       	ldi	r20, 0x00	; 0
     828:	50 e0       	ldi	r21, 0x00	; 0
     82a:	60 e0       	ldi	r22, 0x00	; 0
     82c:	70 e0       	ldi	r23, 0x00	; 0
     82e:	8f e0       	ldi	r24, 0x0F	; 15
     830:	0e 94 97 02 	call	0x52e	; 0x52e <nrf24_read_reg>
     834:	1f 92       	push	r1
     836:	8f 93       	push	r24
     838:	80 ed       	ldi	r24, 0xD0	; 208
     83a:	92 e0       	ldi	r25, 0x02	; 2
     83c:	9f 93       	push	r25
     83e:	8f 93       	push	r24
     840:	0e 94 f1 06 	call	0xde2	; 0xde2 <printf>

    nrf24_read_reg(TX_ADDR_REG, addr, ADDR_WIDTH);
     844:	45 e0       	ldi	r20, 0x05	; 5
     846:	50 e0       	ldi	r21, 0x00	; 0
     848:	be 01       	movw	r22, r28
     84a:	6f 5f       	subi	r22, 0xFF	; 255
     84c:	7f 4f       	sbci	r23, 0xFF	; 255
     84e:	80 e1       	ldi	r24, 0x10	; 16
     850:	0e 94 97 02 	call	0x52e	; 0x52e <nrf24_read_reg>
    printf("   TX_ADDR : ");
     854:	83 ee       	ldi	r24, 0xE3	; 227
     856:	92 e0       	ldi	r25, 0x02	; 2
     858:	9f 93       	push	r25
     85a:	8f 93       	push	r24
     85c:	0e 94 f1 06 	call	0xde2	; 0xde2 <printf>
     860:	0f b6       	in	r0, 0x3f	; 63
     862:	f8 94       	cli
     864:	de bf       	out	0x3e, r29	; 62
     866:	0f be       	out	0x3f, r0	; 63
     868:	cd bf       	out	0x3d, r28	; 61
    for (i=0; i<ADDR_WIDTH; i++)
    printf("%02X", addr[i]);
     86a:	04 e8       	ldi	r16, 0x84	; 132
     86c:	12 e0       	ldi	r17, 0x02	; 2
     86e:	f7 01       	movw	r30, r14
     870:	81 91       	ld	r24, Z+
     872:	7f 01       	movw	r14, r30
     874:	1f 92       	push	r1
     876:	8f 93       	push	r24
     878:	1f 93       	push	r17
     87a:	0f 93       	push	r16
     87c:	0e 94 f1 06 	call	0xde2	; 0xde2 <printf>
    printf("RX_ADDR_P4 : %02X\n", nrf24_read_reg(RX_ADDR_P4_REG, NULL, 0));
    printf("RX_ADDR_P5 : %02X\n", nrf24_read_reg(RX_ADDR_P5_REG, NULL, 0));

    nrf24_read_reg(TX_ADDR_REG, addr, ADDR_WIDTH);
    printf("   TX_ADDR : ");
    for (i=0; i<ADDR_WIDTH; i++)
     880:	0f 90       	pop	r0
     882:	0f 90       	pop	r0
     884:	0f 90       	pop	r0
     886:	0f 90       	pop	r0
     888:	ec 14       	cp	r14, r12
     88a:	fd 04       	cpc	r15, r13
     88c:	81 f7       	brne	.-32     	; 0x86e <nrf24_dump_registers+0x27c>
    printf("%02X", addr[i]);
    printf("\n");
     88e:	8a e0       	ldi	r24, 0x0A	; 10
     890:	90 e0       	ldi	r25, 0x00	; 0
     892:	0e 94 07 07 	call	0xe0e	; 0xe0e <putchar>

    printf(" RX_PWD_P0 : %02X\n", nrf24_read_reg(RX_PWD_P0_REG, NULL, 0));
     896:	40 e0       	ldi	r20, 0x00	; 0
     898:	50 e0       	ldi	r21, 0x00	; 0
     89a:	60 e0       	ldi	r22, 0x00	; 0
     89c:	70 e0       	ldi	r23, 0x00	; 0
     89e:	81 e1       	ldi	r24, 0x11	; 17
     8a0:	0e 94 97 02 	call	0x52e	; 0x52e <nrf24_read_reg>
     8a4:	1f 92       	push	r1
     8a6:	8f 93       	push	r24
     8a8:	81 ef       	ldi	r24, 0xF1	; 241
     8aa:	92 e0       	ldi	r25, 0x02	; 2
     8ac:	9f 93       	push	r25
     8ae:	8f 93       	push	r24
     8b0:	0e 94 f1 06 	call	0xde2	; 0xde2 <printf>
    printf(" RX_PWD_P1 : %02X\n", nrf24_read_reg(RX_PWD_P1_REG, NULL, 0));
     8b4:	40 e0       	ldi	r20, 0x00	; 0
     8b6:	50 e0       	ldi	r21, 0x00	; 0
     8b8:	60 e0       	ldi	r22, 0x00	; 0
     8ba:	70 e0       	ldi	r23, 0x00	; 0
     8bc:	82 e1       	ldi	r24, 0x12	; 18
     8be:	0e 94 97 02 	call	0x52e	; 0x52e <nrf24_read_reg>
     8c2:	1f 92       	push	r1
     8c4:	8f 93       	push	r24
     8c6:	84 e0       	ldi	r24, 0x04	; 4
     8c8:	93 e0       	ldi	r25, 0x03	; 3
     8ca:	9f 93       	push	r25
     8cc:	8f 93       	push	r24
     8ce:	0e 94 f1 06 	call	0xde2	; 0xde2 <printf>
    printf(" RX_PWD_P2 : %02X\n", nrf24_read_reg(RX_PWD_P2_REG, NULL, 0));
     8d2:	40 e0       	ldi	r20, 0x00	; 0
     8d4:	50 e0       	ldi	r21, 0x00	; 0
     8d6:	60 e0       	ldi	r22, 0x00	; 0
     8d8:	70 e0       	ldi	r23, 0x00	; 0
     8da:	83 e1       	ldi	r24, 0x13	; 19
     8dc:	0e 94 97 02 	call	0x52e	; 0x52e <nrf24_read_reg>
     8e0:	1f 92       	push	r1
     8e2:	8f 93       	push	r24
     8e4:	87 e1       	ldi	r24, 0x17	; 23
     8e6:	93 e0       	ldi	r25, 0x03	; 3
     8e8:	9f 93       	push	r25
     8ea:	8f 93       	push	r24
     8ec:	0e 94 f1 06 	call	0xde2	; 0xde2 <printf>
    printf(" RX_PWD_P3 : %02X\n", nrf24_read_reg(RX_PWD_P3_REG, NULL, 0));
     8f0:	40 e0       	ldi	r20, 0x00	; 0
     8f2:	50 e0       	ldi	r21, 0x00	; 0
     8f4:	60 e0       	ldi	r22, 0x00	; 0
     8f6:	70 e0       	ldi	r23, 0x00	; 0
     8f8:	84 e1       	ldi	r24, 0x14	; 20
     8fa:	0e 94 97 02 	call	0x52e	; 0x52e <nrf24_read_reg>
     8fe:	1f 92       	push	r1
     900:	8f 93       	push	r24
     902:	8a e2       	ldi	r24, 0x2A	; 42
     904:	93 e0       	ldi	r25, 0x03	; 3
     906:	9f 93       	push	r25
     908:	8f 93       	push	r24
     90a:	0e 94 f1 06 	call	0xde2	; 0xde2 <printf>
    printf(" RX_PWD_P4 : %02X\n", nrf24_read_reg(RX_PWD_P4_REG, NULL, 0));
     90e:	40 e0       	ldi	r20, 0x00	; 0
     910:	50 e0       	ldi	r21, 0x00	; 0
     912:	60 e0       	ldi	r22, 0x00	; 0
     914:	70 e0       	ldi	r23, 0x00	; 0
     916:	85 e1       	ldi	r24, 0x15	; 21
     918:	0e 94 97 02 	call	0x52e	; 0x52e <nrf24_read_reg>
     91c:	1f 92       	push	r1
     91e:	8f 93       	push	r24
     920:	8d e3       	ldi	r24, 0x3D	; 61
     922:	93 e0       	ldi	r25, 0x03	; 3
     924:	9f 93       	push	r25
     926:	8f 93       	push	r24
     928:	0e 94 f1 06 	call	0xde2	; 0xde2 <printf>
    printf(" RX_PWD_P5 : %02X\n", nrf24_read_reg(RX_PWD_P5_REG, NULL, 0));
     92c:	40 e0       	ldi	r20, 0x00	; 0
     92e:	50 e0       	ldi	r21, 0x00	; 0
     930:	60 e0       	ldi	r22, 0x00	; 0
     932:	70 e0       	ldi	r23, 0x00	; 0
     934:	86 e1       	ldi	r24, 0x16	; 22
     936:	0e 94 97 02 	call	0x52e	; 0x52e <nrf24_read_reg>
     93a:	1f 92       	push	r1
     93c:	8f 93       	push	r24
     93e:	80 e5       	ldi	r24, 0x50	; 80
     940:	93 e0       	ldi	r25, 0x03	; 3
     942:	9f 93       	push	r25
     944:	8f 93       	push	r24
     946:	0e 94 f1 06 	call	0xde2	; 0xde2 <printf>

    printf("FIFO_STATUS: %02X\n", nrf24_read_reg(FIFO_STATUS_REG, NULL, 0));
     94a:	40 e0       	ldi	r20, 0x00	; 0
     94c:	50 e0       	ldi	r21, 0x00	; 0
     94e:	60 e0       	ldi	r22, 0x00	; 0
     950:	70 e0       	ldi	r23, 0x00	; 0
     952:	87 e1       	ldi	r24, 0x17	; 23
     954:	0e 94 97 02 	call	0x52e	; 0x52e <nrf24_read_reg>
     958:	1f 92       	push	r1
     95a:	8f 93       	push	r24
     95c:	83 e6       	ldi	r24, 0x63	; 99
     95e:	93 e0       	ldi	r25, 0x03	; 3
     960:	9f 93       	push	r25
     962:	8f 93       	push	r24
     964:	0e 94 f1 06 	call	0xde2	; 0xde2 <printf>
    printf("     DYNPD : %02X\n", nrf24_read_reg(DYNPD_REG, NULL, 0));
     968:	40 e0       	ldi	r20, 0x00	; 0
     96a:	50 e0       	ldi	r21, 0x00	; 0
     96c:	60 e0       	ldi	r22, 0x00	; 0
     96e:	70 e0       	ldi	r23, 0x00	; 0
     970:	8c e1       	ldi	r24, 0x1C	; 28
     972:	0e 94 97 02 	call	0x52e	; 0x52e <nrf24_read_reg>
     976:	1f 92       	push	r1
     978:	8f 93       	push	r24
     97a:	86 e7       	ldi	r24, 0x76	; 118
     97c:	93 e0       	ldi	r25, 0x03	; 3
     97e:	9f 93       	push	r25
     980:	8f 93       	push	r24
     982:	0e 94 f1 06 	call	0xde2	; 0xde2 <printf>
    printf("   FEATURE : %02X\n", nrf24_read_reg(FEATURE_REG, NULL, 0));
     986:	0f b6       	in	r0, 0x3f	; 63
     988:	f8 94       	cli
     98a:	de bf       	out	0x3e, r29	; 62
     98c:	0f be       	out	0x3f, r0	; 63
     98e:	cd bf       	out	0x3d, r28	; 61
     990:	40 e0       	ldi	r20, 0x00	; 0
     992:	50 e0       	ldi	r21, 0x00	; 0
     994:	60 e0       	ldi	r22, 0x00	; 0
     996:	70 e0       	ldi	r23, 0x00	; 0
     998:	8d e1       	ldi	r24, 0x1D	; 29
     99a:	0e 94 97 02 	call	0x52e	; 0x52e <nrf24_read_reg>
     99e:	1f 92       	push	r1
     9a0:	8f 93       	push	r24
     9a2:	89 e8       	ldi	r24, 0x89	; 137
     9a4:	93 e0       	ldi	r25, 0x03	; 3
     9a6:	9f 93       	push	r25
     9a8:	8f 93       	push	r24
     9aa:	0e 94 f1 06 	call	0xde2	; 0xde2 <printf>
}
     9ae:	0f 90       	pop	r0
     9b0:	0f 90       	pop	r0
     9b2:	0f 90       	pop	r0
     9b4:	0f 90       	pop	r0
     9b6:	0f 90       	pop	r0
     9b8:	0f 90       	pop	r0
     9ba:	0f 90       	pop	r0
     9bc:	0f 90       	pop	r0
     9be:	0f 90       	pop	r0
     9c0:	df 91       	pop	r29
     9c2:	cf 91       	pop	r28
     9c4:	1f 91       	pop	r17
     9c6:	0f 91       	pop	r16
     9c8:	ff 90       	pop	r15
     9ca:	ef 90       	pop	r14
     9cc:	df 90       	pop	r13
     9ce:	cf 90       	pop	r12
     9d0:	bf 90       	pop	r11
     9d2:	af 90       	pop	r10
     9d4:	08 95       	ret

000009d6 <nrf24_init>:

uint8_t  tranceiver_addr[ADDR_WIDTH] = {0x12, 0x34, 0x56, 0x78, 0x90};	
	
void nrf24_init(void)
{
     9d6:	cf 93       	push	r28
     9d8:	df 93       	push	r29
     9da:	00 d0       	rcall	.+0      	; 0x9dc <nrf24_init+0x6>
     9dc:	1f 92       	push	r1
     9de:	cd b7       	in	r28, 0x3d	; 61
     9e0:	de b7       	in	r29, 0x3e	; 62
	ce_low();
     9e2:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <ce_low>
	cs_high();
     9e6:	0e 94 93 02 	call	0x526	; 0x526 <cs_high>
     9ea:	8f e3       	ldi	r24, 0x3F	; 63
     9ec:	9c e9       	ldi	r25, 0x9C	; 156
     9ee:	01 97       	sbiw	r24, 0x01	; 1
     9f0:	f1 f7       	brne	.-4      	; 0x9ee <nrf24_init+0x18>
     9f2:	00 c0       	rjmp	.+0      	; 0x9f4 <nrf24_init+0x1e>
     9f4:	00 00       	nop
	_delay_ms(10);
	printf("ok\n");
     9f6:	8c e9       	ldi	r24, 0x9C	; 156
     9f8:	93 e0       	ldi	r25, 0x03	; 3
     9fa:	0e 94 0e 07 	call	0xe1c	; 0xe1c <puts>
	cs_high();
}

static void nrf24_close_pipe(enum nrf_pipe pipe)
{
	uint8_t     aa = 0;
     9fe:	1a 82       	std	Y+2, r1	; 0x02
	uint8_t     rxaddr = 0;
     a00:	19 82       	std	Y+1, r1	; 0x01
	{
		aa = nrf24_read_reg(EN_AA_REG, NULL, 0) & ~(1<<pipe);
		rxaddr = nrf24_read_reg(EN_RXADDR_REG, NULL, 0) & ~(1<<pipe);
	}

	nrf24_write_reg(EN_AA_REG, &aa, 1);
     a02:	41 e0       	ldi	r20, 0x01	; 1
     a04:	50 e0       	ldi	r21, 0x00	; 0
     a06:	be 01       	movw	r22, r28
     a08:	6e 5f       	subi	r22, 0xFE	; 254
     a0a:	7f 4f       	sbci	r23, 0xFF	; 255
     a0c:	81 e0       	ldi	r24, 0x01	; 1
     a0e:	0e 94 c3 02 	call	0x586	; 0x586 <nrf24_write_reg>
	nrf24_write_reg(EN_RXADDR_REG, &rxaddr, 1);
     a12:	41 e0       	ldi	r20, 0x01	; 1
     a14:	50 e0       	ldi	r21, 0x00	; 0
     a16:	be 01       	movw	r22, r28
     a18:	6f 5f       	subi	r22, 0xFF	; 255
     a1a:	7f 4f       	sbci	r23, 0xFF	; 255
     a1c:	82 e0       	ldi	r24, 0x02	; 2
     a1e:	0e 94 c3 02 	call	0x586	; 0x586 <nrf24_write_reg>
}

static void nrf24_open_pipe(enum nrf_pipe pipe)
{
	uint8_t     aa = 0x3F;
     a22:	8f e3       	ldi	r24, 0x3F	; 63
     a24:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t     rxaddr = 0x3F;
     a26:	89 83       	std	Y+1, r24	; 0x01

	if (pipe != NRF_ALL)
	{
		aa = nrf24_read_reg(EN_AA_REG, NULL, 0) | (1<<pipe);
     a28:	40 e0       	ldi	r20, 0x00	; 0
     a2a:	50 e0       	ldi	r21, 0x00	; 0
     a2c:	60 e0       	ldi	r22, 0x00	; 0
     a2e:	70 e0       	ldi	r23, 0x00	; 0
     a30:	81 e0       	ldi	r24, 0x01	; 1
     a32:	0e 94 97 02 	call	0x52e	; 0x52e <nrf24_read_reg>
     a36:	81 60       	ori	r24, 0x01	; 1
     a38:	8a 83       	std	Y+2, r24	; 0x02
		rxaddr = nrf24_read_reg(EN_RXADDR_REG, NULL, 0) | (1<<pipe);
     a3a:	40 e0       	ldi	r20, 0x00	; 0
     a3c:	50 e0       	ldi	r21, 0x00	; 0
     a3e:	60 e0       	ldi	r22, 0x00	; 0
     a40:	70 e0       	ldi	r23, 0x00	; 0
     a42:	82 e0       	ldi	r24, 0x02	; 2
     a44:	0e 94 97 02 	call	0x52e	; 0x52e <nrf24_read_reg>
     a48:	81 60       	ori	r24, 0x01	; 1
     a4a:	89 83       	std	Y+1, r24	; 0x01
	}

	nrf24_write_reg(EN_AA_REG, &aa, 1);
     a4c:	41 e0       	ldi	r20, 0x01	; 1
     a4e:	50 e0       	ldi	r21, 0x00	; 0
     a50:	be 01       	movw	r22, r28
     a52:	6e 5f       	subi	r22, 0xFE	; 254
     a54:	7f 4f       	sbci	r23, 0xFF	; 255
     a56:	81 e0       	ldi	r24, 0x01	; 1
     a58:	0e 94 c3 02 	call	0x586	; 0x586 <nrf24_write_reg>
	nrf24_write_reg(EN_RXADDR_REG, &rxaddr, 1);
     a5c:	41 e0       	ldi	r20, 0x01	; 1
     a5e:	50 e0       	ldi	r21, 0x00	; 0
     a60:	be 01       	movw	r22, r28
     a62:	6f 5f       	subi	r22, 0xFF	; 255
     a64:	7f 4f       	sbci	r23, 0xFF	; 255
     a66:	82 e0       	ldi	r24, 0x02	; 2
     a68:	0e 94 c3 02 	call	0x586	; 0x586 <nrf24_write_reg>
}

static void nrf24_crc_mode(enum crc_mode crc)
{	
	uint8_t     config = 0;
     a6c:	19 82       	std	Y+1, r1	; 0x01
	
	config = (nrf24_read_reg(CONFIG_REG, NULL, 0) & ~0x0C) | (crc << 2);
     a6e:	40 e0       	ldi	r20, 0x00	; 0
     a70:	50 e0       	ldi	r21, 0x00	; 0
     a72:	60 e0       	ldi	r22, 0x00	; 0
     a74:	70 e0       	ldi	r23, 0x00	; 0
     a76:	80 e0       	ldi	r24, 0x00	; 0
     a78:	0e 94 97 02 	call	0x52e	; 0x52e <nrf24_read_reg>
     a7c:	8c 60       	ori	r24, 0x0C	; 12
     a7e:	89 83       	std	Y+1, r24	; 0x01
	nrf24_write_reg(CONFIG_REG, &config, 1);
     a80:	41 e0       	ldi	r20, 0x01	; 1
     a82:	50 e0       	ldi	r21, 0x00	; 0
     a84:	be 01       	movw	r22, r28
     a86:	6f 5f       	subi	r22, 0xFF	; 255
     a88:	7f 4f       	sbci	r23, 0xFF	; 255
     a8a:	80 e0       	ldi	r24, 0x00	; 0
     a8c:	0e 94 c3 02 	call	0x586	; 0x586 <nrf24_write_reg>
}

static void nrf24_auto_retr(uint8_t arc, uint16_t ard)
{
	uint8_t     data = (((ard/250)-1) << 4) | arc;
     a90:	8f e1       	ldi	r24, 0x1F	; 31
     a92:	89 83       	std	Y+1, r24	; 0x01

	nrf24_write_reg(SETUP_RETR_REG, &data, 1);
     a94:	41 e0       	ldi	r20, 0x01	; 1
     a96:	50 e0       	ldi	r21, 0x00	; 0
     a98:	be 01       	movw	r22, r28
     a9a:	6f 5f       	subi	r22, 0xFF	; 255
     a9c:	7f 4f       	sbci	r23, 0xFF	; 255
     a9e:	84 e0       	ldi	r24, 0x04	; 4
     aa0:	0e 94 c3 02 	call	0x586	; 0x586 <nrf24_write_reg>
     aa4:	83 e0       	ldi	r24, 0x03	; 3
     aa6:	89 83       	std	Y+1, r24	; 0x01
}

static void nrf24_addr_width(enum address_width aw)
{
	nrf24_write_reg(SETUP_AW_REG, (uint8_t*)&aw, 1);
     aa8:	41 e0       	ldi	r20, 0x01	; 1
     aaa:	50 e0       	ldi	r21, 0x00	; 0
     aac:	be 01       	movw	r22, r28
     aae:	6f 5f       	subi	r22, 0xFF	; 255
     ab0:	7f 4f       	sbci	r23, 0xFF	; 255
     ab2:	0e 94 c3 02 	call	0x586	; 0x586 <nrf24_write_reg>
}

static void nrf24_set_addr(enum nrf_pipe pipe, uint8_t *addr)
{
	uint8_t     aw = nrf24_read_reg(SETUP_AW_REG, NULL, 0) + 2; //BYTE수와 매칭하기 위한 OFFSET +2 
     ab6:	40 e0       	ldi	r20, 0x00	; 0
     ab8:	50 e0       	ldi	r21, 0x00	; 0
     aba:	60 e0       	ldi	r22, 0x00	; 0
     abc:	70 e0       	ldi	r23, 0x00	; 0
     abe:	83 e0       	ldi	r24, 0x03	; 3
     ac0:	0e 94 97 02 	call	0x52e	; 0x52e <nrf24_read_reg>
	switch (pipe)
	{
		case NRF_PIPE0:
		case NRF_PIPE1:
		case NRF_TX:
		nrf24_write_reg(RX_ADDR_P0_REG + pipe, addr, aw);
     ac4:	8e 5f       	subi	r24, 0xFE	; 254
     ac6:	48 2f       	mov	r20, r24
     ac8:	50 e0       	ldi	r21, 0x00	; 0
     aca:	6e e1       	ldi	r22, 0x1E	; 30
     acc:	71 e0       	ldi	r23, 0x01	; 1
     ace:	80 e1       	ldi	r24, 0x10	; 16
     ad0:	0e 94 c3 02 	call	0x586	; 0x586 <nrf24_write_reg>
	nrf24_write_reg(SETUP_AW_REG, (uint8_t*)&aw, 1);
}

static void nrf24_set_addr(enum nrf_pipe pipe, uint8_t *addr)
{
	uint8_t     aw = nrf24_read_reg(SETUP_AW_REG, NULL, 0) + 2; //BYTE수와 매칭하기 위한 OFFSET +2 
     ad4:	40 e0       	ldi	r20, 0x00	; 0
     ad6:	50 e0       	ldi	r21, 0x00	; 0
     ad8:	60 e0       	ldi	r22, 0x00	; 0
     ada:	70 e0       	ldi	r23, 0x00	; 0
     adc:	83 e0       	ldi	r24, 0x03	; 3
     ade:	0e 94 97 02 	call	0x52e	; 0x52e <nrf24_read_reg>
	switch (pipe)
	{
		case NRF_PIPE0:
		case NRF_PIPE1:
		case NRF_TX:
		nrf24_write_reg(RX_ADDR_P0_REG + pipe, addr, aw);
     ae2:	8e 5f       	subi	r24, 0xFE	; 254
     ae4:	48 2f       	mov	r20, r24
     ae6:	50 e0       	ldi	r21, 0x00	; 0
     ae8:	6e e1       	ldi	r22, 0x1E	; 30
     aea:	71 e0       	ldi	r23, 0x01	; 1
     aec:	8a e0       	ldi	r24, 0x0A	; 10
     aee:	0e 94 c3 02 	call	0x586	; 0x586 <nrf24_write_reg>

}

static void nrf24_op_mode(enum op_mode mode)
{
	uint8_t     config = nrf24_read_reg(CONFIG_REG, NULL, 0);
     af2:	40 e0       	ldi	r20, 0x00	; 0
     af4:	50 e0       	ldi	r21, 0x00	; 0
     af6:	60 e0       	ldi	r22, 0x00	; 0
     af8:	70 e0       	ldi	r23, 0x00	; 0
     afa:	80 e0       	ldi	r24, 0x00	; 0
     afc:	0e 94 97 02 	call	0x52e	; 0x52e <nrf24_read_reg>

	if (mode == NRF_PTX)
	{
		config &= ~PRIM_RX;
     b00:	8e 7f       	andi	r24, 0xFE	; 254
     b02:	8a 83       	std	Y+2, r24	; 0x02
	else
	{
		config |= PRIM_RX;
	}

	nrf24_write_reg(CONFIG_REG, &config, 1);
     b04:	41 e0       	ldi	r20, 0x01	; 1
     b06:	50 e0       	ldi	r21, 0x00	; 0
     b08:	be 01       	movw	r22, r28
     b0a:	6e 5f       	subi	r22, 0xFE	; 254
     b0c:	7f 4f       	sbci	r23, 0xFF	; 255
     b0e:	80 e0       	ldi	r24, 0x00	; 0
     b10:	0e 94 c3 02 	call	0x586	; 0x586 <nrf24_write_reg>
     b14:	8c e4       	ldi	r24, 0x4C	; 76
     b16:	8a 83       	std	Y+2, r24	; 0x02
}

static void nrf24_rf_channel(uint8_t rf_ch)
{
	nrf24_write_reg(RF_CH_REG, (uint8_t*)&rf_ch, 1);
     b18:	41 e0       	ldi	r20, 0x01	; 1
     b1a:	50 e0       	ldi	r21, 0x00	; 0
     b1c:	be 01       	movw	r22, r28
     b1e:	6e 5f       	subi	r22, 0xFE	; 254
     b20:	7f 4f       	sbci	r23, 0xFF	; 255
     b22:	85 e0       	ldi	r24, 0x05	; 5
     b24:	0e 94 c3 02 	call	0x586	; 0x586 <nrf24_write_reg>
}

static void nrf24_rf_data_rate(enum data_rate bps)
{
	uint8_t     rf = nrf24_read_reg(RF_SETUP_REG, NULL, 0);
     b28:	40 e0       	ldi	r20, 0x00	; 0
     b2a:	50 e0       	ldi	r21, 0x00	; 0
     b2c:	60 e0       	ldi	r22, 0x00	; 0
     b2e:	70 e0       	ldi	r23, 0x00	; 0
     b30:	86 e0       	ldi	r24, 0x06	; 6
     b32:	0e 94 97 02 	call	0x52e	; 0x52e <nrf24_read_reg>

	if (bps == NRF_1MBPS)
	{
		rf &= ~(1<<3);
     b36:	87 7f       	andi	r24, 0xF7	; 247
     b38:	8b 83       	std	Y+3, r24	; 0x03
	else
	{
		rf |= (1<<3);
	}

	nrf24_write_reg(RF_SETUP_REG, &rf, 1);
     b3a:	41 e0       	ldi	r20, 0x01	; 1
     b3c:	50 e0       	ldi	r21, 0x00	; 0
     b3e:	be 01       	movw	r22, r28
     b40:	6d 5f       	subi	r22, 0xFD	; 253
     b42:	7f 4f       	sbci	r23, 0xFF	; 255
     b44:	86 e0       	ldi	r24, 0x06	; 6
     b46:	0e 94 c3 02 	call	0x586	; 0x586 <nrf24_write_reg>
	nrf24_write_reg(CONFIG_REG, &config, 1);
}

static void nrf24_flush_tx(void)
{
	nrf24_write_reg(FLUSH_TX, NULL, 0);
     b4a:	40 e0       	ldi	r20, 0x00	; 0
     b4c:	50 e0       	ldi	r21, 0x00	; 0
     b4e:	60 e0       	ldi	r22, 0x00	; 0
     b50:	70 e0       	ldi	r23, 0x00	; 0
     b52:	81 ee       	ldi	r24, 0xE1	; 225
     b54:	0e 94 c3 02 	call	0x586	; 0x586 <nrf24_write_reg>

}

static void nrf24_flush_rx(void)
{
	nrf24_write_reg(FLUSH_RX, NULL, 0);
     b58:	40 e0       	ldi	r20, 0x00	; 0
     b5a:	50 e0       	ldi	r21, 0x00	; 0
     b5c:	60 e0       	ldi	r22, 0x00	; 0
     b5e:	70 e0       	ldi	r23, 0x00	; 0
     b60:	82 ee       	ldi	r24, 0xE2	; 226
     b62:	0e 94 c3 02 	call	0x586	; 0x586 <nrf24_write_reg>
	nrf24_write_reg(RF_SETUP_REG, &rf, 1);
}

static void nrf24_power_mode(enum pwr_mode mode)
{
	uint8_t     config = nrf24_read_reg(CONFIG_REG, NULL, 0);
     b66:	40 e0       	ldi	r20, 0x00	; 0
     b68:	50 e0       	ldi	r21, 0x00	; 0
     b6a:	60 e0       	ldi	r22, 0x00	; 0
     b6c:	70 e0       	ldi	r23, 0x00	; 0
     b6e:	80 e0       	ldi	r24, 0x00	; 0
     b70:	0e 94 97 02 	call	0x52e	; 0x52e <nrf24_read_reg>
	{
		config &= ~POWER_UP;
	}
	else
	{
		config |= POWER_UP;
     b74:	82 60       	ori	r24, 0x02	; 2
     b76:	8b 83       	std	Y+3, r24	; 0x03
	}

	nrf24_write_reg(CONFIG_REG, &config, 1);
     b78:	41 e0       	ldi	r20, 0x01	; 1
     b7a:	50 e0       	ldi	r21, 0x00	; 0
     b7c:	be 01       	movw	r22, r28
     b7e:	6d 5f       	subi	r22, 0xFD	; 253
     b80:	7f 4f       	sbci	r23, 0xFF	; 255
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	0e 94 c3 02 	call	0x586	; 0x586 <nrf24_write_reg>
     b88:	8f e3       	ldi	r24, 0x3F	; 63
     b8a:	9c e9       	ldi	r25, 0x9C	; 156
     b8c:	01 97       	sbiw	r24, 0x01	; 1
     b8e:	f1 f7       	brne	.-4      	; 0xb8c <nrf24_init+0x1b6>
     b90:	00 c0       	rjmp	.+0      	; 0xb92 <nrf24_init+0x1bc>
     b92:	00 00       	nop
	nrf24_flush_rx();

	nrf24_power_mode(NRF_PWR_UP);

	_delay_ms(10);
}
     b94:	0f 90       	pop	r0
     b96:	0f 90       	pop	r0
     b98:	0f 90       	pop	r0
     b9a:	df 91       	pop	r29
     b9c:	cf 91       	pop	r28
     b9e:	08 95       	ret

00000ba0 <Sleep_cpu>:
	cbi(SMCR,SE); //SLEEP DISABLE
}

void Sleep_cpu(void)
{
	__asm__ __volatile__ ( "sleep" "\n\t" :: );
     ba0:	88 95       	sleep
     ba2:	08 95       	ret

00000ba4 <Power_set>:
	CLKPR = 0x80; //low byte 레지스터에 0000을 동시에 써야 8bit에 값 쓰임.
	sbi(CLKPR,clk_divide_val>>1);
} 

void Power_set(enum power_mode mode_val) //avr core는 wakeup후 ISR수행이후 4CYCLE이 지난 다음 다시 SLEEP함.
{
     ba4:	cf 93       	push	r28
     ba6:	c8 2f       	mov	r28, r24
	printf("Enter sleep Mode\n");
     ba8:	82 ed       	ldi	r24, 0xD2	; 210
     baa:	93 e0       	ldi	r25, 0x03	; 3
     bac:	0e 94 0e 07 	call	0xe1c	; 0xe1c <puts>
	SMCR |= (mode_val<<1);
     bb0:	93 b7       	in	r25, 0x33	; 51
     bb2:	8c 2f       	mov	r24, r28
     bb4:	88 0f       	add	r24, r24
     bb6:	89 2b       	or	r24, r25
     bb8:	83 bf       	out	0x33, r24	; 51
	//SMCR |= (uint8_t)mode_val<<1; //SLEEP MODE SETTING
	sbi(SMCR,SE); //SLEEP ENABLE
     bba:	83 b7       	in	r24, 0x33	; 51
     bbc:	81 60       	ori	r24, 0x01	; 1
     bbe:	83 bf       	out	0x33, r24	; 51
	Sleep_cpu();
     bc0:	0e 94 d0 05 	call	0xba0	; 0xba0 <Sleep_cpu>
	cbi(SMCR,SE); //SLEEP DISABLE
     bc4:	83 b7       	in	r24, 0x33	; 51
     bc6:	8e 7f       	andi	r24, 0xFE	; 254
     bc8:	83 bf       	out	0x33, r24	; 51
}
     bca:	cf 91       	pop	r28
     bcc:	08 95       	ret

00000bce <SPI_Master_Init>:
     bce:	25 9a       	sbi	0x04, 5	; 4
     bd0:	23 9a       	sbi	0x04, 3	; 4
     bd2:	22 9a       	sbi	0x04, 2	; 4
     bd4:	24 98       	cbi	0x04, 4	; 4
     bd6:	8f ef       	ldi	r24, 0xFF	; 255
     bd8:	85 b9       	out	0x05, r24	; 5
     bda:	8c b5       	in	r24, 0x2c	; 44
     bdc:	80 64       	ori	r24, 0x40	; 64
     bde:	8c bd       	out	0x2c, r24	; 44
     be0:	8c b5       	in	r24, 0x2c	; 44
     be2:	80 61       	ori	r24, 0x10	; 16
     be4:	8c bd       	out	0x2c, r24	; 44
     be6:	08 95       	ret

00000be8 <SPI_TxRx>:
     be8:	8e bd       	out	0x2e, r24	; 46
     bea:	0d b4       	in	r0, 0x2d	; 45
     bec:	07 fe       	sbrs	r0, 7
     bee:	fd cf       	rjmp	.-6      	; 0xbea <SPI_TxRx+0x2>
     bf0:	8e b5       	in	r24, 0x2e	; 46
     bf2:	08 95       	ret

00000bf4 <i2c_init>:
     bf4:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
     bf8:	8c e0       	ldi	r24, 0x0C	; 12
     bfa:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__DATA_REGION_ORIGIN__+0x58>
     bfe:	08 95       	ret

00000c00 <uart_init>:
     c00:	e0 ec       	ldi	r30, 0xC0	; 192
     c02:	f0 e0       	ldi	r31, 0x00	; 0
     c04:	80 81       	ld	r24, Z
     c06:	82 60       	ori	r24, 0x02	; 2
     c08:	80 83       	st	Z, r24
     c0a:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
     c0e:	80 e1       	ldi	r24, 0x10	; 16
     c10:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
     c14:	e2 ec       	ldi	r30, 0xC2	; 194
     c16:	f0 e0       	ldi	r31, 0x00	; 0
     c18:	80 81       	ld	r24, Z
     c1a:	86 60       	ori	r24, 0x06	; 6
     c1c:	80 83       	st	Z, r24
     c1e:	e1 ec       	ldi	r30, 0xC1	; 193
     c20:	f0 e0       	ldi	r31, 0x00	; 0
     c22:	80 81       	ld	r24, Z
     c24:	80 61       	ori	r24, 0x10	; 16
     c26:	80 83       	st	Z, r24
     c28:	80 81       	ld	r24, Z
     c2a:	88 60       	ori	r24, 0x08	; 8
     c2c:	80 83       	st	Z, r24
     c2e:	08 95       	ret

00000c30 <usartTxChar>:
     c30:	e0 ec       	ldi	r30, 0xC0	; 192
     c32:	f0 e0       	ldi	r31, 0x00	; 0
     c34:	90 81       	ld	r25, Z
     c36:	95 ff       	sbrs	r25, 5
     c38:	fd cf       	rjmp	.-6      	; 0xc34 <usartTxChar+0x4>
     c3a:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
     c3e:	80 e0       	ldi	r24, 0x00	; 0
     c40:	90 e0       	ldi	r25, 0x00	; 0
     c42:	08 95       	ret

00000c44 <__divmodhi4>:
     c44:	97 fb       	bst	r25, 7
     c46:	07 2e       	mov	r0, r23
     c48:	16 f4       	brtc	.+4      	; 0xc4e <__divmodhi4+0xa>
     c4a:	00 94       	com	r0
     c4c:	07 d0       	rcall	.+14     	; 0xc5c <__divmodhi4_neg1>
     c4e:	77 fd       	sbrc	r23, 7
     c50:	09 d0       	rcall	.+18     	; 0xc64 <__divmodhi4_neg2>
     c52:	0e 94 36 06 	call	0xc6c	; 0xc6c <__udivmodhi4>
     c56:	07 fc       	sbrc	r0, 7
     c58:	05 d0       	rcall	.+10     	; 0xc64 <__divmodhi4_neg2>
     c5a:	3e f4       	brtc	.+14     	; 0xc6a <__divmodhi4_exit>

00000c5c <__divmodhi4_neg1>:
     c5c:	90 95       	com	r25
     c5e:	81 95       	neg	r24
     c60:	9f 4f       	sbci	r25, 0xFF	; 255
     c62:	08 95       	ret

00000c64 <__divmodhi4_neg2>:
     c64:	70 95       	com	r23
     c66:	61 95       	neg	r22
     c68:	7f 4f       	sbci	r23, 0xFF	; 255

00000c6a <__divmodhi4_exit>:
     c6a:	08 95       	ret

00000c6c <__udivmodhi4>:
     c6c:	aa 1b       	sub	r26, r26
     c6e:	bb 1b       	sub	r27, r27
     c70:	51 e1       	ldi	r21, 0x11	; 17
     c72:	07 c0       	rjmp	.+14     	; 0xc82 <__udivmodhi4_ep>

00000c74 <__udivmodhi4_loop>:
     c74:	aa 1f       	adc	r26, r26
     c76:	bb 1f       	adc	r27, r27
     c78:	a6 17       	cp	r26, r22
     c7a:	b7 07       	cpc	r27, r23
     c7c:	10 f0       	brcs	.+4      	; 0xc82 <__udivmodhi4_ep>
     c7e:	a6 1b       	sub	r26, r22
     c80:	b7 0b       	sbc	r27, r23

00000c82 <__udivmodhi4_ep>:
     c82:	88 1f       	adc	r24, r24
     c84:	99 1f       	adc	r25, r25
     c86:	5a 95       	dec	r21
     c88:	a9 f7       	brne	.-22     	; 0xc74 <__udivmodhi4_loop>
     c8a:	80 95       	com	r24
     c8c:	90 95       	com	r25
     c8e:	bc 01       	movw	r22, r24
     c90:	cd 01       	movw	r24, r26
     c92:	08 95       	ret

00000c94 <do_rand>:
     c94:	8f 92       	push	r8
     c96:	9f 92       	push	r9
     c98:	af 92       	push	r10
     c9a:	bf 92       	push	r11
     c9c:	cf 92       	push	r12
     c9e:	df 92       	push	r13
     ca0:	ef 92       	push	r14
     ca2:	ff 92       	push	r15
     ca4:	cf 93       	push	r28
     ca6:	df 93       	push	r29
     ca8:	ec 01       	movw	r28, r24
     caa:	68 81       	ld	r22, Y
     cac:	79 81       	ldd	r23, Y+1	; 0x01
     cae:	8a 81       	ldd	r24, Y+2	; 0x02
     cb0:	9b 81       	ldd	r25, Y+3	; 0x03
     cb2:	61 15       	cp	r22, r1
     cb4:	71 05       	cpc	r23, r1
     cb6:	81 05       	cpc	r24, r1
     cb8:	91 05       	cpc	r25, r1
     cba:	21 f4       	brne	.+8      	; 0xcc4 <do_rand+0x30>
     cbc:	64 e2       	ldi	r22, 0x24	; 36
     cbe:	79 ed       	ldi	r23, 0xD9	; 217
     cc0:	8b e5       	ldi	r24, 0x5B	; 91
     cc2:	97 e0       	ldi	r25, 0x07	; 7
     cc4:	2d e1       	ldi	r18, 0x1D	; 29
     cc6:	33 ef       	ldi	r19, 0xF3	; 243
     cc8:	41 e0       	ldi	r20, 0x01	; 1
     cca:	50 e0       	ldi	r21, 0x00	; 0
     ccc:	0e 94 13 0b 	call	0x1626	; 0x1626 <__divmodsi4>
     cd0:	49 01       	movw	r8, r18
     cd2:	5a 01       	movw	r10, r20
     cd4:	9b 01       	movw	r18, r22
     cd6:	ac 01       	movw	r20, r24
     cd8:	a7 ea       	ldi	r26, 0xA7	; 167
     cda:	b1 e4       	ldi	r27, 0x41	; 65
     cdc:	0e 94 32 0b 	call	0x1664	; 0x1664 <__muluhisi3>
     ce0:	6b 01       	movw	r12, r22
     ce2:	7c 01       	movw	r14, r24
     ce4:	ac ee       	ldi	r26, 0xEC	; 236
     ce6:	b4 ef       	ldi	r27, 0xF4	; 244
     ce8:	a5 01       	movw	r20, r10
     cea:	94 01       	movw	r18, r8
     cec:	0e 94 40 0b 	call	0x1680	; 0x1680 <__mulohisi3>
     cf0:	dc 01       	movw	r26, r24
     cf2:	cb 01       	movw	r24, r22
     cf4:	8c 0d       	add	r24, r12
     cf6:	9d 1d       	adc	r25, r13
     cf8:	ae 1d       	adc	r26, r14
     cfa:	bf 1d       	adc	r27, r15
     cfc:	b7 ff       	sbrs	r27, 7
     cfe:	03 c0       	rjmp	.+6      	; 0xd06 <do_rand+0x72>
     d00:	01 97       	sbiw	r24, 0x01	; 1
     d02:	a1 09       	sbc	r26, r1
     d04:	b0 48       	sbci	r27, 0x80	; 128
     d06:	88 83       	st	Y, r24
     d08:	99 83       	std	Y+1, r25	; 0x01
     d0a:	aa 83       	std	Y+2, r26	; 0x02
     d0c:	bb 83       	std	Y+3, r27	; 0x03
     d0e:	9f 77       	andi	r25, 0x7F	; 127
     d10:	df 91       	pop	r29
     d12:	cf 91       	pop	r28
     d14:	ff 90       	pop	r15
     d16:	ef 90       	pop	r14
     d18:	df 90       	pop	r13
     d1a:	cf 90       	pop	r12
     d1c:	bf 90       	pop	r11
     d1e:	af 90       	pop	r10
     d20:	9f 90       	pop	r9
     d22:	8f 90       	pop	r8
     d24:	08 95       	ret

00000d26 <rand_r>:
     d26:	0e 94 4a 06 	call	0xc94	; 0xc94 <do_rand>
     d2a:	08 95       	ret

00000d2c <rand>:
     d2c:	80 e0       	ldi	r24, 0x00	; 0
     d2e:	91 e0       	ldi	r25, 0x01	; 1
     d30:	0e 94 4a 06 	call	0xc94	; 0xc94 <do_rand>
     d34:	08 95       	ret

00000d36 <srand>:
     d36:	a0 e0       	ldi	r26, 0x00	; 0
     d38:	b0 e0       	ldi	r27, 0x00	; 0
     d3a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
     d3e:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
     d42:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__data_start+0x2>
     d46:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__data_start+0x3>
     d4a:	08 95       	ret

00000d4c <fdevopen>:
     d4c:	0f 93       	push	r16
     d4e:	1f 93       	push	r17
     d50:	cf 93       	push	r28
     d52:	df 93       	push	r29
     d54:	00 97       	sbiw	r24, 0x00	; 0
     d56:	31 f4       	brne	.+12     	; 0xd64 <fdevopen+0x18>
     d58:	61 15       	cp	r22, r1
     d5a:	71 05       	cpc	r23, r1
     d5c:	19 f4       	brne	.+6      	; 0xd64 <fdevopen+0x18>
     d5e:	80 e0       	ldi	r24, 0x00	; 0
     d60:	90 e0       	ldi	r25, 0x00	; 0
     d62:	3a c0       	rjmp	.+116    	; 0xdd8 <fdevopen+0x8c>
     d64:	8b 01       	movw	r16, r22
     d66:	ec 01       	movw	r28, r24
     d68:	6e e0       	ldi	r22, 0x0E	; 14
     d6a:	70 e0       	ldi	r23, 0x00	; 0
     d6c:	81 e0       	ldi	r24, 0x01	; 1
     d6e:	90 e0       	ldi	r25, 0x00	; 0
     d70:	0e 94 1f 09 	call	0x123e	; 0x123e <calloc>
     d74:	fc 01       	movw	r30, r24
     d76:	89 2b       	or	r24, r25
     d78:	91 f3       	breq	.-28     	; 0xd5e <fdevopen+0x12>
     d7a:	80 e8       	ldi	r24, 0x80	; 128
     d7c:	83 83       	std	Z+3, r24	; 0x03
     d7e:	01 15       	cp	r16, r1
     d80:	11 05       	cpc	r17, r1
     d82:	71 f0       	breq	.+28     	; 0xda0 <fdevopen+0x54>
     d84:	13 87       	std	Z+11, r17	; 0x0b
     d86:	02 87       	std	Z+10, r16	; 0x0a
     d88:	81 e8       	ldi	r24, 0x81	; 129
     d8a:	83 83       	std	Z+3, r24	; 0x03
     d8c:	80 91 e5 03 	lds	r24, 0x03E5	; 0x8003e5 <__iob>
     d90:	90 91 e6 03 	lds	r25, 0x03E6	; 0x8003e6 <__iob+0x1>
     d94:	89 2b       	or	r24, r25
     d96:	21 f4       	brne	.+8      	; 0xda0 <fdevopen+0x54>
     d98:	f0 93 e6 03 	sts	0x03E6, r31	; 0x8003e6 <__iob+0x1>
     d9c:	e0 93 e5 03 	sts	0x03E5, r30	; 0x8003e5 <__iob>
     da0:	20 97       	sbiw	r28, 0x00	; 0
     da2:	c9 f0       	breq	.+50     	; 0xdd6 <fdevopen+0x8a>
     da4:	d1 87       	std	Z+9, r29	; 0x09
     da6:	c0 87       	std	Z+8, r28	; 0x08
     da8:	83 81       	ldd	r24, Z+3	; 0x03
     daa:	82 60       	ori	r24, 0x02	; 2
     dac:	83 83       	std	Z+3, r24	; 0x03
     dae:	80 91 e7 03 	lds	r24, 0x03E7	; 0x8003e7 <__iob+0x2>
     db2:	90 91 e8 03 	lds	r25, 0x03E8	; 0x8003e8 <__iob+0x3>
     db6:	89 2b       	or	r24, r25
     db8:	71 f4       	brne	.+28     	; 0xdd6 <fdevopen+0x8a>
     dba:	f0 93 e8 03 	sts	0x03E8, r31	; 0x8003e8 <__iob+0x3>
     dbe:	e0 93 e7 03 	sts	0x03E7, r30	; 0x8003e7 <__iob+0x2>
     dc2:	80 91 e9 03 	lds	r24, 0x03E9	; 0x8003e9 <__iob+0x4>
     dc6:	90 91 ea 03 	lds	r25, 0x03EA	; 0x8003ea <__iob+0x5>
     dca:	89 2b       	or	r24, r25
     dcc:	21 f4       	brne	.+8      	; 0xdd6 <fdevopen+0x8a>
     dce:	f0 93 ea 03 	sts	0x03EA, r31	; 0x8003ea <__iob+0x5>
     dd2:	e0 93 e9 03 	sts	0x03E9, r30	; 0x8003e9 <__iob+0x4>
     dd6:	cf 01       	movw	r24, r30
     dd8:	df 91       	pop	r29
     dda:	cf 91       	pop	r28
     ddc:	1f 91       	pop	r17
     dde:	0f 91       	pop	r16
     de0:	08 95       	ret

00000de2 <printf>:
     de2:	a0 e0       	ldi	r26, 0x00	; 0
     de4:	b0 e0       	ldi	r27, 0x00	; 0
     de6:	e7 ef       	ldi	r30, 0xF7	; 247
     de8:	f6 e0       	ldi	r31, 0x06	; 6
     dea:	0c 94 55 0b 	jmp	0x16aa	; 0x16aa <__prologue_saves__+0x20>
     dee:	ae 01       	movw	r20, r28
     df0:	4b 5f       	subi	r20, 0xFB	; 251
     df2:	5f 4f       	sbci	r21, 0xFF	; 255
     df4:	fa 01       	movw	r30, r20
     df6:	61 91       	ld	r22, Z+
     df8:	71 91       	ld	r23, Z+
     dfa:	af 01       	movw	r20, r30
     dfc:	80 91 e7 03 	lds	r24, 0x03E7	; 0x8003e7 <__iob+0x2>
     e00:	90 91 e8 03 	lds	r25, 0x03E8	; 0x8003e8 <__iob+0x3>
     e04:	0e 94 3e 07 	call	0xe7c	; 0xe7c <vfprintf>
     e08:	e2 e0       	ldi	r30, 0x02	; 2
     e0a:	0c 94 71 0b 	jmp	0x16e2	; 0x16e2 <__epilogue_restores__+0x20>

00000e0e <putchar>:
     e0e:	60 91 e7 03 	lds	r22, 0x03E7	; 0x8003e7 <__iob+0x2>
     e12:	70 91 e8 03 	lds	r23, 0x03E8	; 0x8003e8 <__iob+0x3>
     e16:	0e 94 79 0a 	call	0x14f2	; 0x14f2 <fputc>
     e1a:	08 95       	ret

00000e1c <puts>:
     e1c:	0f 93       	push	r16
     e1e:	1f 93       	push	r17
     e20:	cf 93       	push	r28
     e22:	df 93       	push	r29
     e24:	e0 91 e7 03 	lds	r30, 0x03E7	; 0x8003e7 <__iob+0x2>
     e28:	f0 91 e8 03 	lds	r31, 0x03E8	; 0x8003e8 <__iob+0x3>
     e2c:	23 81       	ldd	r18, Z+3	; 0x03
     e2e:	21 ff       	sbrs	r18, 1
     e30:	1b c0       	rjmp	.+54     	; 0xe68 <puts+0x4c>
     e32:	8c 01       	movw	r16, r24
     e34:	d0 e0       	ldi	r29, 0x00	; 0
     e36:	c0 e0       	ldi	r28, 0x00	; 0
     e38:	f8 01       	movw	r30, r16
     e3a:	81 91       	ld	r24, Z+
     e3c:	8f 01       	movw	r16, r30
     e3e:	60 91 e7 03 	lds	r22, 0x03E7	; 0x8003e7 <__iob+0x2>
     e42:	70 91 e8 03 	lds	r23, 0x03E8	; 0x8003e8 <__iob+0x3>
     e46:	db 01       	movw	r26, r22
     e48:	18 96       	adiw	r26, 0x08	; 8
     e4a:	ed 91       	ld	r30, X+
     e4c:	fc 91       	ld	r31, X
     e4e:	19 97       	sbiw	r26, 0x09	; 9
     e50:	88 23       	and	r24, r24
     e52:	31 f0       	breq	.+12     	; 0xe60 <puts+0x44>
     e54:	09 95       	icall
     e56:	89 2b       	or	r24, r25
     e58:	79 f3       	breq	.-34     	; 0xe38 <puts+0x1c>
     e5a:	df ef       	ldi	r29, 0xFF	; 255
     e5c:	cf ef       	ldi	r28, 0xFF	; 255
     e5e:	ec cf       	rjmp	.-40     	; 0xe38 <puts+0x1c>
     e60:	8a e0       	ldi	r24, 0x0A	; 10
     e62:	09 95       	icall
     e64:	89 2b       	or	r24, r25
     e66:	19 f0       	breq	.+6      	; 0xe6e <puts+0x52>
     e68:	8f ef       	ldi	r24, 0xFF	; 255
     e6a:	9f ef       	ldi	r25, 0xFF	; 255
     e6c:	02 c0       	rjmp	.+4      	; 0xe72 <puts+0x56>
     e6e:	8d 2f       	mov	r24, r29
     e70:	9c 2f       	mov	r25, r28
     e72:	df 91       	pop	r29
     e74:	cf 91       	pop	r28
     e76:	1f 91       	pop	r17
     e78:	0f 91       	pop	r16
     e7a:	08 95       	ret

00000e7c <vfprintf>:
     e7c:	ab e0       	ldi	r26, 0x0B	; 11
     e7e:	b0 e0       	ldi	r27, 0x00	; 0
     e80:	e4 e4       	ldi	r30, 0x44	; 68
     e82:	f7 e0       	ldi	r31, 0x07	; 7
     e84:	0c 94 45 0b 	jmp	0x168a	; 0x168a <__prologue_saves__>
     e88:	6c 01       	movw	r12, r24
     e8a:	7b 01       	movw	r14, r22
     e8c:	8a 01       	movw	r16, r20
     e8e:	fc 01       	movw	r30, r24
     e90:	17 82       	std	Z+7, r1	; 0x07
     e92:	16 82       	std	Z+6, r1	; 0x06
     e94:	83 81       	ldd	r24, Z+3	; 0x03
     e96:	81 ff       	sbrs	r24, 1
     e98:	cc c1       	rjmp	.+920    	; 0x1232 <vfprintf+0x3b6>
     e9a:	ce 01       	movw	r24, r28
     e9c:	01 96       	adiw	r24, 0x01	; 1
     e9e:	3c 01       	movw	r6, r24
     ea0:	f6 01       	movw	r30, r12
     ea2:	93 81       	ldd	r25, Z+3	; 0x03
     ea4:	f7 01       	movw	r30, r14
     ea6:	93 fd       	sbrc	r25, 3
     ea8:	85 91       	lpm	r24, Z+
     eaa:	93 ff       	sbrs	r25, 3
     eac:	81 91       	ld	r24, Z+
     eae:	7f 01       	movw	r14, r30
     eb0:	88 23       	and	r24, r24
     eb2:	09 f4       	brne	.+2      	; 0xeb6 <vfprintf+0x3a>
     eb4:	ba c1       	rjmp	.+884    	; 0x122a <vfprintf+0x3ae>
     eb6:	85 32       	cpi	r24, 0x25	; 37
     eb8:	39 f4       	brne	.+14     	; 0xec8 <vfprintf+0x4c>
     eba:	93 fd       	sbrc	r25, 3
     ebc:	85 91       	lpm	r24, Z+
     ebe:	93 ff       	sbrs	r25, 3
     ec0:	81 91       	ld	r24, Z+
     ec2:	7f 01       	movw	r14, r30
     ec4:	85 32       	cpi	r24, 0x25	; 37
     ec6:	29 f4       	brne	.+10     	; 0xed2 <vfprintf+0x56>
     ec8:	b6 01       	movw	r22, r12
     eca:	90 e0       	ldi	r25, 0x00	; 0
     ecc:	0e 94 79 0a 	call	0x14f2	; 0x14f2 <fputc>
     ed0:	e7 cf       	rjmp	.-50     	; 0xea0 <vfprintf+0x24>
     ed2:	91 2c       	mov	r9, r1
     ed4:	21 2c       	mov	r2, r1
     ed6:	31 2c       	mov	r3, r1
     ed8:	ff e1       	ldi	r31, 0x1F	; 31
     eda:	f3 15       	cp	r31, r3
     edc:	d8 f0       	brcs	.+54     	; 0xf14 <vfprintf+0x98>
     ede:	8b 32       	cpi	r24, 0x2B	; 43
     ee0:	79 f0       	breq	.+30     	; 0xf00 <vfprintf+0x84>
     ee2:	38 f4       	brcc	.+14     	; 0xef2 <vfprintf+0x76>
     ee4:	80 32       	cpi	r24, 0x20	; 32
     ee6:	79 f0       	breq	.+30     	; 0xf06 <vfprintf+0x8a>
     ee8:	83 32       	cpi	r24, 0x23	; 35
     eea:	a1 f4       	brne	.+40     	; 0xf14 <vfprintf+0x98>
     eec:	23 2d       	mov	r18, r3
     eee:	20 61       	ori	r18, 0x10	; 16
     ef0:	1d c0       	rjmp	.+58     	; 0xf2c <vfprintf+0xb0>
     ef2:	8d 32       	cpi	r24, 0x2D	; 45
     ef4:	61 f0       	breq	.+24     	; 0xf0e <vfprintf+0x92>
     ef6:	80 33       	cpi	r24, 0x30	; 48
     ef8:	69 f4       	brne	.+26     	; 0xf14 <vfprintf+0x98>
     efa:	23 2d       	mov	r18, r3
     efc:	21 60       	ori	r18, 0x01	; 1
     efe:	16 c0       	rjmp	.+44     	; 0xf2c <vfprintf+0xb0>
     f00:	83 2d       	mov	r24, r3
     f02:	82 60       	ori	r24, 0x02	; 2
     f04:	38 2e       	mov	r3, r24
     f06:	e3 2d       	mov	r30, r3
     f08:	e4 60       	ori	r30, 0x04	; 4
     f0a:	3e 2e       	mov	r3, r30
     f0c:	2a c0       	rjmp	.+84     	; 0xf62 <vfprintf+0xe6>
     f0e:	f3 2d       	mov	r31, r3
     f10:	f8 60       	ori	r31, 0x08	; 8
     f12:	1d c0       	rjmp	.+58     	; 0xf4e <vfprintf+0xd2>
     f14:	37 fc       	sbrc	r3, 7
     f16:	2d c0       	rjmp	.+90     	; 0xf72 <vfprintf+0xf6>
     f18:	20 ed       	ldi	r18, 0xD0	; 208
     f1a:	28 0f       	add	r18, r24
     f1c:	2a 30       	cpi	r18, 0x0A	; 10
     f1e:	40 f0       	brcs	.+16     	; 0xf30 <vfprintf+0xb4>
     f20:	8e 32       	cpi	r24, 0x2E	; 46
     f22:	b9 f4       	brne	.+46     	; 0xf52 <vfprintf+0xd6>
     f24:	36 fc       	sbrc	r3, 6
     f26:	81 c1       	rjmp	.+770    	; 0x122a <vfprintf+0x3ae>
     f28:	23 2d       	mov	r18, r3
     f2a:	20 64       	ori	r18, 0x40	; 64
     f2c:	32 2e       	mov	r3, r18
     f2e:	19 c0       	rjmp	.+50     	; 0xf62 <vfprintf+0xe6>
     f30:	36 fe       	sbrs	r3, 6
     f32:	06 c0       	rjmp	.+12     	; 0xf40 <vfprintf+0xc4>
     f34:	8a e0       	ldi	r24, 0x0A	; 10
     f36:	98 9e       	mul	r9, r24
     f38:	20 0d       	add	r18, r0
     f3a:	11 24       	eor	r1, r1
     f3c:	92 2e       	mov	r9, r18
     f3e:	11 c0       	rjmp	.+34     	; 0xf62 <vfprintf+0xe6>
     f40:	ea e0       	ldi	r30, 0x0A	; 10
     f42:	2e 9e       	mul	r2, r30
     f44:	20 0d       	add	r18, r0
     f46:	11 24       	eor	r1, r1
     f48:	22 2e       	mov	r2, r18
     f4a:	f3 2d       	mov	r31, r3
     f4c:	f0 62       	ori	r31, 0x20	; 32
     f4e:	3f 2e       	mov	r3, r31
     f50:	08 c0       	rjmp	.+16     	; 0xf62 <vfprintf+0xe6>
     f52:	8c 36       	cpi	r24, 0x6C	; 108
     f54:	21 f4       	brne	.+8      	; 0xf5e <vfprintf+0xe2>
     f56:	83 2d       	mov	r24, r3
     f58:	80 68       	ori	r24, 0x80	; 128
     f5a:	38 2e       	mov	r3, r24
     f5c:	02 c0       	rjmp	.+4      	; 0xf62 <vfprintf+0xe6>
     f5e:	88 36       	cpi	r24, 0x68	; 104
     f60:	41 f4       	brne	.+16     	; 0xf72 <vfprintf+0xf6>
     f62:	f7 01       	movw	r30, r14
     f64:	93 fd       	sbrc	r25, 3
     f66:	85 91       	lpm	r24, Z+
     f68:	93 ff       	sbrs	r25, 3
     f6a:	81 91       	ld	r24, Z+
     f6c:	7f 01       	movw	r14, r30
     f6e:	81 11       	cpse	r24, r1
     f70:	b3 cf       	rjmp	.-154    	; 0xed8 <vfprintf+0x5c>
     f72:	98 2f       	mov	r25, r24
     f74:	9f 7d       	andi	r25, 0xDF	; 223
     f76:	95 54       	subi	r25, 0x45	; 69
     f78:	93 30       	cpi	r25, 0x03	; 3
     f7a:	28 f4       	brcc	.+10     	; 0xf86 <vfprintf+0x10a>
     f7c:	0c 5f       	subi	r16, 0xFC	; 252
     f7e:	1f 4f       	sbci	r17, 0xFF	; 255
     f80:	9f e3       	ldi	r25, 0x3F	; 63
     f82:	99 83       	std	Y+1, r25	; 0x01
     f84:	0d c0       	rjmp	.+26     	; 0xfa0 <vfprintf+0x124>
     f86:	83 36       	cpi	r24, 0x63	; 99
     f88:	31 f0       	breq	.+12     	; 0xf96 <vfprintf+0x11a>
     f8a:	83 37       	cpi	r24, 0x73	; 115
     f8c:	71 f0       	breq	.+28     	; 0xfaa <vfprintf+0x12e>
     f8e:	83 35       	cpi	r24, 0x53	; 83
     f90:	09 f0       	breq	.+2      	; 0xf94 <vfprintf+0x118>
     f92:	59 c0       	rjmp	.+178    	; 0x1046 <vfprintf+0x1ca>
     f94:	21 c0       	rjmp	.+66     	; 0xfd8 <vfprintf+0x15c>
     f96:	f8 01       	movw	r30, r16
     f98:	80 81       	ld	r24, Z
     f9a:	89 83       	std	Y+1, r24	; 0x01
     f9c:	0e 5f       	subi	r16, 0xFE	; 254
     f9e:	1f 4f       	sbci	r17, 0xFF	; 255
     fa0:	88 24       	eor	r8, r8
     fa2:	83 94       	inc	r8
     fa4:	91 2c       	mov	r9, r1
     fa6:	53 01       	movw	r10, r6
     fa8:	13 c0       	rjmp	.+38     	; 0xfd0 <vfprintf+0x154>
     faa:	28 01       	movw	r4, r16
     fac:	f2 e0       	ldi	r31, 0x02	; 2
     fae:	4f 0e       	add	r4, r31
     fb0:	51 1c       	adc	r5, r1
     fb2:	f8 01       	movw	r30, r16
     fb4:	a0 80       	ld	r10, Z
     fb6:	b1 80       	ldd	r11, Z+1	; 0x01
     fb8:	36 fe       	sbrs	r3, 6
     fba:	03 c0       	rjmp	.+6      	; 0xfc2 <vfprintf+0x146>
     fbc:	69 2d       	mov	r22, r9
     fbe:	70 e0       	ldi	r23, 0x00	; 0
     fc0:	02 c0       	rjmp	.+4      	; 0xfc6 <vfprintf+0x14a>
     fc2:	6f ef       	ldi	r22, 0xFF	; 255
     fc4:	7f ef       	ldi	r23, 0xFF	; 255
     fc6:	c5 01       	movw	r24, r10
     fc8:	0e 94 6e 0a 	call	0x14dc	; 0x14dc <strnlen>
     fcc:	4c 01       	movw	r8, r24
     fce:	82 01       	movw	r16, r4
     fd0:	f3 2d       	mov	r31, r3
     fd2:	ff 77       	andi	r31, 0x7F	; 127
     fd4:	3f 2e       	mov	r3, r31
     fd6:	16 c0       	rjmp	.+44     	; 0x1004 <vfprintf+0x188>
     fd8:	28 01       	movw	r4, r16
     fda:	22 e0       	ldi	r18, 0x02	; 2
     fdc:	42 0e       	add	r4, r18
     fde:	51 1c       	adc	r5, r1
     fe0:	f8 01       	movw	r30, r16
     fe2:	a0 80       	ld	r10, Z
     fe4:	b1 80       	ldd	r11, Z+1	; 0x01
     fe6:	36 fe       	sbrs	r3, 6
     fe8:	03 c0       	rjmp	.+6      	; 0xff0 <vfprintf+0x174>
     fea:	69 2d       	mov	r22, r9
     fec:	70 e0       	ldi	r23, 0x00	; 0
     fee:	02 c0       	rjmp	.+4      	; 0xff4 <vfprintf+0x178>
     ff0:	6f ef       	ldi	r22, 0xFF	; 255
     ff2:	7f ef       	ldi	r23, 0xFF	; 255
     ff4:	c5 01       	movw	r24, r10
     ff6:	0e 94 5c 0a 	call	0x14b8	; 0x14b8 <strnlen_P>
     ffa:	4c 01       	movw	r8, r24
     ffc:	f3 2d       	mov	r31, r3
     ffe:	f0 68       	ori	r31, 0x80	; 128
    1000:	3f 2e       	mov	r3, r31
    1002:	82 01       	movw	r16, r4
    1004:	33 fc       	sbrc	r3, 3
    1006:	1b c0       	rjmp	.+54     	; 0x103e <vfprintf+0x1c2>
    1008:	82 2d       	mov	r24, r2
    100a:	90 e0       	ldi	r25, 0x00	; 0
    100c:	88 16       	cp	r8, r24
    100e:	99 06       	cpc	r9, r25
    1010:	b0 f4       	brcc	.+44     	; 0x103e <vfprintf+0x1c2>
    1012:	b6 01       	movw	r22, r12
    1014:	80 e2       	ldi	r24, 0x20	; 32
    1016:	90 e0       	ldi	r25, 0x00	; 0
    1018:	0e 94 79 0a 	call	0x14f2	; 0x14f2 <fputc>
    101c:	2a 94       	dec	r2
    101e:	f4 cf       	rjmp	.-24     	; 0x1008 <vfprintf+0x18c>
    1020:	f5 01       	movw	r30, r10
    1022:	37 fc       	sbrc	r3, 7
    1024:	85 91       	lpm	r24, Z+
    1026:	37 fe       	sbrs	r3, 7
    1028:	81 91       	ld	r24, Z+
    102a:	5f 01       	movw	r10, r30
    102c:	b6 01       	movw	r22, r12
    102e:	90 e0       	ldi	r25, 0x00	; 0
    1030:	0e 94 79 0a 	call	0x14f2	; 0x14f2 <fputc>
    1034:	21 10       	cpse	r2, r1
    1036:	2a 94       	dec	r2
    1038:	21 e0       	ldi	r18, 0x01	; 1
    103a:	82 1a       	sub	r8, r18
    103c:	91 08       	sbc	r9, r1
    103e:	81 14       	cp	r8, r1
    1040:	91 04       	cpc	r9, r1
    1042:	71 f7       	brne	.-36     	; 0x1020 <vfprintf+0x1a4>
    1044:	e8 c0       	rjmp	.+464    	; 0x1216 <vfprintf+0x39a>
    1046:	84 36       	cpi	r24, 0x64	; 100
    1048:	11 f0       	breq	.+4      	; 0x104e <vfprintf+0x1d2>
    104a:	89 36       	cpi	r24, 0x69	; 105
    104c:	41 f5       	brne	.+80     	; 0x109e <vfprintf+0x222>
    104e:	f8 01       	movw	r30, r16
    1050:	37 fe       	sbrs	r3, 7
    1052:	07 c0       	rjmp	.+14     	; 0x1062 <vfprintf+0x1e6>
    1054:	60 81       	ld	r22, Z
    1056:	71 81       	ldd	r23, Z+1	; 0x01
    1058:	82 81       	ldd	r24, Z+2	; 0x02
    105a:	93 81       	ldd	r25, Z+3	; 0x03
    105c:	0c 5f       	subi	r16, 0xFC	; 252
    105e:	1f 4f       	sbci	r17, 0xFF	; 255
    1060:	08 c0       	rjmp	.+16     	; 0x1072 <vfprintf+0x1f6>
    1062:	60 81       	ld	r22, Z
    1064:	71 81       	ldd	r23, Z+1	; 0x01
    1066:	07 2e       	mov	r0, r23
    1068:	00 0c       	add	r0, r0
    106a:	88 0b       	sbc	r24, r24
    106c:	99 0b       	sbc	r25, r25
    106e:	0e 5f       	subi	r16, 0xFE	; 254
    1070:	1f 4f       	sbci	r17, 0xFF	; 255
    1072:	f3 2d       	mov	r31, r3
    1074:	ff 76       	andi	r31, 0x6F	; 111
    1076:	3f 2e       	mov	r3, r31
    1078:	97 ff       	sbrs	r25, 7
    107a:	09 c0       	rjmp	.+18     	; 0x108e <vfprintf+0x212>
    107c:	90 95       	com	r25
    107e:	80 95       	com	r24
    1080:	70 95       	com	r23
    1082:	61 95       	neg	r22
    1084:	7f 4f       	sbci	r23, 0xFF	; 255
    1086:	8f 4f       	sbci	r24, 0xFF	; 255
    1088:	9f 4f       	sbci	r25, 0xFF	; 255
    108a:	f0 68       	ori	r31, 0x80	; 128
    108c:	3f 2e       	mov	r3, r31
    108e:	2a e0       	ldi	r18, 0x0A	; 10
    1090:	30 e0       	ldi	r19, 0x00	; 0
    1092:	a3 01       	movw	r20, r6
    1094:	0e 94 b5 0a 	call	0x156a	; 0x156a <__ultoa_invert>
    1098:	88 2e       	mov	r8, r24
    109a:	86 18       	sub	r8, r6
    109c:	45 c0       	rjmp	.+138    	; 0x1128 <vfprintf+0x2ac>
    109e:	85 37       	cpi	r24, 0x75	; 117
    10a0:	31 f4       	brne	.+12     	; 0x10ae <vfprintf+0x232>
    10a2:	23 2d       	mov	r18, r3
    10a4:	2f 7e       	andi	r18, 0xEF	; 239
    10a6:	b2 2e       	mov	r11, r18
    10a8:	2a e0       	ldi	r18, 0x0A	; 10
    10aa:	30 e0       	ldi	r19, 0x00	; 0
    10ac:	25 c0       	rjmp	.+74     	; 0x10f8 <vfprintf+0x27c>
    10ae:	93 2d       	mov	r25, r3
    10b0:	99 7f       	andi	r25, 0xF9	; 249
    10b2:	b9 2e       	mov	r11, r25
    10b4:	8f 36       	cpi	r24, 0x6F	; 111
    10b6:	c1 f0       	breq	.+48     	; 0x10e8 <vfprintf+0x26c>
    10b8:	18 f4       	brcc	.+6      	; 0x10c0 <vfprintf+0x244>
    10ba:	88 35       	cpi	r24, 0x58	; 88
    10bc:	79 f0       	breq	.+30     	; 0x10dc <vfprintf+0x260>
    10be:	b5 c0       	rjmp	.+362    	; 0x122a <vfprintf+0x3ae>
    10c0:	80 37       	cpi	r24, 0x70	; 112
    10c2:	19 f0       	breq	.+6      	; 0x10ca <vfprintf+0x24e>
    10c4:	88 37       	cpi	r24, 0x78	; 120
    10c6:	21 f0       	breq	.+8      	; 0x10d0 <vfprintf+0x254>
    10c8:	b0 c0       	rjmp	.+352    	; 0x122a <vfprintf+0x3ae>
    10ca:	e9 2f       	mov	r30, r25
    10cc:	e0 61       	ori	r30, 0x10	; 16
    10ce:	be 2e       	mov	r11, r30
    10d0:	b4 fe       	sbrs	r11, 4
    10d2:	0d c0       	rjmp	.+26     	; 0x10ee <vfprintf+0x272>
    10d4:	fb 2d       	mov	r31, r11
    10d6:	f4 60       	ori	r31, 0x04	; 4
    10d8:	bf 2e       	mov	r11, r31
    10da:	09 c0       	rjmp	.+18     	; 0x10ee <vfprintf+0x272>
    10dc:	34 fe       	sbrs	r3, 4
    10de:	0a c0       	rjmp	.+20     	; 0x10f4 <vfprintf+0x278>
    10e0:	29 2f       	mov	r18, r25
    10e2:	26 60       	ori	r18, 0x06	; 6
    10e4:	b2 2e       	mov	r11, r18
    10e6:	06 c0       	rjmp	.+12     	; 0x10f4 <vfprintf+0x278>
    10e8:	28 e0       	ldi	r18, 0x08	; 8
    10ea:	30 e0       	ldi	r19, 0x00	; 0
    10ec:	05 c0       	rjmp	.+10     	; 0x10f8 <vfprintf+0x27c>
    10ee:	20 e1       	ldi	r18, 0x10	; 16
    10f0:	30 e0       	ldi	r19, 0x00	; 0
    10f2:	02 c0       	rjmp	.+4      	; 0x10f8 <vfprintf+0x27c>
    10f4:	20 e1       	ldi	r18, 0x10	; 16
    10f6:	32 e0       	ldi	r19, 0x02	; 2
    10f8:	f8 01       	movw	r30, r16
    10fa:	b7 fe       	sbrs	r11, 7
    10fc:	07 c0       	rjmp	.+14     	; 0x110c <vfprintf+0x290>
    10fe:	60 81       	ld	r22, Z
    1100:	71 81       	ldd	r23, Z+1	; 0x01
    1102:	82 81       	ldd	r24, Z+2	; 0x02
    1104:	93 81       	ldd	r25, Z+3	; 0x03
    1106:	0c 5f       	subi	r16, 0xFC	; 252
    1108:	1f 4f       	sbci	r17, 0xFF	; 255
    110a:	06 c0       	rjmp	.+12     	; 0x1118 <vfprintf+0x29c>
    110c:	60 81       	ld	r22, Z
    110e:	71 81       	ldd	r23, Z+1	; 0x01
    1110:	80 e0       	ldi	r24, 0x00	; 0
    1112:	90 e0       	ldi	r25, 0x00	; 0
    1114:	0e 5f       	subi	r16, 0xFE	; 254
    1116:	1f 4f       	sbci	r17, 0xFF	; 255
    1118:	a3 01       	movw	r20, r6
    111a:	0e 94 b5 0a 	call	0x156a	; 0x156a <__ultoa_invert>
    111e:	88 2e       	mov	r8, r24
    1120:	86 18       	sub	r8, r6
    1122:	fb 2d       	mov	r31, r11
    1124:	ff 77       	andi	r31, 0x7F	; 127
    1126:	3f 2e       	mov	r3, r31
    1128:	36 fe       	sbrs	r3, 6
    112a:	0d c0       	rjmp	.+26     	; 0x1146 <vfprintf+0x2ca>
    112c:	23 2d       	mov	r18, r3
    112e:	2e 7f       	andi	r18, 0xFE	; 254
    1130:	a2 2e       	mov	r10, r18
    1132:	89 14       	cp	r8, r9
    1134:	58 f4       	brcc	.+22     	; 0x114c <vfprintf+0x2d0>
    1136:	34 fe       	sbrs	r3, 4
    1138:	0b c0       	rjmp	.+22     	; 0x1150 <vfprintf+0x2d4>
    113a:	32 fc       	sbrc	r3, 2
    113c:	09 c0       	rjmp	.+18     	; 0x1150 <vfprintf+0x2d4>
    113e:	83 2d       	mov	r24, r3
    1140:	8e 7e       	andi	r24, 0xEE	; 238
    1142:	a8 2e       	mov	r10, r24
    1144:	05 c0       	rjmp	.+10     	; 0x1150 <vfprintf+0x2d4>
    1146:	b8 2c       	mov	r11, r8
    1148:	a3 2c       	mov	r10, r3
    114a:	03 c0       	rjmp	.+6      	; 0x1152 <vfprintf+0x2d6>
    114c:	b8 2c       	mov	r11, r8
    114e:	01 c0       	rjmp	.+2      	; 0x1152 <vfprintf+0x2d6>
    1150:	b9 2c       	mov	r11, r9
    1152:	a4 fe       	sbrs	r10, 4
    1154:	0f c0       	rjmp	.+30     	; 0x1174 <vfprintf+0x2f8>
    1156:	fe 01       	movw	r30, r28
    1158:	e8 0d       	add	r30, r8
    115a:	f1 1d       	adc	r31, r1
    115c:	80 81       	ld	r24, Z
    115e:	80 33       	cpi	r24, 0x30	; 48
    1160:	21 f4       	brne	.+8      	; 0x116a <vfprintf+0x2ee>
    1162:	9a 2d       	mov	r25, r10
    1164:	99 7e       	andi	r25, 0xE9	; 233
    1166:	a9 2e       	mov	r10, r25
    1168:	09 c0       	rjmp	.+18     	; 0x117c <vfprintf+0x300>
    116a:	a2 fe       	sbrs	r10, 2
    116c:	06 c0       	rjmp	.+12     	; 0x117a <vfprintf+0x2fe>
    116e:	b3 94       	inc	r11
    1170:	b3 94       	inc	r11
    1172:	04 c0       	rjmp	.+8      	; 0x117c <vfprintf+0x300>
    1174:	8a 2d       	mov	r24, r10
    1176:	86 78       	andi	r24, 0x86	; 134
    1178:	09 f0       	breq	.+2      	; 0x117c <vfprintf+0x300>
    117a:	b3 94       	inc	r11
    117c:	a3 fc       	sbrc	r10, 3
    117e:	11 c0       	rjmp	.+34     	; 0x11a2 <vfprintf+0x326>
    1180:	a0 fe       	sbrs	r10, 0
    1182:	06 c0       	rjmp	.+12     	; 0x1190 <vfprintf+0x314>
    1184:	b2 14       	cp	r11, r2
    1186:	88 f4       	brcc	.+34     	; 0x11aa <vfprintf+0x32e>
    1188:	28 0c       	add	r2, r8
    118a:	92 2c       	mov	r9, r2
    118c:	9b 18       	sub	r9, r11
    118e:	0e c0       	rjmp	.+28     	; 0x11ac <vfprintf+0x330>
    1190:	b2 14       	cp	r11, r2
    1192:	60 f4       	brcc	.+24     	; 0x11ac <vfprintf+0x330>
    1194:	b6 01       	movw	r22, r12
    1196:	80 e2       	ldi	r24, 0x20	; 32
    1198:	90 e0       	ldi	r25, 0x00	; 0
    119a:	0e 94 79 0a 	call	0x14f2	; 0x14f2 <fputc>
    119e:	b3 94       	inc	r11
    11a0:	f7 cf       	rjmp	.-18     	; 0x1190 <vfprintf+0x314>
    11a2:	b2 14       	cp	r11, r2
    11a4:	18 f4       	brcc	.+6      	; 0x11ac <vfprintf+0x330>
    11a6:	2b 18       	sub	r2, r11
    11a8:	02 c0       	rjmp	.+4      	; 0x11ae <vfprintf+0x332>
    11aa:	98 2c       	mov	r9, r8
    11ac:	21 2c       	mov	r2, r1
    11ae:	a4 fe       	sbrs	r10, 4
    11b0:	10 c0       	rjmp	.+32     	; 0x11d2 <vfprintf+0x356>
    11b2:	b6 01       	movw	r22, r12
    11b4:	80 e3       	ldi	r24, 0x30	; 48
    11b6:	90 e0       	ldi	r25, 0x00	; 0
    11b8:	0e 94 79 0a 	call	0x14f2	; 0x14f2 <fputc>
    11bc:	a2 fe       	sbrs	r10, 2
    11be:	17 c0       	rjmp	.+46     	; 0x11ee <vfprintf+0x372>
    11c0:	a1 fc       	sbrc	r10, 1
    11c2:	03 c0       	rjmp	.+6      	; 0x11ca <vfprintf+0x34e>
    11c4:	88 e7       	ldi	r24, 0x78	; 120
    11c6:	90 e0       	ldi	r25, 0x00	; 0
    11c8:	02 c0       	rjmp	.+4      	; 0x11ce <vfprintf+0x352>
    11ca:	88 e5       	ldi	r24, 0x58	; 88
    11cc:	90 e0       	ldi	r25, 0x00	; 0
    11ce:	b6 01       	movw	r22, r12
    11d0:	0c c0       	rjmp	.+24     	; 0x11ea <vfprintf+0x36e>
    11d2:	8a 2d       	mov	r24, r10
    11d4:	86 78       	andi	r24, 0x86	; 134
    11d6:	59 f0       	breq	.+22     	; 0x11ee <vfprintf+0x372>
    11d8:	a1 fe       	sbrs	r10, 1
    11da:	02 c0       	rjmp	.+4      	; 0x11e0 <vfprintf+0x364>
    11dc:	8b e2       	ldi	r24, 0x2B	; 43
    11de:	01 c0       	rjmp	.+2      	; 0x11e2 <vfprintf+0x366>
    11e0:	80 e2       	ldi	r24, 0x20	; 32
    11e2:	a7 fc       	sbrc	r10, 7
    11e4:	8d e2       	ldi	r24, 0x2D	; 45
    11e6:	b6 01       	movw	r22, r12
    11e8:	90 e0       	ldi	r25, 0x00	; 0
    11ea:	0e 94 79 0a 	call	0x14f2	; 0x14f2 <fputc>
    11ee:	89 14       	cp	r8, r9
    11f0:	38 f4       	brcc	.+14     	; 0x1200 <vfprintf+0x384>
    11f2:	b6 01       	movw	r22, r12
    11f4:	80 e3       	ldi	r24, 0x30	; 48
    11f6:	90 e0       	ldi	r25, 0x00	; 0
    11f8:	0e 94 79 0a 	call	0x14f2	; 0x14f2 <fputc>
    11fc:	9a 94       	dec	r9
    11fe:	f7 cf       	rjmp	.-18     	; 0x11ee <vfprintf+0x372>
    1200:	8a 94       	dec	r8
    1202:	f3 01       	movw	r30, r6
    1204:	e8 0d       	add	r30, r8
    1206:	f1 1d       	adc	r31, r1
    1208:	80 81       	ld	r24, Z
    120a:	b6 01       	movw	r22, r12
    120c:	90 e0       	ldi	r25, 0x00	; 0
    120e:	0e 94 79 0a 	call	0x14f2	; 0x14f2 <fputc>
    1212:	81 10       	cpse	r8, r1
    1214:	f5 cf       	rjmp	.-22     	; 0x1200 <vfprintf+0x384>
    1216:	22 20       	and	r2, r2
    1218:	09 f4       	brne	.+2      	; 0x121c <vfprintf+0x3a0>
    121a:	42 ce       	rjmp	.-892    	; 0xea0 <vfprintf+0x24>
    121c:	b6 01       	movw	r22, r12
    121e:	80 e2       	ldi	r24, 0x20	; 32
    1220:	90 e0       	ldi	r25, 0x00	; 0
    1222:	0e 94 79 0a 	call	0x14f2	; 0x14f2 <fputc>
    1226:	2a 94       	dec	r2
    1228:	f6 cf       	rjmp	.-20     	; 0x1216 <vfprintf+0x39a>
    122a:	f6 01       	movw	r30, r12
    122c:	86 81       	ldd	r24, Z+6	; 0x06
    122e:	97 81       	ldd	r25, Z+7	; 0x07
    1230:	02 c0       	rjmp	.+4      	; 0x1236 <vfprintf+0x3ba>
    1232:	8f ef       	ldi	r24, 0xFF	; 255
    1234:	9f ef       	ldi	r25, 0xFF	; 255
    1236:	2b 96       	adiw	r28, 0x0b	; 11
    1238:	e2 e1       	ldi	r30, 0x12	; 18
    123a:	0c 94 61 0b 	jmp	0x16c2	; 0x16c2 <__epilogue_restores__>

0000123e <calloc>:
    123e:	0f 93       	push	r16
    1240:	1f 93       	push	r17
    1242:	cf 93       	push	r28
    1244:	df 93       	push	r29
    1246:	86 9f       	mul	r24, r22
    1248:	80 01       	movw	r16, r0
    124a:	87 9f       	mul	r24, r23
    124c:	10 0d       	add	r17, r0
    124e:	96 9f       	mul	r25, r22
    1250:	10 0d       	add	r17, r0
    1252:	11 24       	eor	r1, r1
    1254:	c8 01       	movw	r24, r16
    1256:	0e 94 3b 09 	call	0x1276	; 0x1276 <malloc>
    125a:	ec 01       	movw	r28, r24
    125c:	00 97       	sbiw	r24, 0x00	; 0
    125e:	29 f0       	breq	.+10     	; 0x126a <calloc+0x2c>
    1260:	a8 01       	movw	r20, r16
    1262:	60 e0       	ldi	r22, 0x00	; 0
    1264:	70 e0       	ldi	r23, 0x00	; 0
    1266:	0e 94 67 0a 	call	0x14ce	; 0x14ce <memset>
    126a:	ce 01       	movw	r24, r28
    126c:	df 91       	pop	r29
    126e:	cf 91       	pop	r28
    1270:	1f 91       	pop	r17
    1272:	0f 91       	pop	r16
    1274:	08 95       	ret

00001276 <malloc>:
    1276:	0f 93       	push	r16
    1278:	1f 93       	push	r17
    127a:	cf 93       	push	r28
    127c:	df 93       	push	r29
    127e:	82 30       	cpi	r24, 0x02	; 2
    1280:	91 05       	cpc	r25, r1
    1282:	10 f4       	brcc	.+4      	; 0x1288 <malloc+0x12>
    1284:	82 e0       	ldi	r24, 0x02	; 2
    1286:	90 e0       	ldi	r25, 0x00	; 0
    1288:	e0 91 ed 03 	lds	r30, 0x03ED	; 0x8003ed <__flp>
    128c:	f0 91 ee 03 	lds	r31, 0x03EE	; 0x8003ee <__flp+0x1>
    1290:	20 e0       	ldi	r18, 0x00	; 0
    1292:	30 e0       	ldi	r19, 0x00	; 0
    1294:	a0 e0       	ldi	r26, 0x00	; 0
    1296:	b0 e0       	ldi	r27, 0x00	; 0
    1298:	30 97       	sbiw	r30, 0x00	; 0
    129a:	19 f1       	breq	.+70     	; 0x12e2 <malloc+0x6c>
    129c:	40 81       	ld	r20, Z
    129e:	51 81       	ldd	r21, Z+1	; 0x01
    12a0:	02 81       	ldd	r16, Z+2	; 0x02
    12a2:	13 81       	ldd	r17, Z+3	; 0x03
    12a4:	48 17       	cp	r20, r24
    12a6:	59 07       	cpc	r21, r25
    12a8:	c8 f0       	brcs	.+50     	; 0x12dc <malloc+0x66>
    12aa:	84 17       	cp	r24, r20
    12ac:	95 07       	cpc	r25, r21
    12ae:	69 f4       	brne	.+26     	; 0x12ca <malloc+0x54>
    12b0:	10 97       	sbiw	r26, 0x00	; 0
    12b2:	31 f0       	breq	.+12     	; 0x12c0 <malloc+0x4a>
    12b4:	12 96       	adiw	r26, 0x02	; 2
    12b6:	0c 93       	st	X, r16
    12b8:	12 97       	sbiw	r26, 0x02	; 2
    12ba:	13 96       	adiw	r26, 0x03	; 3
    12bc:	1c 93       	st	X, r17
    12be:	27 c0       	rjmp	.+78     	; 0x130e <malloc+0x98>
    12c0:	00 93 ed 03 	sts	0x03ED, r16	; 0x8003ed <__flp>
    12c4:	10 93 ee 03 	sts	0x03EE, r17	; 0x8003ee <__flp+0x1>
    12c8:	22 c0       	rjmp	.+68     	; 0x130e <malloc+0x98>
    12ca:	21 15       	cp	r18, r1
    12cc:	31 05       	cpc	r19, r1
    12ce:	19 f0       	breq	.+6      	; 0x12d6 <malloc+0x60>
    12d0:	42 17       	cp	r20, r18
    12d2:	53 07       	cpc	r21, r19
    12d4:	18 f4       	brcc	.+6      	; 0x12dc <malloc+0x66>
    12d6:	9a 01       	movw	r18, r20
    12d8:	bd 01       	movw	r22, r26
    12da:	ef 01       	movw	r28, r30
    12dc:	df 01       	movw	r26, r30
    12de:	f8 01       	movw	r30, r16
    12e0:	db cf       	rjmp	.-74     	; 0x1298 <malloc+0x22>
    12e2:	21 15       	cp	r18, r1
    12e4:	31 05       	cpc	r19, r1
    12e6:	f9 f0       	breq	.+62     	; 0x1326 <malloc+0xb0>
    12e8:	28 1b       	sub	r18, r24
    12ea:	39 0b       	sbc	r19, r25
    12ec:	24 30       	cpi	r18, 0x04	; 4
    12ee:	31 05       	cpc	r19, r1
    12f0:	80 f4       	brcc	.+32     	; 0x1312 <malloc+0x9c>
    12f2:	8a 81       	ldd	r24, Y+2	; 0x02
    12f4:	9b 81       	ldd	r25, Y+3	; 0x03
    12f6:	61 15       	cp	r22, r1
    12f8:	71 05       	cpc	r23, r1
    12fa:	21 f0       	breq	.+8      	; 0x1304 <malloc+0x8e>
    12fc:	fb 01       	movw	r30, r22
    12fe:	93 83       	std	Z+3, r25	; 0x03
    1300:	82 83       	std	Z+2, r24	; 0x02
    1302:	04 c0       	rjmp	.+8      	; 0x130c <malloc+0x96>
    1304:	90 93 ee 03 	sts	0x03EE, r25	; 0x8003ee <__flp+0x1>
    1308:	80 93 ed 03 	sts	0x03ED, r24	; 0x8003ed <__flp>
    130c:	fe 01       	movw	r30, r28
    130e:	32 96       	adiw	r30, 0x02	; 2
    1310:	44 c0       	rjmp	.+136    	; 0x139a <malloc+0x124>
    1312:	fe 01       	movw	r30, r28
    1314:	e2 0f       	add	r30, r18
    1316:	f3 1f       	adc	r31, r19
    1318:	81 93       	st	Z+, r24
    131a:	91 93       	st	Z+, r25
    131c:	22 50       	subi	r18, 0x02	; 2
    131e:	31 09       	sbc	r19, r1
    1320:	39 83       	std	Y+1, r19	; 0x01
    1322:	28 83       	st	Y, r18
    1324:	3a c0       	rjmp	.+116    	; 0x139a <malloc+0x124>
    1326:	20 91 eb 03 	lds	r18, 0x03EB	; 0x8003eb <__brkval>
    132a:	30 91 ec 03 	lds	r19, 0x03EC	; 0x8003ec <__brkval+0x1>
    132e:	23 2b       	or	r18, r19
    1330:	41 f4       	brne	.+16     	; 0x1342 <malloc+0xcc>
    1332:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <__malloc_heap_start>
    1336:	30 91 07 01 	lds	r19, 0x0107	; 0x800107 <__malloc_heap_start+0x1>
    133a:	30 93 ec 03 	sts	0x03EC, r19	; 0x8003ec <__brkval+0x1>
    133e:	20 93 eb 03 	sts	0x03EB, r18	; 0x8003eb <__brkval>
    1342:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <__malloc_heap_end>
    1346:	30 91 05 01 	lds	r19, 0x0105	; 0x800105 <__malloc_heap_end+0x1>
    134a:	21 15       	cp	r18, r1
    134c:	31 05       	cpc	r19, r1
    134e:	41 f4       	brne	.+16     	; 0x1360 <malloc+0xea>
    1350:	2d b7       	in	r18, 0x3d	; 61
    1352:	3e b7       	in	r19, 0x3e	; 62
    1354:	40 91 08 01 	lds	r20, 0x0108	; 0x800108 <__malloc_margin>
    1358:	50 91 09 01 	lds	r21, 0x0109	; 0x800109 <__malloc_margin+0x1>
    135c:	24 1b       	sub	r18, r20
    135e:	35 0b       	sbc	r19, r21
    1360:	e0 91 eb 03 	lds	r30, 0x03EB	; 0x8003eb <__brkval>
    1364:	f0 91 ec 03 	lds	r31, 0x03EC	; 0x8003ec <__brkval+0x1>
    1368:	e2 17       	cp	r30, r18
    136a:	f3 07       	cpc	r31, r19
    136c:	a0 f4       	brcc	.+40     	; 0x1396 <malloc+0x120>
    136e:	2e 1b       	sub	r18, r30
    1370:	3f 0b       	sbc	r19, r31
    1372:	28 17       	cp	r18, r24
    1374:	39 07       	cpc	r19, r25
    1376:	78 f0       	brcs	.+30     	; 0x1396 <malloc+0x120>
    1378:	ac 01       	movw	r20, r24
    137a:	4e 5f       	subi	r20, 0xFE	; 254
    137c:	5f 4f       	sbci	r21, 0xFF	; 255
    137e:	24 17       	cp	r18, r20
    1380:	35 07       	cpc	r19, r21
    1382:	48 f0       	brcs	.+18     	; 0x1396 <malloc+0x120>
    1384:	4e 0f       	add	r20, r30
    1386:	5f 1f       	adc	r21, r31
    1388:	50 93 ec 03 	sts	0x03EC, r21	; 0x8003ec <__brkval+0x1>
    138c:	40 93 eb 03 	sts	0x03EB, r20	; 0x8003eb <__brkval>
    1390:	81 93       	st	Z+, r24
    1392:	91 93       	st	Z+, r25
    1394:	02 c0       	rjmp	.+4      	; 0x139a <malloc+0x124>
    1396:	e0 e0       	ldi	r30, 0x00	; 0
    1398:	f0 e0       	ldi	r31, 0x00	; 0
    139a:	cf 01       	movw	r24, r30
    139c:	df 91       	pop	r29
    139e:	cf 91       	pop	r28
    13a0:	1f 91       	pop	r17
    13a2:	0f 91       	pop	r16
    13a4:	08 95       	ret

000013a6 <free>:
    13a6:	cf 93       	push	r28
    13a8:	df 93       	push	r29
    13aa:	00 97       	sbiw	r24, 0x00	; 0
    13ac:	09 f4       	brne	.+2      	; 0x13b0 <free+0xa>
    13ae:	81 c0       	rjmp	.+258    	; 0x14b2 <free+0x10c>
    13b0:	fc 01       	movw	r30, r24
    13b2:	32 97       	sbiw	r30, 0x02	; 2
    13b4:	13 82       	std	Z+3, r1	; 0x03
    13b6:	12 82       	std	Z+2, r1	; 0x02
    13b8:	a0 91 ed 03 	lds	r26, 0x03ED	; 0x8003ed <__flp>
    13bc:	b0 91 ee 03 	lds	r27, 0x03EE	; 0x8003ee <__flp+0x1>
    13c0:	10 97       	sbiw	r26, 0x00	; 0
    13c2:	81 f4       	brne	.+32     	; 0x13e4 <free+0x3e>
    13c4:	20 81       	ld	r18, Z
    13c6:	31 81       	ldd	r19, Z+1	; 0x01
    13c8:	82 0f       	add	r24, r18
    13ca:	93 1f       	adc	r25, r19
    13cc:	20 91 eb 03 	lds	r18, 0x03EB	; 0x8003eb <__brkval>
    13d0:	30 91 ec 03 	lds	r19, 0x03EC	; 0x8003ec <__brkval+0x1>
    13d4:	28 17       	cp	r18, r24
    13d6:	39 07       	cpc	r19, r25
    13d8:	51 f5       	brne	.+84     	; 0x142e <free+0x88>
    13da:	f0 93 ec 03 	sts	0x03EC, r31	; 0x8003ec <__brkval+0x1>
    13de:	e0 93 eb 03 	sts	0x03EB, r30	; 0x8003eb <__brkval>
    13e2:	67 c0       	rjmp	.+206    	; 0x14b2 <free+0x10c>
    13e4:	ed 01       	movw	r28, r26
    13e6:	20 e0       	ldi	r18, 0x00	; 0
    13e8:	30 e0       	ldi	r19, 0x00	; 0
    13ea:	ce 17       	cp	r28, r30
    13ec:	df 07       	cpc	r29, r31
    13ee:	40 f4       	brcc	.+16     	; 0x1400 <free+0x5a>
    13f0:	4a 81       	ldd	r20, Y+2	; 0x02
    13f2:	5b 81       	ldd	r21, Y+3	; 0x03
    13f4:	9e 01       	movw	r18, r28
    13f6:	41 15       	cp	r20, r1
    13f8:	51 05       	cpc	r21, r1
    13fa:	f1 f0       	breq	.+60     	; 0x1438 <free+0x92>
    13fc:	ea 01       	movw	r28, r20
    13fe:	f5 cf       	rjmp	.-22     	; 0x13ea <free+0x44>
    1400:	d3 83       	std	Z+3, r29	; 0x03
    1402:	c2 83       	std	Z+2, r28	; 0x02
    1404:	40 81       	ld	r20, Z
    1406:	51 81       	ldd	r21, Z+1	; 0x01
    1408:	84 0f       	add	r24, r20
    140a:	95 1f       	adc	r25, r21
    140c:	c8 17       	cp	r28, r24
    140e:	d9 07       	cpc	r29, r25
    1410:	59 f4       	brne	.+22     	; 0x1428 <free+0x82>
    1412:	88 81       	ld	r24, Y
    1414:	99 81       	ldd	r25, Y+1	; 0x01
    1416:	84 0f       	add	r24, r20
    1418:	95 1f       	adc	r25, r21
    141a:	02 96       	adiw	r24, 0x02	; 2
    141c:	91 83       	std	Z+1, r25	; 0x01
    141e:	80 83       	st	Z, r24
    1420:	8a 81       	ldd	r24, Y+2	; 0x02
    1422:	9b 81       	ldd	r25, Y+3	; 0x03
    1424:	93 83       	std	Z+3, r25	; 0x03
    1426:	82 83       	std	Z+2, r24	; 0x02
    1428:	21 15       	cp	r18, r1
    142a:	31 05       	cpc	r19, r1
    142c:	29 f4       	brne	.+10     	; 0x1438 <free+0x92>
    142e:	f0 93 ee 03 	sts	0x03EE, r31	; 0x8003ee <__flp+0x1>
    1432:	e0 93 ed 03 	sts	0x03ED, r30	; 0x8003ed <__flp>
    1436:	3d c0       	rjmp	.+122    	; 0x14b2 <free+0x10c>
    1438:	e9 01       	movw	r28, r18
    143a:	fb 83       	std	Y+3, r31	; 0x03
    143c:	ea 83       	std	Y+2, r30	; 0x02
    143e:	49 91       	ld	r20, Y+
    1440:	59 91       	ld	r21, Y+
    1442:	c4 0f       	add	r28, r20
    1444:	d5 1f       	adc	r29, r21
    1446:	ec 17       	cp	r30, r28
    1448:	fd 07       	cpc	r31, r29
    144a:	61 f4       	brne	.+24     	; 0x1464 <free+0xbe>
    144c:	80 81       	ld	r24, Z
    144e:	91 81       	ldd	r25, Z+1	; 0x01
    1450:	84 0f       	add	r24, r20
    1452:	95 1f       	adc	r25, r21
    1454:	02 96       	adiw	r24, 0x02	; 2
    1456:	e9 01       	movw	r28, r18
    1458:	99 83       	std	Y+1, r25	; 0x01
    145a:	88 83       	st	Y, r24
    145c:	82 81       	ldd	r24, Z+2	; 0x02
    145e:	93 81       	ldd	r25, Z+3	; 0x03
    1460:	9b 83       	std	Y+3, r25	; 0x03
    1462:	8a 83       	std	Y+2, r24	; 0x02
    1464:	e0 e0       	ldi	r30, 0x00	; 0
    1466:	f0 e0       	ldi	r31, 0x00	; 0
    1468:	12 96       	adiw	r26, 0x02	; 2
    146a:	8d 91       	ld	r24, X+
    146c:	9c 91       	ld	r25, X
    146e:	13 97       	sbiw	r26, 0x03	; 3
    1470:	00 97       	sbiw	r24, 0x00	; 0
    1472:	19 f0       	breq	.+6      	; 0x147a <free+0xd4>
    1474:	fd 01       	movw	r30, r26
    1476:	dc 01       	movw	r26, r24
    1478:	f7 cf       	rjmp	.-18     	; 0x1468 <free+0xc2>
    147a:	8d 91       	ld	r24, X+
    147c:	9c 91       	ld	r25, X
    147e:	11 97       	sbiw	r26, 0x01	; 1
    1480:	9d 01       	movw	r18, r26
    1482:	2e 5f       	subi	r18, 0xFE	; 254
    1484:	3f 4f       	sbci	r19, 0xFF	; 255
    1486:	82 0f       	add	r24, r18
    1488:	93 1f       	adc	r25, r19
    148a:	20 91 eb 03 	lds	r18, 0x03EB	; 0x8003eb <__brkval>
    148e:	30 91 ec 03 	lds	r19, 0x03EC	; 0x8003ec <__brkval+0x1>
    1492:	28 17       	cp	r18, r24
    1494:	39 07       	cpc	r19, r25
    1496:	69 f4       	brne	.+26     	; 0x14b2 <free+0x10c>
    1498:	30 97       	sbiw	r30, 0x00	; 0
    149a:	29 f4       	brne	.+10     	; 0x14a6 <free+0x100>
    149c:	10 92 ee 03 	sts	0x03EE, r1	; 0x8003ee <__flp+0x1>
    14a0:	10 92 ed 03 	sts	0x03ED, r1	; 0x8003ed <__flp>
    14a4:	02 c0       	rjmp	.+4      	; 0x14aa <free+0x104>
    14a6:	13 82       	std	Z+3, r1	; 0x03
    14a8:	12 82       	std	Z+2, r1	; 0x02
    14aa:	b0 93 ec 03 	sts	0x03EC, r27	; 0x8003ec <__brkval+0x1>
    14ae:	a0 93 eb 03 	sts	0x03EB, r26	; 0x8003eb <__brkval>
    14b2:	df 91       	pop	r29
    14b4:	cf 91       	pop	r28
    14b6:	08 95       	ret

000014b8 <strnlen_P>:
    14b8:	fc 01       	movw	r30, r24
    14ba:	05 90       	lpm	r0, Z+
    14bc:	61 50       	subi	r22, 0x01	; 1
    14be:	70 40       	sbci	r23, 0x00	; 0
    14c0:	01 10       	cpse	r0, r1
    14c2:	d8 f7       	brcc	.-10     	; 0x14ba <strnlen_P+0x2>
    14c4:	80 95       	com	r24
    14c6:	90 95       	com	r25
    14c8:	8e 0f       	add	r24, r30
    14ca:	9f 1f       	adc	r25, r31
    14cc:	08 95       	ret

000014ce <memset>:
    14ce:	dc 01       	movw	r26, r24
    14d0:	01 c0       	rjmp	.+2      	; 0x14d4 <memset+0x6>
    14d2:	6d 93       	st	X+, r22
    14d4:	41 50       	subi	r20, 0x01	; 1
    14d6:	50 40       	sbci	r21, 0x00	; 0
    14d8:	e0 f7       	brcc	.-8      	; 0x14d2 <memset+0x4>
    14da:	08 95       	ret

000014dc <strnlen>:
    14dc:	fc 01       	movw	r30, r24
    14de:	61 50       	subi	r22, 0x01	; 1
    14e0:	70 40       	sbci	r23, 0x00	; 0
    14e2:	01 90       	ld	r0, Z+
    14e4:	01 10       	cpse	r0, r1
    14e6:	d8 f7       	brcc	.-10     	; 0x14de <strnlen+0x2>
    14e8:	80 95       	com	r24
    14ea:	90 95       	com	r25
    14ec:	8e 0f       	add	r24, r30
    14ee:	9f 1f       	adc	r25, r31
    14f0:	08 95       	ret

000014f2 <fputc>:
    14f2:	0f 93       	push	r16
    14f4:	1f 93       	push	r17
    14f6:	cf 93       	push	r28
    14f8:	df 93       	push	r29
    14fa:	fb 01       	movw	r30, r22
    14fc:	23 81       	ldd	r18, Z+3	; 0x03
    14fe:	21 fd       	sbrc	r18, 1
    1500:	03 c0       	rjmp	.+6      	; 0x1508 <fputc+0x16>
    1502:	8f ef       	ldi	r24, 0xFF	; 255
    1504:	9f ef       	ldi	r25, 0xFF	; 255
    1506:	2c c0       	rjmp	.+88     	; 0x1560 <fputc+0x6e>
    1508:	22 ff       	sbrs	r18, 2
    150a:	16 c0       	rjmp	.+44     	; 0x1538 <fputc+0x46>
    150c:	46 81       	ldd	r20, Z+6	; 0x06
    150e:	57 81       	ldd	r21, Z+7	; 0x07
    1510:	24 81       	ldd	r18, Z+4	; 0x04
    1512:	35 81       	ldd	r19, Z+5	; 0x05
    1514:	42 17       	cp	r20, r18
    1516:	53 07       	cpc	r21, r19
    1518:	44 f4       	brge	.+16     	; 0x152a <fputc+0x38>
    151a:	a0 81       	ld	r26, Z
    151c:	b1 81       	ldd	r27, Z+1	; 0x01
    151e:	9d 01       	movw	r18, r26
    1520:	2f 5f       	subi	r18, 0xFF	; 255
    1522:	3f 4f       	sbci	r19, 0xFF	; 255
    1524:	31 83       	std	Z+1, r19	; 0x01
    1526:	20 83       	st	Z, r18
    1528:	8c 93       	st	X, r24
    152a:	26 81       	ldd	r18, Z+6	; 0x06
    152c:	37 81       	ldd	r19, Z+7	; 0x07
    152e:	2f 5f       	subi	r18, 0xFF	; 255
    1530:	3f 4f       	sbci	r19, 0xFF	; 255
    1532:	37 83       	std	Z+7, r19	; 0x07
    1534:	26 83       	std	Z+6, r18	; 0x06
    1536:	14 c0       	rjmp	.+40     	; 0x1560 <fputc+0x6e>
    1538:	8b 01       	movw	r16, r22
    153a:	ec 01       	movw	r28, r24
    153c:	fb 01       	movw	r30, r22
    153e:	00 84       	ldd	r0, Z+8	; 0x08
    1540:	f1 85       	ldd	r31, Z+9	; 0x09
    1542:	e0 2d       	mov	r30, r0
    1544:	09 95       	icall
    1546:	89 2b       	or	r24, r25
    1548:	e1 f6       	brne	.-72     	; 0x1502 <fputc+0x10>
    154a:	d8 01       	movw	r26, r16
    154c:	16 96       	adiw	r26, 0x06	; 6
    154e:	8d 91       	ld	r24, X+
    1550:	9c 91       	ld	r25, X
    1552:	17 97       	sbiw	r26, 0x07	; 7
    1554:	01 96       	adiw	r24, 0x01	; 1
    1556:	17 96       	adiw	r26, 0x07	; 7
    1558:	9c 93       	st	X, r25
    155a:	8e 93       	st	-X, r24
    155c:	16 97       	sbiw	r26, 0x06	; 6
    155e:	ce 01       	movw	r24, r28
    1560:	df 91       	pop	r29
    1562:	cf 91       	pop	r28
    1564:	1f 91       	pop	r17
    1566:	0f 91       	pop	r16
    1568:	08 95       	ret

0000156a <__ultoa_invert>:
    156a:	fa 01       	movw	r30, r20
    156c:	aa 27       	eor	r26, r26
    156e:	28 30       	cpi	r18, 0x08	; 8
    1570:	51 f1       	breq	.+84     	; 0x15c6 <__ultoa_invert+0x5c>
    1572:	20 31       	cpi	r18, 0x10	; 16
    1574:	81 f1       	breq	.+96     	; 0x15d6 <__ultoa_invert+0x6c>
    1576:	e8 94       	clt
    1578:	6f 93       	push	r22
    157a:	6e 7f       	andi	r22, 0xFE	; 254
    157c:	6e 5f       	subi	r22, 0xFE	; 254
    157e:	7f 4f       	sbci	r23, 0xFF	; 255
    1580:	8f 4f       	sbci	r24, 0xFF	; 255
    1582:	9f 4f       	sbci	r25, 0xFF	; 255
    1584:	af 4f       	sbci	r26, 0xFF	; 255
    1586:	b1 e0       	ldi	r27, 0x01	; 1
    1588:	3e d0       	rcall	.+124    	; 0x1606 <__ultoa_invert+0x9c>
    158a:	b4 e0       	ldi	r27, 0x04	; 4
    158c:	3c d0       	rcall	.+120    	; 0x1606 <__ultoa_invert+0x9c>
    158e:	67 0f       	add	r22, r23
    1590:	78 1f       	adc	r23, r24
    1592:	89 1f       	adc	r24, r25
    1594:	9a 1f       	adc	r25, r26
    1596:	a1 1d       	adc	r26, r1
    1598:	68 0f       	add	r22, r24
    159a:	79 1f       	adc	r23, r25
    159c:	8a 1f       	adc	r24, r26
    159e:	91 1d       	adc	r25, r1
    15a0:	a1 1d       	adc	r26, r1
    15a2:	6a 0f       	add	r22, r26
    15a4:	71 1d       	adc	r23, r1
    15a6:	81 1d       	adc	r24, r1
    15a8:	91 1d       	adc	r25, r1
    15aa:	a1 1d       	adc	r26, r1
    15ac:	20 d0       	rcall	.+64     	; 0x15ee <__ultoa_invert+0x84>
    15ae:	09 f4       	brne	.+2      	; 0x15b2 <__ultoa_invert+0x48>
    15b0:	68 94       	set
    15b2:	3f 91       	pop	r19
    15b4:	2a e0       	ldi	r18, 0x0A	; 10
    15b6:	26 9f       	mul	r18, r22
    15b8:	11 24       	eor	r1, r1
    15ba:	30 19       	sub	r19, r0
    15bc:	30 5d       	subi	r19, 0xD0	; 208
    15be:	31 93       	st	Z+, r19
    15c0:	de f6       	brtc	.-74     	; 0x1578 <__ultoa_invert+0xe>
    15c2:	cf 01       	movw	r24, r30
    15c4:	08 95       	ret
    15c6:	46 2f       	mov	r20, r22
    15c8:	47 70       	andi	r20, 0x07	; 7
    15ca:	40 5d       	subi	r20, 0xD0	; 208
    15cc:	41 93       	st	Z+, r20
    15ce:	b3 e0       	ldi	r27, 0x03	; 3
    15d0:	0f d0       	rcall	.+30     	; 0x15f0 <__ultoa_invert+0x86>
    15d2:	c9 f7       	brne	.-14     	; 0x15c6 <__ultoa_invert+0x5c>
    15d4:	f6 cf       	rjmp	.-20     	; 0x15c2 <__ultoa_invert+0x58>
    15d6:	46 2f       	mov	r20, r22
    15d8:	4f 70       	andi	r20, 0x0F	; 15
    15da:	40 5d       	subi	r20, 0xD0	; 208
    15dc:	4a 33       	cpi	r20, 0x3A	; 58
    15de:	18 f0       	brcs	.+6      	; 0x15e6 <__ultoa_invert+0x7c>
    15e0:	49 5d       	subi	r20, 0xD9	; 217
    15e2:	31 fd       	sbrc	r19, 1
    15e4:	40 52       	subi	r20, 0x20	; 32
    15e6:	41 93       	st	Z+, r20
    15e8:	02 d0       	rcall	.+4      	; 0x15ee <__ultoa_invert+0x84>
    15ea:	a9 f7       	brne	.-22     	; 0x15d6 <__ultoa_invert+0x6c>
    15ec:	ea cf       	rjmp	.-44     	; 0x15c2 <__ultoa_invert+0x58>
    15ee:	b4 e0       	ldi	r27, 0x04	; 4
    15f0:	a6 95       	lsr	r26
    15f2:	97 95       	ror	r25
    15f4:	87 95       	ror	r24
    15f6:	77 95       	ror	r23
    15f8:	67 95       	ror	r22
    15fa:	ba 95       	dec	r27
    15fc:	c9 f7       	brne	.-14     	; 0x15f0 <__ultoa_invert+0x86>
    15fe:	00 97       	sbiw	r24, 0x00	; 0
    1600:	61 05       	cpc	r22, r1
    1602:	71 05       	cpc	r23, r1
    1604:	08 95       	ret
    1606:	9b 01       	movw	r18, r22
    1608:	ac 01       	movw	r20, r24
    160a:	0a 2e       	mov	r0, r26
    160c:	06 94       	lsr	r0
    160e:	57 95       	ror	r21
    1610:	47 95       	ror	r20
    1612:	37 95       	ror	r19
    1614:	27 95       	ror	r18
    1616:	ba 95       	dec	r27
    1618:	c9 f7       	brne	.-14     	; 0x160c <__ultoa_invert+0xa2>
    161a:	62 0f       	add	r22, r18
    161c:	73 1f       	adc	r23, r19
    161e:	84 1f       	adc	r24, r20
    1620:	95 1f       	adc	r25, r21
    1622:	a0 1d       	adc	r26, r0
    1624:	08 95       	ret

00001626 <__divmodsi4>:
    1626:	05 2e       	mov	r0, r21
    1628:	97 fb       	bst	r25, 7
    162a:	1e f4       	brtc	.+6      	; 0x1632 <__divmodsi4+0xc>
    162c:	00 94       	com	r0
    162e:	0e 94 2a 0b 	call	0x1654	; 0x1654 <__negsi2>
    1632:	57 fd       	sbrc	r21, 7
    1634:	07 d0       	rcall	.+14     	; 0x1644 <__divmodsi4_neg2>
    1636:	0e 94 7c 0b 	call	0x16f8	; 0x16f8 <__udivmodsi4>
    163a:	07 fc       	sbrc	r0, 7
    163c:	03 d0       	rcall	.+6      	; 0x1644 <__divmodsi4_neg2>
    163e:	4e f4       	brtc	.+18     	; 0x1652 <__divmodsi4_exit>
    1640:	0c 94 2a 0b 	jmp	0x1654	; 0x1654 <__negsi2>

00001644 <__divmodsi4_neg2>:
    1644:	50 95       	com	r21
    1646:	40 95       	com	r20
    1648:	30 95       	com	r19
    164a:	21 95       	neg	r18
    164c:	3f 4f       	sbci	r19, 0xFF	; 255
    164e:	4f 4f       	sbci	r20, 0xFF	; 255
    1650:	5f 4f       	sbci	r21, 0xFF	; 255

00001652 <__divmodsi4_exit>:
    1652:	08 95       	ret

00001654 <__negsi2>:
    1654:	90 95       	com	r25
    1656:	80 95       	com	r24
    1658:	70 95       	com	r23
    165a:	61 95       	neg	r22
    165c:	7f 4f       	sbci	r23, 0xFF	; 255
    165e:	8f 4f       	sbci	r24, 0xFF	; 255
    1660:	9f 4f       	sbci	r25, 0xFF	; 255
    1662:	08 95       	ret

00001664 <__muluhisi3>:
    1664:	0e 94 9e 0b 	call	0x173c	; 0x173c <__umulhisi3>
    1668:	a5 9f       	mul	r26, r21
    166a:	90 0d       	add	r25, r0
    166c:	b4 9f       	mul	r27, r20
    166e:	90 0d       	add	r25, r0
    1670:	a4 9f       	mul	r26, r20
    1672:	80 0d       	add	r24, r0
    1674:	91 1d       	adc	r25, r1
    1676:	11 24       	eor	r1, r1
    1678:	08 95       	ret

0000167a <__mulshisi3>:
    167a:	b7 ff       	sbrs	r27, 7
    167c:	0c 94 32 0b 	jmp	0x1664	; 0x1664 <__muluhisi3>

00001680 <__mulohisi3>:
    1680:	0e 94 32 0b 	call	0x1664	; 0x1664 <__muluhisi3>
    1684:	82 1b       	sub	r24, r18
    1686:	93 0b       	sbc	r25, r19
    1688:	08 95       	ret

0000168a <__prologue_saves__>:
    168a:	2f 92       	push	r2
    168c:	3f 92       	push	r3
    168e:	4f 92       	push	r4
    1690:	5f 92       	push	r5
    1692:	6f 92       	push	r6
    1694:	7f 92       	push	r7
    1696:	8f 92       	push	r8
    1698:	9f 92       	push	r9
    169a:	af 92       	push	r10
    169c:	bf 92       	push	r11
    169e:	cf 92       	push	r12
    16a0:	df 92       	push	r13
    16a2:	ef 92       	push	r14
    16a4:	ff 92       	push	r15
    16a6:	0f 93       	push	r16
    16a8:	1f 93       	push	r17
    16aa:	cf 93       	push	r28
    16ac:	df 93       	push	r29
    16ae:	cd b7       	in	r28, 0x3d	; 61
    16b0:	de b7       	in	r29, 0x3e	; 62
    16b2:	ca 1b       	sub	r28, r26
    16b4:	db 0b       	sbc	r29, r27
    16b6:	0f b6       	in	r0, 0x3f	; 63
    16b8:	f8 94       	cli
    16ba:	de bf       	out	0x3e, r29	; 62
    16bc:	0f be       	out	0x3f, r0	; 63
    16be:	cd bf       	out	0x3d, r28	; 61
    16c0:	09 94       	ijmp

000016c2 <__epilogue_restores__>:
    16c2:	2a 88       	ldd	r2, Y+18	; 0x12
    16c4:	39 88       	ldd	r3, Y+17	; 0x11
    16c6:	48 88       	ldd	r4, Y+16	; 0x10
    16c8:	5f 84       	ldd	r5, Y+15	; 0x0f
    16ca:	6e 84       	ldd	r6, Y+14	; 0x0e
    16cc:	7d 84       	ldd	r7, Y+13	; 0x0d
    16ce:	8c 84       	ldd	r8, Y+12	; 0x0c
    16d0:	9b 84       	ldd	r9, Y+11	; 0x0b
    16d2:	aa 84       	ldd	r10, Y+10	; 0x0a
    16d4:	b9 84       	ldd	r11, Y+9	; 0x09
    16d6:	c8 84       	ldd	r12, Y+8	; 0x08
    16d8:	df 80       	ldd	r13, Y+7	; 0x07
    16da:	ee 80       	ldd	r14, Y+6	; 0x06
    16dc:	fd 80       	ldd	r15, Y+5	; 0x05
    16de:	0c 81       	ldd	r16, Y+4	; 0x04
    16e0:	1b 81       	ldd	r17, Y+3	; 0x03
    16e2:	aa 81       	ldd	r26, Y+2	; 0x02
    16e4:	b9 81       	ldd	r27, Y+1	; 0x01
    16e6:	ce 0f       	add	r28, r30
    16e8:	d1 1d       	adc	r29, r1
    16ea:	0f b6       	in	r0, 0x3f	; 63
    16ec:	f8 94       	cli
    16ee:	de bf       	out	0x3e, r29	; 62
    16f0:	0f be       	out	0x3f, r0	; 63
    16f2:	cd bf       	out	0x3d, r28	; 61
    16f4:	ed 01       	movw	r28, r26
    16f6:	08 95       	ret

000016f8 <__udivmodsi4>:
    16f8:	a1 e2       	ldi	r26, 0x21	; 33
    16fa:	1a 2e       	mov	r1, r26
    16fc:	aa 1b       	sub	r26, r26
    16fe:	bb 1b       	sub	r27, r27
    1700:	fd 01       	movw	r30, r26
    1702:	0d c0       	rjmp	.+26     	; 0x171e <__udivmodsi4_ep>

00001704 <__udivmodsi4_loop>:
    1704:	aa 1f       	adc	r26, r26
    1706:	bb 1f       	adc	r27, r27
    1708:	ee 1f       	adc	r30, r30
    170a:	ff 1f       	adc	r31, r31
    170c:	a2 17       	cp	r26, r18
    170e:	b3 07       	cpc	r27, r19
    1710:	e4 07       	cpc	r30, r20
    1712:	f5 07       	cpc	r31, r21
    1714:	20 f0       	brcs	.+8      	; 0x171e <__udivmodsi4_ep>
    1716:	a2 1b       	sub	r26, r18
    1718:	b3 0b       	sbc	r27, r19
    171a:	e4 0b       	sbc	r30, r20
    171c:	f5 0b       	sbc	r31, r21

0000171e <__udivmodsi4_ep>:
    171e:	66 1f       	adc	r22, r22
    1720:	77 1f       	adc	r23, r23
    1722:	88 1f       	adc	r24, r24
    1724:	99 1f       	adc	r25, r25
    1726:	1a 94       	dec	r1
    1728:	69 f7       	brne	.-38     	; 0x1704 <__udivmodsi4_loop>
    172a:	60 95       	com	r22
    172c:	70 95       	com	r23
    172e:	80 95       	com	r24
    1730:	90 95       	com	r25
    1732:	9b 01       	movw	r18, r22
    1734:	ac 01       	movw	r20, r24
    1736:	bd 01       	movw	r22, r26
    1738:	cf 01       	movw	r24, r30
    173a:	08 95       	ret

0000173c <__umulhisi3>:
    173c:	a2 9f       	mul	r26, r18
    173e:	b0 01       	movw	r22, r0
    1740:	b3 9f       	mul	r27, r19
    1742:	c0 01       	movw	r24, r0
    1744:	a3 9f       	mul	r26, r19
    1746:	70 0d       	add	r23, r0
    1748:	81 1d       	adc	r24, r1
    174a:	11 24       	eor	r1, r1
    174c:	91 1d       	adc	r25, r1
    174e:	b2 9f       	mul	r27, r18
    1750:	70 0d       	add	r23, r0
    1752:	81 1d       	adc	r24, r1
    1754:	11 24       	eor	r1, r1
    1756:	91 1d       	adc	r25, r1
    1758:	08 95       	ret

0000175a <_exit>:
    175a:	f8 94       	cli

0000175c <__stop_program>:
    175c:	ff cf       	rjmp	.-2      	; 0x175c <__stop_program>
